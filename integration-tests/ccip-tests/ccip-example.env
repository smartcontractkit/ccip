# An example template that you can use for your own .env file for integration test settings
# `source ./integration-tests/.env`

########## Mandatory Env Vars ##########
export CHAINLINK_IMAGE="***.dkr.ecr.***.amazonaws.com/chainlink-ccip" # link to pull chainlink image from which contains ccip codebase
export CHAINLINK_VERSION="0.4.0-beta.0+core2.1.0" # Version of the chainlink-ccip image to pull

########## Network Settings ##########

# Select a pre-defined network(s). Networks are pre-defined under `./integration-tests/known_networks.go`
# The network provided in index 0(SIMULATED in this example)
# is overlooked by ccip tests. The tests are run with networks provided
# from index 1 onwards (AVALANCHE_FUJI,SEPOLIA in this example)
# You need provide at least two networks (from index 1) to run the ccip tests
export SELECTED_NETWORKS="SIMULATED,AVALANCHE_FUJI,SEPOLIA"

# The following env vars are used to run the tests on non-simulated networks.
# Ignore the following when the tests are run using simulated networks
# export SELECTED_NETWORKS="SIMULATED,SIMULATED_1,SIMULATED_2"
# General private values that will be retrieved when running on non-simulated networks
export EVM_KEYS="private,funding,keys" # Comma-separated list of private keys to use when running on live networks

# Specific private values for urls and keys when running on specified chains
# Goerli
export GOERLI_URLS="<wss for goerli network>"
export GOERLI_HTTP_URLS="<http for goerli network>"
export GOERLI_KEYS="goerli,funding,keys" # optional if you want to use EVM_KEYS for the goerli network

# Sepolia
export SEPOLIA_URLS="<wss for sepolia network>"
export SEPOLIA_HTTP_URLS="<http for sepolia network>"
export SEPOLIA_KEYS="sepolia,funding,keys" # optional if you want to use EVM_KEYS for the sepolia network

# Arbitrum Goerli
export ARBITRUM_GOERLI_URLS="<wss for arbitrum network>"
export ARBITRUM_GOERLI_HTTP_URLS="<http for arbitrum network>"
export ARBITRUM_GOERLI_KEYS="arbitrum,funding,keys" # optional if you want to use EVM_KEYS for the arbitrum network

# Optimism Goerli
export OPTIMISM_GOERLI_URLS="<wss for optimism network>"
export OPTIMISM_GOERLI_HTTP_URLS="<http for optimism network>"
export OPTIMISM_GOERLI_KEYS="optimism,funding,keys" # optional if you want to use EVM_KEYS for the Optimism network

# Avalanche Fuji
export AVALANCHE_FUJI_URLS="wss://avalanche.io/ws/"
export AVALANCHE_FUJI_HTTP_URLS="http://avalanche.io/ws/"
export AVALANCHE_FUJI_KEYS="avalanche,funding,keys" # optional if you want to use EVM_KEYS for the Avalanche Fuji network

# Polygon Testnet
export MUMBAI_URLS="<wss for mumbai network>"
export MUMBAI_HTTP_URLS="<http for mumbai network>"
export MUMBAI_KEYS="mumbai,funding,keys" # optional if you want to use EVM_KEYS for the Polygon Testnet network

# Ethereum Mainnet
export ETHEREUM_MAINNET_URLS="<wss for ethereum mainnet network>"
export ETHEREUM_MAINNET_HTTP_URLS="<http for ethereum mainnet network>"
export ETHEREUM_MAINNET_KEYS="ethereum,funding,keys" # optional if you want to use EVM_KEYS for the Ethereum Mainnet network

export AVALANCHE_MAINNET_URLS="<wss for avalanche mainnet network>"
export AVALANCHE_MAINNET_HTTP_URLS="<http for avalanche mainnet network>"
export AVALANCHE_MAINNET_KEYS="avalanche,funding,keys" # optional if you want to use EVM_KEYS for the Avalanche Mainnet network

export ARBITRUM_MAINNET_URLS="<wss for arbitrum mainnet network>"
export ARBITRUM_MAINNET_HTTP_URLS="<http for arbitrum mainnet network>"
export ARBITRUM_MAINNET_KEYS="arbitrum,funding,keys" # optional if you want to use EVM_KEYS for the Arbitrum Mainnet network

export POLYGON_MAINNET_URLS="<wss for polygon mainnet network>"
export POLYGON_MAINNET_HTTP_URLS="<http for polygon mainnet network>"
export POLYGON_MAINNET_KEYS="polygon,funding,keys" # optional if you want to use EVM_KEYS for the Polygon Mainnet network

export OPTIMISM_MAINNET_URLS="<wss for optimism mainnet network>"
export OPTIMISM_MAINNET_HTTP_URLS="<http for optimism mainnet network>"
export OPTIMISM_MAINNET_KEYS="optimism,funding,keys" # optional if you want to use EVM_KEYS for the Optimism Mainnet network

########## Optional CCIP Test Settings ##########

# Number of networks to run the ccip tests on. Default value is 2 unless specified
# If you want to run the ccip tests on more than 2 networks, you need to provide the env name accordingly in SELECTED_NETWORKS
export CCIP_NO_OF_NETWORKS=2

# Whether to run the ccip tests on an existing deployment(staging,prod cluster). Default value is false unless specified
# If existing deployment is used, test will not deploy/configure the contracts or jobs. In this case
# the tests will assume that deployment has already been completed and will ensure the ccip-send and receive is working
# with the provided contracts under `./integration-tests/contracts/ccip/laneconfig/contracts.json`
export CCIP_TESTS_ON_EXISTING_DEPLOYMENT=false

# Even if the CCIP_TESTS_ON_EXISTING_DEPLOYMENT is false, test will try to reuse contracts from `./integration-tests/contracts/ccip/laneconfig/contracts.json`
# if CCIP_REUSE_CONTRACTS is true. If you want tests to deploy new contracts, set CCIP_REUSE_CONTRACTS to false
export CCIP_REUSE_CONTRACTS=true # Whether to reuse the contracts deployed in the previous run. Default value is true unless specified

# Duration to wait for the each phase validation(SendRequested, Commit, Execution) to time-out.
# Default value is 5m for smoke and 30m for load unless specified
export CCIP_PHASE_VALIDATION_TIMEOUT=5m

# Amount of native currency to fund the chainlink node with for each network. Default value is 1 for smoke and 20 unless specified
export CCIP_CHAINLINK_NODE_FUNDING=1

### Optional Load Test Settings ###
# Msg type to use for the load test. Default value is WithToken unless specified.
# Values to choose from WithToken,WithoutToken
export CCIP_MSG_TYPE=WithToken

# Duration to run the load test for. Default value is 10m unless specified
export CCIP_TEST_DURATION=10m

# Rate unit to use for the load test. The ccip-send requests will be triggerred at a rate of <CCIP_LOAD_TEST_RATEUNIT> duration.
# Default value is 1s unless specified
export CCIP_LOAD_TEST_RATEUNIT=1s

# Rate to use for the load test. Default value is 2 unless specified
# The ccip-send requests will be triggerred at a rate of <CCIP_LOAD_TEST_RATE> per <CCIP_LOAD_TEST_RATEUNIT>
export CCIP_LOAD_TEST_RATE=2

# Chaos interval to use for the load test. Default value is 1m unless specified
# The chaos interval is the duration to wait before subsequent chaos condition is applied in the test environment.
# This is mainly used for load tests with chaos.
export CCIP_LOAD_TEST_CHAOS_INTERVAL=1m

# Keep environment alive for the specified duration after the test is completed. Default value is 20m unless specified
export CCIP_KEEP_ENV_TTL=20m

# if you want to send loki logs to a loki instance for populating dashboards from load test result, please provide the following values
export TEST_LOKI_TOKEN="<token for loki>"
export TEST_LOKI_URL="<url for loki>"

##### This is applicable for load tests. If you want to be notified on slack when the load tests are completed, please provide the following values ####
#### Slack Notification Settings ####
export SLACK_API_KEY="xoxb-example-key" # API key used to report soak test results to slack
export SLACK_CHANNEL="C000000000" # Channel ID for the slack bot to post test results
export SLACK_USER="U000000000" # User ID of the person running the soak tests to properly notify them

#### Some Additional Settings ####
# Whether to keep the environment alive after the tests are completed. Default value is Never unless specified
export KEEP_ENVIRONMENTS="Never" # Always | OnFail | Never
# Name of the person running the tests (change to your own). This will be used in environment tags.
export CHAINLINK_ENV_USER="Satoshi-Nakamoto"
# Log level for the tests. Default value is info unless specified
export TEST_LOG_LEVEL="info" # info | debug | trace