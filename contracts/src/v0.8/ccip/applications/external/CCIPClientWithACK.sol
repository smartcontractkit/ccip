// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {IRouterClient} from "../../interfaces/IRouterClient.sol";
import {Client} from "../../libraries/Client.sol";
import {CCIPReceiverWithACK} from "./CCIPReceiverWithACK.sol";

import {IERC20} from "../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol";

/// @title CCIPClientWithACK
/// @notice This contract implements logic for sending and receiving CCIP Messages, as well as responding to incoming
/// messages with an ACK-response pattern. It utilizes CCIPReceiver's defensive patterns by default.
/// @dev ccipReceive functionality has been inherited fromCCIPReceiverWithACK, and so only ccipSend functionality must
/// be implemented
contract CCIPClientWithACK is CCIPReceiverWithACK {
  using SafeERC20 for IERC20;

  error CannotAcknowledgeUnsentMessage(bytes32);

  event PreFundingStateUpdated(bool usePreFunding);

  bool public s_shouldUsePreFunding;

  constructor(address router, IERC20 feeToken, bool usePreFunding) CCIPReceiverWithACK(router, feeToken) {
    s_shouldUsePreFunding = usePreFunding;
  }

  /// @notice sends a message through CCIP to the router
  /// @param destChainSelector The unique CCIP identifier for a destination chain
  /// @param tokenAmounts An array of CCIP compatible tokens and their amounts to send through the bridge
  /// @param data Arbitrary bytes to be sent to the destination address on the destination chain
  /// @dev The recipient of the message and any extraArgs are set manually ahead of time using the applyChainUpdates()
  /// function in CCIPBase
  /// @return messageId the unique message ID generated by the CCIP router and used to track message status.
  function ccipSend(
    uint64 destChainSelector,
    Client.EVMTokenAmount[] memory tokenAmounts,
    bytes memory data
  ) public payable virtual isValidChain(destChainSelector) returns (bytes32 messageId) {
    Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({
      receiver: s_chainConfigs[destChainSelector].recipient,
      data: data,
      tokenAmounts: tokenAmounts,
      extraArgs: s_chainConfigs[destChainSelector].extraArgsBytes,
      feeToken: address(s_feeToken)
    });

    for (uint256 i = 0; i < tokenAmounts.length; ++i) {
      // Transfer the tokens to pay for tokens in tokenAmounts
      IERC20(tokenAmounts[i].token).safeTransferFrom(msg.sender, address(this), tokenAmounts[i].amount);

      // Do not approve the tokens if it is the feeToken, otherwise the approval amount may overflow
      if (tokenAmounts[i].token != address(s_feeToken)) {
        IERC20(tokenAmounts[i].token).safeApprove(s_ccipRouter, tokenAmounts[i].amount);
      }
    }

    uint256 fee = IRouterClient(s_ccipRouter).getFee(destChainSelector, message);

    if (!s_shouldUsePreFunding) {
      IERC20(s_feeToken).safeTransferFrom(msg.sender, address(this), fee);
    }

    messageId = IRouterClient(s_ccipRouter).ccipSend{value: address(s_feeToken) == address(0) ? fee : 0}(
      destChainSelector, message
    );

    s_messageStatus[messageId] = CCIPReceiverWithACK.MessageStatus.SENT;

    emit MessageSent(messageId, bytes32(0));

    return messageId;
  }

  function updatePreFundingStatus(bool usePreFunding) external onlyOwner {
    s_shouldUsePreFunding = usePreFunding;

    emit PreFundingStateUpdated(usePreFunding);
  }
}
