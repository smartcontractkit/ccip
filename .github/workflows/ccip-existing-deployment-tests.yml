name: CCIP Soak Tests on Existing Deployment
on:
  workflow_dispatch:
    inputs:
      network1:
        description: Network A
        type: choice
        default: "SEPOLIA"
        options:
          - "SEPOLIA"
          - "OPTIMISM_GOERLI"
          - "AVALANCHE_FUJI"
          - "ARBITRUM_GOERLI"
          - "MUMBAI"
          - "ETHEREUM_MAINNET"
          - "OPTIMISM_MAINNET"
          - "AVALANCHE_MAINNET"
          - "ARBITRUM_MAINNET"
          - "POLYGON_MAINNET"
      network2:
        description: Network B
        type: choice
        default: "AVALANCHE_FUJI"
        options:
          - "SEPOLIA"
          - "OPTIMISM_GOERLI"
          - "AVALANCHE_FUJI"
          - "ARBITRUM_GOERLI"
          - "MUMBAI"
          - "ETHEREUM_MAINNET"
          - "OPTIMISM_MAINNET"
          - "AVALANCHE_MAINNET"
          - "ARBITRUM_MAINNET"
          - "POLYGON_MAINNET"
      wsURL1:
        description: Websocket URL for Network A
        type: string
        default: "ws://localhost:6688/ws"
      httpURL1:
        description: HTTP URL for Network A
        type: string
        default: "http://localhost:6688"
      wsURL2:
        description: Websocket URL for Network B
        type: string
        default: "ws://localhost:6688/ws"
      httpURL2:
        description: HTTP URL for Network B
        type: string
        default: "http://localhost:6688"
      ownerKey:
        description: Owner Key
        type: string
        required: true
      testDuration:
        description: Test Duration
        type: string
        default: "1m"
      send_request_rate:
        description: Number of ccip-send requests to trigger per minute
        required: true
        default: 2
        type: number

env:
  # for run-test variables and environment
  ENV_JOB_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-ccip-tests:${{ github.sha }}
  CHAINLINK_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink
  TEST_SUITE: load
  TEST_ARGS: -test.timeout 900h
  INTERNAL_DOCKER_REPO: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com

jobs:
  build-chainlink:
    environment: integration
    permissions:
      id-token: write
      contents: read
    name: Build Chainlink Image
    runs-on: ubuntu20.04-16cores-64GB
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@90fcbaac8ebf86da9c4d55dba24f6fe3029f0e0b
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Build Chainlink Image
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Check if image exists
        id: check-image
        uses: smartcontractkit/chainlink-github-actions/docker/image-exists@ad22fbd6f4d108b82aaf49b527bcf40f32babea8 # v2.2.1
        with:
          repository: chainlink
          tag: ${{ github.sha }}
          AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Build Image
        if: steps.check-image.outputs.exists == 'false'
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/build-image@ad22fbd6f4d108b82aaf49b527bcf40f32babea8 # v2.2.1
        with:
          cl_repo: smartcontractkit/chainlink
          cl_ref: ${{ github.sha }}
          should_checkout: 'false'
          cl_dockerfile: core/chainlink.Dockerfile
          push_tag: ${{ env.CHAINLINK_IMAGE }}:${{ github.sha }}
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Print Chainlink Image Built
        run: |
          echo "### chainlink node image tag used for this test run :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${GITHUB_SHA}\`" >>$GITHUB_STEP_SUMMARY

  build-test-image:
    environment: integration
    permissions:
      id-token: write
      contents: read
    name: Build Test Image
    runs-on: ubuntu20.04-16cores-64GB
    steps:
      - name: Collect Metrics
        if: needs.changes.outputs.src == 'true'
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@90fcbaac8ebf86da9c4d55dba24f6fe3029f0e0b
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Build Test Image
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Build Test Image
        uses: ./.github/actions/build-test-image
        with:
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ACCOUNT_NUMBER: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}

  ccip-soak-tests-existing-deployment:
    environment: integration
    permissions:
      issues: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    needs: [build-chainlink, build-test-image]
    env:
      SELECTED_NETWORKS: SIMULATED,${{ inputs.network1 }},${{ inputs.network2 }}
      CHAINLINK_COMMIT_SHA: ${{ github.sha }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      CCIP_TEST_DURATION: ${{ inputs.testDuration }}
      CCIP_PHASE_VALIDATION_TIMEOUT: 50m
      CCIP_LOAD_TEST_RATE: ${{ inputs.send_request_rate }}
      CCIP_LOAD_TEST_RATEUNIT: 1m
      CCIP_MSG_TYPE: WithToken
      CCIP_CHAINLINK_NODE_FUNDING: 20
      CCIP_TESTS_ON_EXISTING_DEPLOYMENT: True
      CCIP_NO_OF_NETWORKS: 2
      CCIP_KEEP_ENV_TTL: 720h
      CCIP_REUSE_CONTRACTS: True
      TEST_LOG_LEVEL: info
      KEEP_ENVIRONMENTS: ONFAIL
      DATABASE_URL: postgresql://postgres:node@localhost:5432/chainlink_test?sslmode=disable
      REF_NAME: ${{ github.head_ref || github.ref_name }}
      TEST_LOKI_TOKEN: ${{ secrets.LOKI_TOKEN }}
      TEST_LOKI_URL: ${{ secrets.LOKI_URL }}
    runs-on: ubuntu20.04-16cores-64GB
    name: CCIP Soak Test
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@8163dcea2f01a0a8fec84b284406ff7af1d2e1c0
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: ${{ inputs.networks }} CCIP Load Test
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ env.REF_NAME }}
      - name: Sets env vars
        shell: bash
        run: |
          EVM_KEYS=$(jq -r '.inputs.ownerKey' $GITHUB_EVENT_PATH)
          EVM_URLS_1=$(jq -r '.inputs.wsURL1' $GITHUB_EVENT_PATH)
          EVM_HTTP_URLS_1=$(jq -r '.inputs.httpURL1' $GITHUB_EVENT_PATH)
          EVM_URLS_2=$(jq -r '.inputs.wsURL2' $GITHUB_EVENT_PATH)
          EVM_HTTP_URLS_2=$(jq -r '.inputs.httpURL2' $GITHUB_EVENT_PATH)
          
          echo ::add-mask::$EVM_KEYS
          echo ::add-mask::$EVM_URLS_1
          echo ::add-mask::$EVM_HTTP_URLS_1
          echo ::add-mask::$EVM_URLS_2
          echo ::add-mask::$EVM_HTTP_URLS_2
          
          echo "EVM_KEYS=$EVM_KEYS" >> $GITHUB_ENV
          echo "${{ inputs.network1 }}_URLS=$EVM_URLS_1" >> $GITHUB_ENV
          echo "${{ inputs.network1 }}_HTTP_URLS=$EVM_HTTP_URLS_1" >> $GITHUB_ENV
          echo "${{ inputs.network2 }}_URLS=$EVM_URLS_2" >> $GITHUB_ENV
          echo "${{ inputs.network2 }}_HTTP_URLS=$EVM_HTTP_URLS_2" >> $GITHUB_ENV

      ## Run this step when changes that require tests to be run are made
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@ad22fbd6f4d108b82aaf49b527bcf40f32babea8 # v2.2.1
        with:
          test_command_to_run: cd ./integration-tests && go test -v -timeout 900h -count=1 -json -run ^TestLoadCCIPStableRPS$ ./load
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          cl_repo: ${{ env.CHAINLINK_IMAGE }}
          cl_image_tag: ${{ github.sha }}
          artifacts_location: ./integration-tests/load/logs/payload_ccip.json
          token: ${{ secrets.GITHUB_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}