name: CCIP Load Test
on:
  push:
    branches:
      - ccip-develop
  workflow_dispatch:
    inputs:
      base64_test_input : # base64 encoded toml for test input
        description: 'Base64 encoded toml test input'
        required: false

# Only run 1 of this workflow at a time per PR
concurrency:
  group: load-ccip-tests-chainlink-${{ github.ref }}
  cancel-in-progress: true

env:
  INPUT_CHAINLINK_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink
  INPUT_CHAINLINK_VERSION: ${{ github.sha}}
  INPUT_CHAINLINK_TEST_VERSION: ${{ github.sha}}
  ENV_JOB_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-ccip-tests:${{ github.sha }}
  INTERNAL_DOCKER_REPO: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com
  AWS_ECR_REPO_PUBLIC_REGISTRY: public.ecr.aws

jobs:
  build-chainlink:
    environment: integration
    if: ${{ inputs.chainlinkImage == '' || inputs.chainlinkVersion == '' }}
    permissions:
      id-token: write
      contents: read
    name: Build Chainlink Image
    runs-on: ubuntu20.04-16cores-64GB
    steps:
      - name: Checkout the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Check if image exists
        id: check-image
        uses: smartcontractkit/chainlink-github-actions/docker/image-exists@e865e376b8c2d594028c8d645dd6c47169b72974 # v2.2.16
        with:
          repository: chainlink
          tag: ${{ env.INPUT_CHAINLINK_VERSION }}
          AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Build Image
        if: steps.check-image.outputs.exists == 'false'
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/build-image@e865e376b8c2d594028c8d645dd6c47169b72974 # v2.2.16
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          cl_repo: smartcontractkit/chainlink-ccip
          cl_ref: ${{ env.INPUT_CHAINLINK_VERSION }}
          push_tag: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink:${{ env.INPUT_CHAINLINK_VERSION }}
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Collect Metrics
        if: always()
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@8163dcea2f01a0a8fec84b284406ff7af1d2e1c0
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Build Chainlink Image
        continue-on-error: true

  build-test-image:
    environment: integration
    permissions:
      id-token: write
      contents: read
    name: Build Test Image
    runs-on: ubuntu20.04-16cores-64GB
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@8163dcea2f01a0a8fec84b284406ff7af1d2e1c0
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Build Test Image
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Build Test Image
        uses: ./.github/actions/build-test-image
        with:
          tag: ${{ env.INPUT_CHAINLINK_TEST_VERSION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ACCOUNT_NUMBER: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}

  ccip-load-test:
    name: CCIP Load Test
    environment: integration
    runs-on: ubuntu-latest
    needs: [ build-chainlink, build-test-image ]
    if: ${{ always() && !contains(needs.*.result, 'failure') }}
    permissions:
      issues: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    env:
      CHAINLINK_COMMIT_SHA: ${{ inputs.chainlinkVersion }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      SLACK_USER: ${{ inputs.slackMemberID }}
      SLACK_API_KEY: ${{ secrets.QA_SLACK_API_KEY }}
      SLACK_CHANNEL: ${{ secrets.QA_SLACK_CHANNEL }}
      SELECTED_NETWORKS: SIMULATED
      TEST_LOG_LEVEL: info
      REF_NAME: ${{ github.head_ref || github.ref_name }}
      ENV_JOB_IMAGE_BASE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-ccip-tests

      EVM_KEYS: ${{ secrets.QA_EVM_KEYS }} # replace it with input parameter once debug log is updated to not print the key
      OPTIMISM_GOERLI_URLS: ${{ secrets.QA_OPTIMISM_GOERLI_URLS }}
      OPTIMISM_GOERLI_HTTP_URLS: ${{ secrets.QA_OPTIMISM_GOERLI_HTTP_URLS }}
      OPTIMISM_SEPOLIA_URLS: ${{ secrets.QA_OPTIMISM_SEPOLIA_URLS }}
      OPTIMISM_SEPOLIA_HTTP_URLS: ${{ secrets.QA_OPTIMISM_SEPOLIA_HTTP_URLS }}
      OPTIMISM_MAINNET_URLS: ${{ secrets.QA_OPTIMISM_MAINNET_URLS }}
      OPTIMISM_MAINNET_HTTP_URLS: ${{ secrets.QA_OPTIMISM_MAINNET_HTTP_URLS }}

      SEPOLIA_URLS: ${{ secrets.QA_SEPOLIA_URLS }}
      SEPOLIA_HTTP_URLS: ${{ secrets.QA_SEPOLIA_HTTP_URLS }}
      ETHEREUM_MAINNET_URLS: ${{ secrets.QA_ETHEREUM_MAINNET_URLS }}
      ETHEREUM_MAINNET_HTTP_URLS: ${{ secrets.QA_ETHEREUM_MAINNET_HTTP_URLS }}

      AVALANCHE_FUJI_URLS: ${{ secrets.QA_AVALANCHE_FUJI_URLS }}
      AVALANCHE_FUJI_HTTP_URLS: ${{ secrets.QA_AVALANCHE_FUJI_HTTP_URLS }}
      AVALANCHE_MAINNET_URLS: ${{ secrets.QA_AVALANCHE_MAINNET_URLS }}
      AVALANCHE_MAINNET_HTTP_URLS: ${{ secrets.QA_AVALANCHE_MAINNET_HTTP_URLS }}

      ARBITRUM_SEPOLIA_URLS: ${{ secrets.QA_ARBITRUM_SEPOLIA_URLS }}
      ARBITRUM_SEPOLIA_HTTP_URLS: ${{ secrets.QA_ARBITRUM_SEPOLIA_HTTP_URLS }}
      ARBITRUM_MAINNET_URLS: ${{ secrets.QA_ARBITRUM_MAINNET_URLS }}
      ARBITRUM_MAINNET_HTTP_URLS: ${{ secrets.QA_ARBITRUM_MAINNET_HTTP_URLS }}

      BASE_GOERLI_URLS: ${{ secrets.QA_BASE_GOERLI_URLS }}
      BASE_GOERLI_HTTP_URLS: ${{ secrets.QA_BASE_GOERLI_HTTP_URLS }}
      BASE_SEPOLIA_URLS: ${{ secrets.QA_BASE_SEPOLIA_URLS }}
      BASE_SEPOLIA_HTTP_URLS: ${{ secrets.QA_BASE_SEPOLIA_HTTP_URLS }}
      BASE_MAINNET_URLS: ${{ secrets.QA_BASE_MAINNET_URLS }}
      BASE_MAINNET_HTTP_URLS: ${{ secrets.QA_BASE_MAINNET_HTTP_URLS }}

      BSC_TESTNET_URLS: ${{ secrets.QA_BSC_TESTNET_URLS }}
      BSC_TESTNET_HTTP_URLS: ${{ secrets.QA_BSC_TESTNET_HTTP_URLS }}
      BSC_MAINNET_URLS: ${{ secrets.QA_BSC_MAINNET_URLS }}
      BSC_MAINNET_HTTP_URLS: ${{ secrets.QA_BSC_MAINNET_HTTP_URLS }}

      POLYGON_MUMBAI_URLS: ${{ secrets.QA_POLYGON_MUMBAI_URLS }}
      POLYGON_MUMBAI_HTTP_URLS: ${{ secrets.QA_POLYGON_MUMBAI_HTTP_URLS }}
      POLYGON_MAINNET_URLS: ${{ secrets.QA_POLYGON_MAINNET_URLS }}
      POLYGON_MAINNET_HTTP_URLS: ${{ secrets.QA_POLYGON_MAINNET_HTTP_URLS }}

      WEMIX_TESTNET_URLS: ${{ secrets.QA_WEMIX_TESTNET_URLS }}
      WEMIX_TESTNET_HTTP_URLS: ${{ secrets.QA_WEMIX_TESTNET_HTTP_URLS }}
      WEMIX_MAINNET_URLS: ${{ secrets.QA_WEMIX_MAINNET_URLS }}
      WEMIX_MAINNET_HTTP_URLS: ${{ secrets.QA_WEMIX_MAINNET_HTTP_URLS }}

      KROMA_SEPOLIA_URLS: ${{ secrets.QA_KROMA_SEPOLIA_URLS }}
      KROMA_SEPOLIA_HTTP_URLS: ${{ secrets.QA_KROMA_SEPOLIA_HTTP_URLS }}
      KROMA_MAINNET_URLS: ${{ secrets.QA_KROMA_MAINNET_URLS }}
      KROMA_MAINNET_HTTP_URLS: ${{ secrets.QA_KROMA_MAINNET_HTTP_URLS }}

    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@8163dcea2f01a0a8fec84b284406ff7af1d2e1c0
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: CCIP Load Test
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ env.REF_NAME }}
      - name: Sets env vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "BASE64_TEST_CONFIG_OVERRIDE=${{ inputs.base64_test_input }}" >> $GITHUB_ENV
            echo "TEST_BASE64_TEST_CONFIG_OVERRIDE=${{ inputs.base64_test_input }}" >> $GITHUB_ENV
          fi
      - name: step summary
        shell: bash
        run: |
          echo "### chainlink image used for this test run :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ env.INPUT_CHAINLINK_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### chainlink-tests image tag for this test run :ship:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ env.INPUT_CHAINLINK_TEST_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### test input override :link:" >>$GITHUB_STEP_SUMMARY
          echo "$(base64 -d <<< "${{ inputs.base64_test_input }}")" >>$GITHUB_STEP_SUMMARY
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@e865e376b8c2d594028c8d645dd6c47169b72974 # v2.2.16
        env:
          TEST_SUITE: load
          TEST_ARGS: -test.timeout 900h
          DATABASE_URL: postgresql://postgres:node@localhost:5432/chainlink_test?sslmode=disable
          TEST_LOKI_TENANT_ID: ${{ secrets.TEST_LOKI_TENANT_ID }}
          TEST_LOKI_URL: ${{ secrets.TEST_LOKI_URL }}
          RR_MEM: 8Gi
          RR_CPU: 4
          TEST_TRIGGERED_BY: ccip-load-test-ci
        with:
          test_command_to_run: cd ./integration-tests/ccip-tests && go test -v -timeout 70m -count=1 -json -run ^TestLoadCCIPStableRPS$ ./load 2>&1 | tee /tmp/gotest.log | gotestfmt
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          cl_repo: ${{ env.INPUT_CHAINLINK_IMAGE }}
          cl_image_tag: ${{ env.INPUT_CHAINLINK_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}
          triggered_by: ${{ env.TEST_TRIGGERED_BY }}
          artifacts_location: ./integration-tests/load/logs/payload_ccip.json
          aws_registries: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
          cache_key_id: ccip-load-${{ env.MOD_CACHE_VERSION }}
          cache_restore_only: "true"
          should_cleanup: "true"


  ccip-version-compatibility-test:
    name: CCIP Load With Version Compatibility Test
    environment: integration
    runs-on: ubuntu-latest
    needs: [ build-chainlink, build-test-image ]
    if: ${{ always() && !contains(needs.*.result, 'failure') }}
    permissions:
      issues: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    env:
      SLACK_USER: ${{ inputs.slackMemberID }}
      SLACK_API_KEY: ${{ secrets.QA_SLACK_API_KEY }}
      SLACK_CHANNEL: ${{ secrets.QA_SLACK_CHANNEL }}
      SELECTED_NETWORKS: SIMULATED
      EVM_KEYS: ${{ secrets.QA_EVM_KEYS }} # replace it with input parameter once debug log is updated to not print the key
      TEST_LOG_LEVEL: info
      REF_NAME: ${{ github.head_ref || github.ref_name }}
      ENV_JOB_IMAGE_BASE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-ccip-tests
      GOERLI_URLS: ${{ secrets.QA_GOERLI_URLS }}
      GOERLI_HTTP_URLS: ${{ secrets.QA_GOERLI_HTTP_URLS }}
      OPTIMISM_GOERLI_URLS: ${{ secrets.QA_OPTIMISM_GOERLI_URLS }}
      OPTIMISM_GOERLI_HTTP_URLS: ${{ secrets.QA_OPTIMISM_GOERLI_HTTP_URLS }}
      SEPOLIA_URLS: ${{ secrets.QA_SEPOLIA_URLS }}
      SEPOLIA_HTTP_URLS: ${{ secrets.QA_SEPOLIA_HTTP_URLS }}
      AVALANCHE_FUJI_URLS: ${{ secrets.QA_AVALANCHE_FUJI_URLS }}
      AVALANCHE_FUJI_HTTP_URLS: ${{ secrets.QA_AVALANCHE_FUJI_HTTP_URLS }}
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@8163dcea2f01a0a8fec84b284406ff7af1d2e1c0
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: CCIP Load Test
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ env.REF_NAME }}
      - name: Sets env vars
        id : set_env_vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "BASE64_TEST_CONFIG_OVERRIDE=${{ inputs.base64_test_input }}" >> $GITHUB_ENV
            echo "TEST_BASE64_TEST_CONFIG_OVERRIDE=${{ inputs.base64_test_input }}" >> $GITHUB_ENV
          fi
          echo "UPGRADE_VERSION=${{ env.INPUT_CHAINLINK_VERSION }}" >> $GITHUB_ENV
          echo "UPGRADE_IMAGE=${{ env.INPUT_CHAINLINK_IMAGE }}" >> $GITHUB_ENV
          untrimmed_ver=$(curl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" --request GET https://api.github.com/repos/${{ github.repository }}/releases | jq -r --arg SUFFIX "release" '.[] | select(.tag_name | endswith("release"))  | .tag_name' | sort -V | tail -n 1)
          last_release="${untrimmed_ver:1}"
          echo "last_release=${last_release}" >> $GITHUB_OUTPUT
      - name: step summary
        shell: bash
        run: |
          echo "### chainlink upgrade image used for this test run :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ env.INPUT_CHAINLINK_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### chainlink-tests image tag for this test run :ship:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ env.INPUT_CHAINLINK_TEST_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### test input override :link:" >>$GITHUB_STEP_SUMMARY
          echo "$(base64 -d <<< "${{ inputs.base64_test_input }}")" >>$GITHUB_STEP_SUMMARY
          echo "### testing upgrade against release :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ steps.set_env_vars.outputs.last_release }}\`" >>$GITHUB_STEP_SUMMARY
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@e865e376b8c2d594028c8d645dd6c47169b72974 # v2.2.16
        env:
          TEST_SUITE: load
          TEST_ARGS: -test.timeout 900h
          DATABASE_URL: postgresql://postgres:node@localhost:5432/chainlink_test?sslmode=disable
          TEST_LOKI_TENANT_ID: ${{ secrets.TEST_LOKI_TENANT_ID }}
          TEST_LOKI_URL: ${{ secrets.TEST_LOKI_URL }}
          RR_MEM: 8Gi
          RR_CPU: 4
          TEST_TRIGGERED_BY: ccip-load-upgrade-test-ci
        with:
          test_command_to_run: cd ./integration-tests/ccip-tests && go test -v -timeout 70m -count=1 -json -run ^TestLoadCCIPWithUpgradeNodeVersion$ ./load 2>&1 | tee /tmp/gotest.log | gotestfmt
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          cl_repo: ${{ env.AWS_ECR_REPO_PUBLIC_REGISTRY }}/w0i8p0z9/chainlink-ccip # releases are published to public registry
          cl_image_tag:  ${{ steps.set_env_vars.outputs.last_release }}
          token: ${{ secrets.GITHUB_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}
          triggered_by: ${{ env.TEST_TRIGGERED_BY }}
          artifacts_location: ./integration-tests/load/logs/payload_ccip.json
          aws_registries: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
          cache_key_id: ccip-load-${{ env.MOD_CACHE_VERSION }}
          cache_restore_only: "true"
          should_cleanup: "true"