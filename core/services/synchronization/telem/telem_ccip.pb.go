// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: telem_ccip.proto

package telem

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCIPExecutionObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LenObservedMessages uint32   `protobuf:"varint,1,opt,name=len_observed_messages,json=lenObservedMessages,proto3" json:"len_observed_messages,omitempty"` // number of observed messages
	LenTokenData        uint32   `protobuf:"varint,2,opt,name=len_token_data,json=lenTokenData,proto3" json:"len_token_data,omitempty"`                      // the total number of token
	TokenData           [][]byte `protobuf:"bytes,3,rep,name=token_data,json=tokenData,proto3" json:"token_data,omitempty"`                                  // flattened out execution observations
	SeqNrs              []uint64 `protobuf:"varint,4,rep,packed,name=seq_nrs,json=seqNrs,proto3" json:"seq_nrs,omitempty"`
	Epoch               uint32   `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round               uint32   `protobuf:"varint,6,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *CCIPExecutionObservation) Reset() {
	*x = CCIPExecutionObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telem_ccip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCIPExecutionObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCIPExecutionObservation) ProtoMessage() {}

func (x *CCIPExecutionObservation) ProtoReflect() protoreflect.Message {
	mi := &file_telem_ccip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCIPExecutionObservation.ProtoReflect.Descriptor instead.
func (*CCIPExecutionObservation) Descriptor() ([]byte, []int) {
	return file_telem_ccip_proto_rawDescGZIP(), []int{0}
}

func (x *CCIPExecutionObservation) GetLenObservedMessages() uint32 {
	if x != nil {
		return x.LenObservedMessages
	}
	return 0
}

func (x *CCIPExecutionObservation) GetLenTokenData() uint32 {
	if x != nil {
		return x.LenTokenData
	}
	return 0
}

func (x *CCIPExecutionObservation) GetTokenData() [][]byte {
	if x != nil {
		return x.TokenData
	}
	return nil
}

func (x *CCIPExecutionObservation) GetSeqNrs() []uint64 {
	if x != nil {
		return x.SeqNrs
	}
	return nil
}

func (x *CCIPExecutionObservation) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CCIPExecutionObservation) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// The CCIPCommitReport message is used to report the latest commit
// as it's seend by the node.
type CCIPCommitObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LenTokenPrices    uint32        `protobuf:"varint,1,opt,name=len_token_prices,json=lenTokenPrices,proto3" json:"len_token_prices,omitempty"` // number of token prices
	IntervalMin       uint64        `protobuf:"varint,2,opt,name=interval_min,json=intervalMin,proto3" json:"interval_min,omitempty"`            // minimum interval
	IntervalMax       uint64        `protobuf:"varint,3,opt,name=interval_max,json=intervalMax,proto3" json:"interval_max,omitempty"`            // maximum interval
	TokenPrices       []*TokenPrice `protobuf:"bytes,4,rep,name=token_prices,json=tokenPrices,proto3" json:"token_prices,omitempty"`             // flattened list of observed token prices in USD
	SourceGasPriceUsd []byte        `protobuf:"bytes,5,opt,name=source_gas_price_usd,json=sourceGasPriceUsd,proto3" json:"source_gas_price_usd,omitempty"`
	Epoch             uint32        `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round             uint32        `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *CCIPCommitObservation) Reset() {
	*x = CCIPCommitObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telem_ccip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCIPCommitObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCIPCommitObservation) ProtoMessage() {}

func (x *CCIPCommitObservation) ProtoReflect() protoreflect.Message {
	mi := &file_telem_ccip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCIPCommitObservation.ProtoReflect.Descriptor instead.
func (*CCIPCommitObservation) Descriptor() ([]byte, []int) {
	return file_telem_ccip_proto_rawDescGZIP(), []int{1}
}

func (x *CCIPCommitObservation) GetLenTokenPrices() uint32 {
	if x != nil {
		return x.LenTokenPrices
	}
	return 0
}

func (x *CCIPCommitObservation) GetIntervalMin() uint64 {
	if x != nil {
		return x.IntervalMin
	}
	return 0
}

func (x *CCIPCommitObservation) GetIntervalMax() uint64 {
	if x != nil {
		return x.IntervalMax
	}
	return 0
}

func (x *CCIPCommitObservation) GetTokenPrices() []*TokenPrice {
	if x != nil {
		return x.TokenPrices
	}
	return nil
}

func (x *CCIPCommitObservation) GetSourceGasPriceUsd() []byte {
	if x != nil {
		return x.SourceGasPriceUsd
	}
	return nil
}

func (x *CCIPCommitObservation) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CCIPCommitObservation) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// TokenPrices is a flattened out into a list CommitObservation.TokenPricesUSD map.
type TokenPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                   // address is the 20 byte address of an Ethereum account.
	PriceUsd []byte `protobuf:"bytes,2,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"` // price_usd is 'big.Int' price of the token in USD.
}

func (x *TokenPrice) Reset() {
	*x = TokenPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telem_ccip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenPrice) ProtoMessage() {}

func (x *TokenPrice) ProtoReflect() protoreflect.Message {
	mi := &file_telem_ccip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenPrice.ProtoReflect.Descriptor instead.
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return file_telem_ccip_proto_rawDescGZIP(), []int{2}
}

func (x *TokenPrice) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenPrice) GetPriceUsd() []byte {
	if x != nil {
		return x.PriceUsd
	}
	return nil
}

// CCIPTelemWrapper is a wrapper for CCIP messages defined above.
type CCIPTelemWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*CCIPTelemWrapper_CommitObservation
	//	*CCIPTelemWrapper_ExecutionObservation
	Msg isCCIPTelemWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *CCIPTelemWrapper) Reset() {
	*x = CCIPTelemWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telem_ccip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCIPTelemWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCIPTelemWrapper) ProtoMessage() {}

func (x *CCIPTelemWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_telem_ccip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCIPTelemWrapper.ProtoReflect.Descriptor instead.
func (*CCIPTelemWrapper) Descriptor() ([]byte, []int) {
	return file_telem_ccip_proto_rawDescGZIP(), []int{3}
}

func (m *CCIPTelemWrapper) GetMsg() isCCIPTelemWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *CCIPTelemWrapper) GetCommitObservation() *CCIPCommitObservation {
	if x, ok := x.GetMsg().(*CCIPTelemWrapper_CommitObservation); ok {
		return x.CommitObservation
	}
	return nil
}

func (x *CCIPTelemWrapper) GetExecutionObservation() *CCIPExecutionObservation {
	if x, ok := x.GetMsg().(*CCIPTelemWrapper_ExecutionObservation); ok {
		return x.ExecutionObservation
	}
	return nil
}

type isCCIPTelemWrapper_Msg interface {
	isCCIPTelemWrapper_Msg()
}

type CCIPTelemWrapper_CommitObservation struct {
	CommitObservation *CCIPCommitObservation `protobuf:"bytes,1,opt,name=commit_observation,json=commitObservation,proto3,oneof"`
}

type CCIPTelemWrapper_ExecutionObservation struct {
	ExecutionObservation *CCIPExecutionObservation `protobuf:"bytes,2,opt,name=execution_observation,json=executionObservation,proto3,oneof"`
}

func (*CCIPTelemWrapper_CommitObservation) isCCIPTelemWrapper_Msg() {}

func (*CCIPTelemWrapper_ExecutionObservation) isCCIPTelemWrapper_Msg() {}

var File_telem_ccip_proto protoreflect.FileDescriptor

var file_telem_ccip_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x43, 0x43,
	0x49, 0x50, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x6e, 0x5f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x43, 0x43, 0x49, 0x50, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x34,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x55, 0x73, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x43, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x43, 0x43, 0x49, 0x50, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x43, 0x49, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x15, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x2e, 0x43, 0x43, 0x49, 0x50, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_telem_ccip_proto_rawDescOnce sync.Once
	file_telem_ccip_proto_rawDescData = file_telem_ccip_proto_rawDesc
)

func file_telem_ccip_proto_rawDescGZIP() []byte {
	file_telem_ccip_proto_rawDescOnce.Do(func() {
		file_telem_ccip_proto_rawDescData = protoimpl.X.CompressGZIP(file_telem_ccip_proto_rawDescData)
	})
	return file_telem_ccip_proto_rawDescData
}

var file_telem_ccip_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_telem_ccip_proto_goTypes = []interface{}{
	(*CCIPExecutionObservation)(nil), // 0: telem.CCIPExecutionObservation
	(*CCIPCommitObservation)(nil),    // 1: telem.CCIPCommitObservation
	(*TokenPrice)(nil),               // 2: telem.TokenPrice
	(*CCIPTelemWrapper)(nil),         // 3: telem.CCIPTelemWrapper
}
var file_telem_ccip_proto_depIdxs = []int32{
	2, // 0: telem.CCIPCommitObservation.token_prices:type_name -> telem.TokenPrice
	1, // 1: telem.CCIPTelemWrapper.commit_observation:type_name -> telem.CCIPCommitObservation
	0, // 2: telem.CCIPTelemWrapper.execution_observation:type_name -> telem.CCIPExecutionObservation
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_telem_ccip_proto_init() }
func file_telem_ccip_proto_init() {
	if File_telem_ccip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telem_ccip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCIPExecutionObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telem_ccip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCIPCommitObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telem_ccip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telem_ccip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCIPTelemWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telem_ccip_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CCIPTelemWrapper_CommitObservation)(nil),
		(*CCIPTelemWrapper_ExecutionObservation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telem_ccip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telem_ccip_proto_goTypes,
		DependencyIndexes: file_telem_ccip_proto_depIdxs,
		MessageInfos:      file_telem_ccip_proto_msgTypes,
	}.Build()
	File_telem_ccip_proto = out.File
	file_telem_ccip_proto_rawDesc = nil
	file_telem_ccip_proto_goTypes = nil
	file_telem_ccip_proto_depIdxs = nil
}
