// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ccip "github.com/smartcontractkit/chainlink/v2/core/services/ccip"

	mock "github.com/stretchr/testify/mock"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

type ORM_Expecter struct {
	mock *mock.Mock
}

func (_m *ORM) EXPECT() *ORM_Expecter {
	return &ORM_Expecter{mock: &_m.Mock}
}

// GetGasPricesByDestChain provides a mock function with given fields: ctx, destChainSelector
func (_m *ORM) GetGasPricesByDestChain(ctx context.Context, destChainSelector uint64) ([]ccip.GasPrice, error) {
	ret := _m.Called(ctx, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetGasPricesByDestChain")
	}

	var r0 []ccip.GasPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]ccip.GasPrice, error)); ok {
		return rf(ctx, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []ccip.GasPrice); ok {
		r0 = rf(ctx, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccip.GasPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, destChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ORM_GetGasPricesByDestChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasPricesByDestChain'
type ORM_GetGasPricesByDestChain_Call struct {
	*mock.Call
}

// GetGasPricesByDestChain is a helper method to define mock.On call
//   - ctx context.Context
//   - destChainSelector uint64
func (_e *ORM_Expecter) GetGasPricesByDestChain(ctx interface{}, destChainSelector interface{}) *ORM_GetGasPricesByDestChain_Call {
	return &ORM_GetGasPricesByDestChain_Call{Call: _e.mock.On("GetGasPricesByDestChain", ctx, destChainSelector)}
}

func (_c *ORM_GetGasPricesByDestChain_Call) Run(run func(ctx context.Context, destChainSelector uint64)) *ORM_GetGasPricesByDestChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ORM_GetGasPricesByDestChain_Call) Return(_a0 []ccip.GasPrice, _a1 error) *ORM_GetGasPricesByDestChain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ORM_GetGasPricesByDestChain_Call) RunAndReturn(run func(context.Context, uint64) ([]ccip.GasPrice, error)) *ORM_GetGasPricesByDestChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPricesByDestChain provides a mock function with given fields: ctx, destChainSelector
func (_m *ORM) GetTokenPricesByDestChain(ctx context.Context, destChainSelector uint64) ([]ccip.TokenPrice, error) {
	ret := _m.Called(ctx, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPricesByDestChain")
	}

	var r0 []ccip.TokenPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]ccip.TokenPrice, error)); ok {
		return rf(ctx, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []ccip.TokenPrice); ok {
		r0 = rf(ctx, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccip.TokenPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, destChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ORM_GetTokenPricesByDestChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPricesByDestChain'
type ORM_GetTokenPricesByDestChain_Call struct {
	*mock.Call
}

// GetTokenPricesByDestChain is a helper method to define mock.On call
//   - ctx context.Context
//   - destChainSelector uint64
func (_e *ORM_Expecter) GetTokenPricesByDestChain(ctx interface{}, destChainSelector interface{}) *ORM_GetTokenPricesByDestChain_Call {
	return &ORM_GetTokenPricesByDestChain_Call{Call: _e.mock.On("GetTokenPricesByDestChain", ctx, destChainSelector)}
}

func (_c *ORM_GetTokenPricesByDestChain_Call) Run(run func(ctx context.Context, destChainSelector uint64)) *ORM_GetTokenPricesByDestChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ORM_GetTokenPricesByDestChain_Call) Return(_a0 []ccip.TokenPrice, _a1 error) *ORM_GetTokenPricesByDestChain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ORM_GetTokenPricesByDestChain_Call) RunAndReturn(run func(context.Context, uint64) ([]ccip.TokenPrice, error)) *ORM_GetTokenPricesByDestChain_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGasPricesForDestChain provides a mock function with given fields: ctx, destChainSelector, gasPrices
func (_m *ORM) InsertGasPricesForDestChain(ctx context.Context, destChainSelector uint64, gasPrices []ccip.GasPriceUpdate) error {
	ret := _m.Called(ctx, destChainSelector, gasPrices)

	if len(ret) == 0 {
		panic("no return value specified for InsertGasPricesForDestChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []ccip.GasPriceUpdate) error); ok {
		r0 = rf(ctx, destChainSelector, gasPrices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ORM_InsertGasPricesForDestChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGasPricesForDestChain'
type ORM_InsertGasPricesForDestChain_Call struct {
	*mock.Call
}

// InsertGasPricesForDestChain is a helper method to define mock.On call
//   - ctx context.Context
//   - destChainSelector uint64
//   - gasPrices []ccip.GasPriceUpdate
func (_e *ORM_Expecter) InsertGasPricesForDestChain(ctx interface{}, destChainSelector interface{}, gasPrices interface{}) *ORM_InsertGasPricesForDestChain_Call {
	return &ORM_InsertGasPricesForDestChain_Call{Call: _e.mock.On("InsertGasPricesForDestChain", ctx, destChainSelector, gasPrices)}
}

func (_c *ORM_InsertGasPricesForDestChain_Call) Run(run func(ctx context.Context, destChainSelector uint64, gasPrices []ccip.GasPriceUpdate)) *ORM_InsertGasPricesForDestChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]ccip.GasPriceUpdate))
	})
	return _c
}

func (_c *ORM_InsertGasPricesForDestChain_Call) Return(_a0 error) *ORM_InsertGasPricesForDestChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ORM_InsertGasPricesForDestChain_Call) RunAndReturn(run func(context.Context, uint64, []ccip.GasPriceUpdate) error) *ORM_InsertGasPricesForDestChain_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTokenPricesForDestChain provides a mock function with given fields: ctx, destChainSelector, tokenPrices
func (_m *ORM) InsertTokenPricesForDestChain(ctx context.Context, destChainSelector uint64, tokenPrices []ccip.TokenPriceUpdate) error {
	ret := _m.Called(ctx, destChainSelector, tokenPrices)

	if len(ret) == 0 {
		panic("no return value specified for InsertTokenPricesForDestChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []ccip.TokenPriceUpdate) error); ok {
		r0 = rf(ctx, destChainSelector, tokenPrices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ORM_InsertTokenPricesForDestChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTokenPricesForDestChain'
type ORM_InsertTokenPricesForDestChain_Call struct {
	*mock.Call
}

// InsertTokenPricesForDestChain is a helper method to define mock.On call
//   - ctx context.Context
//   - destChainSelector uint64
//   - tokenPrices []ccip.TokenPriceUpdate
func (_e *ORM_Expecter) InsertTokenPricesForDestChain(ctx interface{}, destChainSelector interface{}, tokenPrices interface{}) *ORM_InsertTokenPricesForDestChain_Call {
	return &ORM_InsertTokenPricesForDestChain_Call{Call: _e.mock.On("InsertTokenPricesForDestChain", ctx, destChainSelector, tokenPrices)}
}

func (_c *ORM_InsertTokenPricesForDestChain_Call) Run(run func(ctx context.Context, destChainSelector uint64, tokenPrices []ccip.TokenPriceUpdate)) *ORM_InsertTokenPricesForDestChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]ccip.TokenPriceUpdate))
	})
	return _c
}

func (_c *ORM_InsertTokenPricesForDestChain_Call) Return(_a0 error) *ORM_InsertTokenPricesForDestChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ORM_InsertTokenPricesForDestChain_Call) RunAndReturn(run func(context.Context, uint64, []ccip.TokenPriceUpdate) error) *ORM_InsertTokenPricesForDestChain_Call {
	_c.Call.Return(run)
	return _c
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
