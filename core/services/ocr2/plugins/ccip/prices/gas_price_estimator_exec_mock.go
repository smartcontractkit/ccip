// Code generated by mockery v2.38.0. DO NOT EDIT.

package prices

import (
	context "context"
	big "math/big"

	internal "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal"
	mock "github.com/stretchr/testify/mock"
)

// MockGasPriceEstimatorExec is an autogenerated mock type for the GasPriceEstimatorExec type
type MockGasPriceEstimatorExec struct {
	mock.Mock
}

// DenoteInUSD provides a mock function with given fields: p, wrappedNativePrice
func (_m *MockGasPriceEstimatorExec) DenoteInUSD(p GasPrice, wrappedNativePrice *big.Int) (GasPrice, error) {
	ret := _m.Called(p, wrappedNativePrice)

	if len(ret) == 0 {
		panic("no return value specified for DenoteInUSD")
	}

	var r0 GasPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(GasPrice, *big.Int) (GasPrice, error)); ok {
		return rf(p, wrappedNativePrice)
	}
	if rf, ok := ret.Get(0).(func(GasPrice, *big.Int) GasPrice); ok {
		r0 = rf(p, wrappedNativePrice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GasPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(GasPrice, *big.Int) error); ok {
		r1 = rf(p, wrappedNativePrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateMsgCostUSD provides a mock function with given fields: p, wrappedNativePrice, msg
func (_m *MockGasPriceEstimatorExec) EstimateMsgCostUSD(p GasPrice, wrappedNativePrice *big.Int, msg internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) (*big.Int, error) {
	ret := _m.Called(p, wrappedNativePrice, msg)

	if len(ret) == 0 {
		panic("no return value specified for EstimateMsgCostUSD")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(GasPrice, *big.Int, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) (*big.Int, error)); ok {
		return rf(p, wrappedNativePrice, msg)
	}
	if rf, ok := ret.Get(0).(func(GasPrice, *big.Int, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) *big.Int); ok {
		r0 = rf(p, wrappedNativePrice, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(GasPrice, *big.Int, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) error); ok {
		r1 = rf(p, wrappedNativePrice, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields: ctx
func (_m *MockGasPriceEstimatorExec) GetGasPrice(ctx context.Context) (GasPrice, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGasPrice")
	}

	var r0 GasPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (GasPrice, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) GasPrice); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GasPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Median provides a mock function with given fields: gasPrices
func (_m *MockGasPriceEstimatorExec) Median(gasPrices []GasPrice) (GasPrice, error) {
	ret := _m.Called(gasPrices)

	if len(ret) == 0 {
		panic("no return value specified for Median")
	}

	var r0 GasPrice
	var r1 error
	if rf, ok := ret.Get(0).(func([]GasPrice) (GasPrice, error)); ok {
		return rf(gasPrices)
	}
	if rf, ok := ret.Get(0).(func([]GasPrice) GasPrice); ok {
		r0 = rf(gasPrices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GasPrice)
		}
	}

	if rf, ok := ret.Get(1).(func([]GasPrice) error); ok {
		r1 = rf(gasPrices)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields: p
func (_m *MockGasPriceEstimatorExec) String(p GasPrice) string {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(GasPrice) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockGasPriceEstimatorExec creates a new instance of MockGasPriceEstimatorExec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGasPriceEstimatorExec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGasPriceEstimatorExec {
	mock := &MockGasPriceEstimatorExec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
