// Code generated by mockery v2.28.1. DO NOT EDIT.

package tokendata

import (
	context "context"

	logpoller "github.com/smartcontractkit/chainlink/v2/core/chains/evm/logpoller"
	internal "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal"

	mock "github.com/stretchr/testify/mock"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

// GetSourceLogPollerFilters provides a mock function with given fields:
func (_m *MockReader) GetSourceLogPollerFilters() []logpoller.Filter {
	ret := _m.Called()

	var r0 []logpoller.Filter
	if rf, ok := ret.Get(0).(func() []logpoller.Filter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logpoller.Filter)
		}
	}

	return r0
}

// ReadTokenData provides a mock function with given fields: ctx, msg
func (_m *MockReader) ReadTokenData(ctx context.Context, msg internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) ([]byte, error) {
	ret := _m.Called(ctx, msg)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) ([]byte, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) []byte); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.EVM2EVMOnRampCCIPSendRequestedWithMeta) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReader(t mockConstructorTestingTNewMockReader) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
