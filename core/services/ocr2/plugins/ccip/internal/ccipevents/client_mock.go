// Code generated by mockery v2.28.1. DO NOT EDIT.

package ccipevents

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	evm_2_evm_offramp "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/ccip/generated/evm_2_evm_offramp"
	evm_2_evm_onramp "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/ccip/generated/evm_2_evm_onramp"

	mock "github.com/stretchr/testify/mock"

	price_registry "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/ccip/generated/price_registry"

	time "time"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetExecutionStateChangesBetweenSeqNums provides a mock function with given fields: ctx, offRamp, seqNumMin, seqNumMax, confs
func (_m *MockClient) GetExecutionStateChangesBetweenSeqNums(ctx context.Context, offRamp common.Address, seqNumMin uint64, seqNumMax uint64, confs int) ([]Event[evm_2_evm_offramp.EVM2EVMOffRampExecutionStateChanged], error) {
	ret := _m.Called(ctx, offRamp, seqNumMin, seqNumMax, confs)

	var r0 []Event[evm_2_evm_offramp.EVM2EVMOffRampExecutionStateChanged]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, uint64, int) ([]Event[evm_2_evm_offramp.EVM2EVMOffRampExecutionStateChanged], error)); ok {
		return rf(ctx, offRamp, seqNumMin, seqNumMax, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, uint64, int) []Event[evm_2_evm_offramp.EVM2EVMOffRampExecutionStateChanged]); ok {
		r0 = rf(ctx, offRamp, seqNumMin, seqNumMax, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[evm_2_evm_offramp.EVM2EVMOffRampExecutionStateChanged])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, uint64, uint64, int) error); ok {
		r1 = rf(ctx, offRamp, seqNumMin, seqNumMax, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPriceUpdatesCreatedAfter provides a mock function with given fields: ctx, priceRegistry, chainSelector, ts, confs
func (_m *MockClient) GetGasPriceUpdatesCreatedAfter(ctx context.Context, priceRegistry common.Address, chainSelector uint64, ts time.Time, confs int) ([]Event[price_registry.PriceRegistryUsdPerUnitGasUpdated], error) {
	ret := _m.Called(ctx, priceRegistry, chainSelector, ts, confs)

	var r0 []Event[price_registry.PriceRegistryUsdPerUnitGasUpdated]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, time.Time, int) ([]Event[price_registry.PriceRegistryUsdPerUnitGasUpdated], error)); ok {
		return rf(ctx, priceRegistry, chainSelector, ts, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, time.Time, int) []Event[price_registry.PriceRegistryUsdPerUnitGasUpdated]); ok {
		r0 = rf(ctx, priceRegistry, chainSelector, ts, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[price_registry.PriceRegistryUsdPerUnitGasUpdated])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, uint64, time.Time, int) error); ok {
		r1 = rf(ctx, priceRegistry, chainSelector, ts, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastUSDCMessagePriorToLogIndexInTx provides a mock function with given fields: ctx, logIndex, txHash
func (_m *MockClient) GetLastUSDCMessagePriorToLogIndexInTx(ctx context.Context, logIndex int64, txHash common.Hash) ([]byte, error) {
	ret := _m.Called(ctx, logIndex, txHash)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Hash) ([]byte, error)); ok {
		return rf(ctx, logIndex, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Hash) []byte); ok {
		r0 = rf(ctx, logIndex, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, common.Hash) error); ok {
		r1 = rf(ctx, logIndex, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendRequestsBetweenSeqNums provides a mock function with given fields: ctx, onRamp, seqNumMin, seqNumMax, confs
func (_m *MockClient) GetSendRequestsBetweenSeqNums(ctx context.Context, onRamp common.Address, seqNumMin uint64, seqNumMax uint64, confs int) ([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested], error) {
	ret := _m.Called(ctx, onRamp, seqNumMin, seqNumMax, confs)

	var r0 []Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, uint64, int) ([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested], error)); ok {
		return rf(ctx, onRamp, seqNumMin, seqNumMax, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, uint64, int) []Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested]); ok {
		r0 = rf(ctx, onRamp, seqNumMin, seqNumMax, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, uint64, uint64, int) error); ok {
		r1 = rf(ctx, onRamp, seqNumMin, seqNumMax, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendRequestsGteSeqNum provides a mock function with given fields: ctx, onRamp, seqNum, checkFinalityTags, confs
func (_m *MockClient) GetSendRequestsGteSeqNum(ctx context.Context, onRamp common.Address, seqNum uint64, checkFinalityTags bool, confs int) ([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested], error) {
	ret := _m.Called(ctx, onRamp, seqNum, checkFinalityTags, confs)

	var r0 []Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, bool, int) ([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested], error)); ok {
		return rf(ctx, onRamp, seqNum, checkFinalityTags, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint64, bool, int) []Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested]); ok {
		r0 = rf(ctx, onRamp, seqNum, checkFinalityTags, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[evm_2_evm_onramp.EVM2EVMOnRampCCIPSendRequested])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, uint64, bool, int) error); ok {
		r1 = rf(ctx, onRamp, seqNum, checkFinalityTags, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenPriceUpdatesCreatedAfter provides a mock function with given fields: ctx, priceRegistry, ts, confs
func (_m *MockClient) GetTokenPriceUpdatesCreatedAfter(ctx context.Context, priceRegistry common.Address, ts time.Time, confs int) ([]Event[price_registry.PriceRegistryUsdPerTokenUpdated], error) {
	ret := _m.Called(ctx, priceRegistry, ts, confs)

	var r0 []Event[price_registry.PriceRegistryUsdPerTokenUpdated]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, time.Time, int) ([]Event[price_registry.PriceRegistryUsdPerTokenUpdated], error)); ok {
		return rf(ctx, priceRegistry, ts, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, time.Time, int) []Event[price_registry.PriceRegistryUsdPerTokenUpdated]); ok {
		r0 = rf(ctx, priceRegistry, ts, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[price_registry.PriceRegistryUsdPerTokenUpdated])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, time.Time, int) error); ok {
		r1 = rf(ctx, priceRegistry, ts, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestBlock provides a mock function with given fields: ctx
func (_m *MockClient) LatestBlock(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
