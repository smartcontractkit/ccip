// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ccip "github.com/smartcontractkit/chainlink-common/pkg/types/ccip"
	ccipdata "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal/ccipdata"

	context "context"

	mock "github.com/stretchr/testify/mock"

	prices "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/prices"
)

// PriceService is an autogenerated mock type for the PriceService type
type PriceService struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PriceService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGasAndTokenPrices provides a mock function with given fields: ctx, destChainSelector
func (_m *PriceService) GetGasAndTokenPrices(ctx context.Context, destChainSelector uint64) (map[uint64]*big.Int, map[ccip.Address]*big.Int, error) {
	ret := _m.Called(ctx, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetGasAndTokenPrices")
	}

	var r0 map[uint64]*big.Int
	var r1 map[ccip.Address]*big.Int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (map[uint64]*big.Int, map[ccip.Address]*big.Int, error)); ok {
		return rf(ctx, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) map[uint64]*big.Int); ok {
		r0 = rf(ctx, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) map[ccip.Address]*big.Int); ok {
		r1 = rf(ctx, destChainSelector)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[ccip.Address]*big.Int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, destChainSelector)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Start provides a mock function with given fields: _a0
func (_m *PriceService) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDynamicConfig provides a mock function with given fields: ctx, gasPriceEstimator, destPriceRegistryReader
func (_m *PriceService) UpdateDynamicConfig(ctx context.Context, gasPriceEstimator prices.GasPriceEstimatorCommit, destPriceRegistryReader ccipdata.PriceRegistryReader) error {
	ret := _m.Called(ctx, gasPriceEstimator, destPriceRegistryReader)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDynamicConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, prices.GasPriceEstimatorCommit, ccipdata.PriceRegistryReader) error); ok {
		r0 = rf(ctx, gasPriceEstimator, destPriceRegistryReader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPriceService creates a new instance of PriceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceService {
	mock := &PriceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
