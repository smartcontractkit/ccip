// Code generated by mockery v2.28.1. DO NOT EDIT.

package rpclib

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEvmBatchCaller is an autogenerated mock type for the EvmBatchCaller type
type MockEvmBatchCaller struct {
	mock.Mock
}

// BatchCall provides a mock function with given fields: ctx, blockNumber, calls
func (_m *MockEvmBatchCaller) BatchCall(ctx context.Context, blockNumber uint64, calls []EvmCall) ([]DataAndErr, error) {
	ret := _m.Called(ctx, blockNumber, calls)

	var r0 []DataAndErr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) ([]DataAndErr, error)); ok {
		return rf(ctx, blockNumber, calls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) []DataAndErr); ok {
		r0 = rf(ctx, blockNumber, calls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DataAndErr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []EvmCall) error); ok {
		r1 = rf(ctx, blockNumber, calls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCallDynamicLimitRetries provides a mock function with given fields: ctx, blockNumber, calls
func (_m *MockEvmBatchCaller) BatchCallDynamicLimitRetries(ctx context.Context, blockNumber uint64, calls []EvmCall) ([]DataAndErr, error) {
	ret := _m.Called(ctx, blockNumber, calls)

	var r0 []DataAndErr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) ([]DataAndErr, error)); ok {
		return rf(ctx, blockNumber, calls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) []DataAndErr); ok {
		r0 = rf(ctx, blockNumber, calls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DataAndErr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []EvmCall) error); ok {
		r1 = rf(ctx, blockNumber, calls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCallLimit provides a mock function with given fields: ctx, blockNumber, calls
func (_m *MockEvmBatchCaller) BatchCallLimit(ctx context.Context, blockNumber uint64, calls []EvmCall) ([]DataAndErr, error) {
	ret := _m.Called(ctx, blockNumber, calls)

	var r0 []DataAndErr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) ([]DataAndErr, error)); ok {
		return rf(ctx, blockNumber, calls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []EvmCall) []DataAndErr); ok {
		r0 = rf(ctx, blockNumber, calls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DataAndErr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []EvmCall) error); ok {
		r1 = rf(ctx, blockNumber, calls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockEvmBatchCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEvmBatchCaller creates a new instance of MockEvmBatchCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEvmBatchCaller(t mockConstructorTestingTNewMockEvmBatchCaller) *MockEvmBatchCaller {
	mock := &MockEvmBatchCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
