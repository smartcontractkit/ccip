// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FeeEstimatorConfigReader is an autogenerated mock type for the FeeEstimatorConfigReader type
type FeeEstimatorConfigReader struct {
	mock.Mock
}

type FeeEstimatorConfigReader_Expecter struct {
	mock *mock.Mock
}

func (_m *FeeEstimatorConfigReader) EXPECT() *FeeEstimatorConfigReader_Expecter {
	return &FeeEstimatorConfigReader_Expecter{mock: &_m.Mock}
}

// GetDataAvailabilityConfig provides a mock function with given fields: ctx
func (_m *FeeEstimatorConfigReader) GetDataAvailabilityConfig(ctx context.Context) (int64, int64, int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDataAvailabilityConfig")
	}

	var r0 int64
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, int64, int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int64); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context) int64); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataAvailabilityConfig'
type FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call struct {
	*mock.Call
}

// GetDataAvailabilityConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FeeEstimatorConfigReader_Expecter) GetDataAvailabilityConfig(ctx interface{}) *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call {
	return &FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call{Call: _e.mock.On("GetDataAvailabilityConfig", ctx)}
}

func (_c *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call) Run(run func(ctx context.Context)) *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call) Return(destDAOverheadGas int64, destGasPerDAByte int64, destDAMultiplierBps int64, err error) *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call {
	_c.Call.Return(destDAOverheadGas, destGasPerDAByte, destDAMultiplierBps, err)
	return _c
}

func (_c *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call) RunAndReturn(run func(context.Context) (int64, int64, int64, error)) *FeeEstimatorConfigReader_GetDataAvailabilityConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyDAGasPrice provides a mock function with given fields: gasPrice
func (_m *FeeEstimatorConfigReader) ModifyDAGasPrice(gasPrice *big.Int) *big.Int {
	ret := _m.Called(gasPrice)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDAGasPrice")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(gasPrice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// FeeEstimatorConfigReader_ModifyDAGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyDAGasPrice'
type FeeEstimatorConfigReader_ModifyDAGasPrice_Call struct {
	*mock.Call
}

// ModifyDAGasPrice is a helper method to define mock.On call
//   - gasPrice *big.Int
func (_e *FeeEstimatorConfigReader_Expecter) ModifyDAGasPrice(gasPrice interface{}) *FeeEstimatorConfigReader_ModifyDAGasPrice_Call {
	return &FeeEstimatorConfigReader_ModifyDAGasPrice_Call{Call: _e.mock.On("ModifyDAGasPrice", gasPrice)}
}

func (_c *FeeEstimatorConfigReader_ModifyDAGasPrice_Call) Run(run func(gasPrice *big.Int)) *FeeEstimatorConfigReader_ModifyDAGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *FeeEstimatorConfigReader_ModifyDAGasPrice_Call) Return(_a0 *big.Int) *FeeEstimatorConfigReader_ModifyDAGasPrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeeEstimatorConfigReader_ModifyDAGasPrice_Call) RunAndReturn(run func(*big.Int) *big.Int) *FeeEstimatorConfigReader_ModifyDAGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeeEstimatorConfigReader creates a new instance of FeeEstimatorConfigReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeEstimatorConfigReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeEstimatorConfigReader {
	mock := &FeeEstimatorConfigReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
