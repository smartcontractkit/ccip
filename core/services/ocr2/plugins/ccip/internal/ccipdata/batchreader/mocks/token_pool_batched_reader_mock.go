// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	ccipdata "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal/ccipdata"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenPoolBatchedReader is an autogenerated mock type for the TokenPoolBatchedReader type
type TokenPoolBatchedReader struct {
	mock.Mock
}

// GetInboundTokenPoolRateLimits provides a mock function with given fields: ctx, tokenPoolReaders
func (_m *TokenPoolBatchedReader) GetInboundTokenPoolRateLimits(ctx context.Context, tokenPoolReaders []common.Address) ([]ccipdata.TokenBucketRateLimit, error) {
	ret := _m.Called(ctx, tokenPoolReaders)

	if len(ret) == 0 {
		panic("no return value specified for GetInboundTokenPoolRateLimits")
	}

	var r0 []ccipdata.TokenBucketRateLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) ([]ccipdata.TokenBucketRateLimit, error)); ok {
		return rf(ctx, tokenPoolReaders)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) []ccipdata.TokenBucketRateLimit); ok {
		r0 = rf(ctx, tokenPoolReaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccipdata.TokenBucketRateLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Address) error); ok {
		r1 = rf(ctx, tokenPoolReaders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenPoolBatchedReader creates a new instance of TokenPoolBatchedReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenPoolBatchedReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenPoolBatchedReader {
	mock := &TokenPoolBatchedReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
