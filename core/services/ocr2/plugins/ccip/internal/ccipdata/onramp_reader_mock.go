// Code generated by mockery v2.28.1. DO NOT EDIT.

package ccipdata

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	internal "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/v2/core/services/pg"
)

// MockOnRampReader is an autogenerated mock type for the OnRampReader type
type MockOnRampReader struct {
	mock.Mock
}

// Close provides a mock function with given fields: opt
func (_m *MockOnRampReader) Close(opt ...pg.QOpt) error {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...pg.QOpt) error); ok {
		r0 = rf(opt...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSendRequestsBetweenSeqNums provides a mock function with given fields: ctx, seqNumMin, seqNumMax, confs
func (_m *MockOnRampReader) GetSendRequestsBetweenSeqNums(ctx context.Context, seqNumMin uint64, seqNumMax uint64, confs int) ([]Event[internal.EVM2EVMMessage], error) {
	ret := _m.Called(ctx, seqNumMin, seqNumMax, confs)

	var r0 []Event[internal.EVM2EVMMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, int) ([]Event[internal.EVM2EVMMessage], error)); ok {
		return rf(ctx, seqNumMin, seqNumMax, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, int) []Event[internal.EVM2EVMMessage]); ok {
		r0 = rf(ctx, seqNumMin, seqNumMax, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[internal.EVM2EVMMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, int) error); ok {
		r1 = rf(ctx, seqNumMin, seqNumMax, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendRequestsGteSeqNum provides a mock function with given fields: ctx, seqNum, confs
func (_m *MockOnRampReader) GetSendRequestsGteSeqNum(ctx context.Context, seqNum uint64, confs int) ([]Event[internal.EVM2EVMMessage], error) {
	ret := _m.Called(ctx, seqNum, confs)

	var r0 []Event[internal.EVM2EVMMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int) ([]Event[internal.EVM2EVMMessage], error)); ok {
		return rf(ctx, seqNum, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int) []Event[internal.EVM2EVMMessage]); ok {
		r0 = rf(ctx, seqNum, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[internal.EVM2EVMMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int) error); ok {
		r1 = rf(ctx, seqNum, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RouterAddress provides a mock function with given fields:
func (_m *MockOnRampReader) RouterAddress() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockOnRampReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOnRampReader creates a new instance of MockOnRampReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOnRampReader(t mockConstructorTestingTNewMockOnRampReader) *MockOnRampReader {
	mock := &MockOnRampReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
