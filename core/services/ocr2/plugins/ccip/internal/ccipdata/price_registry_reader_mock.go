// Code generated by mockery v2.28.1. DO NOT EDIT.

package ccipdata

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/v2/core/services/pg"

	time "time"
)

// MockPriceRegistryReader is an autogenerated mock type for the PriceRegistryReader type
type MockPriceRegistryReader struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *MockPriceRegistryReader) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Close provides a mock function with given fields: qopts
func (_m *MockPriceRegistryReader) Close(qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...pg.QOpt) error); ok {
		r0 = rf(qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeeTokenEvents provides a mock function with given fields:
func (_m *MockPriceRegistryReader) FeeTokenEvents() []common.Hash {
	ret := _m.Called()

	var r0 []common.Hash
	if rf, ok := ret.Get(0).(func() []common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Hash)
		}
	}

	return r0
}

// GetFeeTokens provides a mock function with given fields: ctx
func (_m *MockPriceRegistryReader) GetFeeTokens(ctx context.Context) ([]common.Address, error) {
	ret := _m.Called(ctx)

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPriceUpdatesCreatedAfter provides a mock function with given fields: ctx, chainSelector, ts, confs
func (_m *MockPriceRegistryReader) GetGasPriceUpdatesCreatedAfter(ctx context.Context, chainSelector uint64, ts time.Time, confs int) ([]Event[GasPriceUpdate], error) {
	ret := _m.Called(ctx, chainSelector, ts, confs)

	var r0 []Event[GasPriceUpdate]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time, int) ([]Event[GasPriceUpdate], error)); ok {
		return rf(ctx, chainSelector, ts, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time, int) []Event[GasPriceUpdate]); ok {
		r0 = rf(ctx, chainSelector, ts, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[GasPriceUpdate])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, time.Time, int) error); ok {
		r1 = rf(ctx, chainSelector, ts, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenPriceUpdatesCreatedAfter provides a mock function with given fields: ctx, ts, confs
func (_m *MockPriceRegistryReader) GetTokenPriceUpdatesCreatedAfter(ctx context.Context, ts time.Time, confs int) ([]Event[TokenPriceUpdate], error) {
	ret := _m.Called(ctx, ts, confs)

	var r0 []Event[TokenPriceUpdate]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, int) ([]Event[TokenPriceUpdate], error)); ok {
		return rf(ctx, ts, confs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, int) []Event[TokenPriceUpdate]); ok {
		r0 = rf(ctx, ts, confs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event[TokenPriceUpdate])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, int) error); ok {
		r1 = rf(ctx, ts, confs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenPrices provides a mock function with given fields: ctx, wantedTokens
func (_m *MockPriceRegistryReader) GetTokenPrices(ctx context.Context, wantedTokens []common.Address) ([]TokenPriceUpdate, error) {
	ret := _m.Called(ctx, wantedTokens)

	var r0 []TokenPriceUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) ([]TokenPriceUpdate, error)); ok {
		return rf(ctx, wantedTokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) []TokenPriceUpdate); ok {
		r0 = rf(ctx, wantedTokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TokenPriceUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Address) error); ok {
		r1 = rf(ctx, wantedTokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPriceRegistryReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPriceRegistryReader creates a new instance of MockPriceRegistryReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPriceRegistryReader(t mockConstructorTestingTNewMockPriceRegistryReader) *MockPriceRegistryReader {
	mock := &MockPriceRegistryReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
