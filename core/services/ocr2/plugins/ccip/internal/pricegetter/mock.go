// Code generated by mockery v2.38.0. DO NOT EDIT.

package pricegetter

import (
	context "context"
	big "math/big"

	ccip "github.com/smartcontractkit/chainlink-common/pkg/types/ccip"

	mock "github.com/stretchr/testify/mock"
)

// MockPriceGetter is an autogenerated mock type for the PriceGetter type
type MockPriceGetter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockPriceGetter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterConfiguredTokens provides a mock function with given fields: ctx, tokens
func (_m *MockPriceGetter) FilterConfiguredTokens(ctx context.Context, tokens []ccip.Address) ([]ccip.Address, []ccip.Address, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for FilterConfiguredTokens")
	}

	var r0 []ccip.Address
	var r1 []ccip.Address
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []ccip.Address) ([]ccip.Address, []ccip.Address, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ccip.Address) []ccip.Address); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccip.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ccip.Address) []ccip.Address); ok {
		r1 = rf(ctx, tokens)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]ccip.Address)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []ccip.Address) error); ok {
		r2 = rf(ctx, tokens)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenPricesUSD provides a mock function with given fields: ctx, tokens
func (_m *MockPriceGetter) TokenPricesUSD(ctx context.Context, tokens []ccip.Address) (map[ccip.Address]*big.Int, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for TokenPricesUSD")
	}

	var r0 map[ccip.Address]*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ccip.Address) (map[ccip.Address]*big.Int, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ccip.Address) map[ccip.Address]*big.Int); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccip.Address]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ccip.Address) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPriceGetter creates a new instance of MockPriceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPriceGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPriceGetter {
	mock := &MockPriceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
