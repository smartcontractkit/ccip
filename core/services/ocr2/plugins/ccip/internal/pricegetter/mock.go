// Code generated by mockery v2.28.1. DO NOT EDIT.

package pricegetter

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// MockPriceGetter is an autogenerated mock type for the PriceGetter type
type MockPriceGetter struct {
	mock.Mock
}

// TokenPricesUSD provides a mock function with given fields: ctx, tokens
func (_m *MockPriceGetter) TokenPricesUSD(ctx context.Context, tokens []common.Address) (map[common.Address]*big.Int, error) {
	ret := _m.Called(ctx, tokens)

	var r0 map[common.Address]*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) (map[common.Address]*big.Int, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Address) map[common.Address]*big.Int); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Address]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Address) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPriceGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPriceGetter creates a new instance of MockPriceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPriceGetter(t mockConstructorTestingTNewMockPriceGetter) *MockPriceGetter {
	mock := &MockPriceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
