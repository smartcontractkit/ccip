// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	graph "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/liquiditymanager/graph"
	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/liquiditymanager/models"

	rebalalgo "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/liquiditymanager/rebalalgo"
)

// RebalancingAlgo is an autogenerated mock type for the RebalancingAlgo type
type RebalancingAlgo struct {
	mock.Mock
}

// ComputeTransfersToBalance provides a mock function with given fields: g, unexecuted
func (_m *RebalancingAlgo) ComputeTransfersToBalance(g graph.Graph, unexecuted []rebalalgo.UnexecutedTransfer) ([]models.ProposedTransfer, error) {
	ret := _m.Called(g, unexecuted)

	var r0 []models.ProposedTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(graph.Graph, []rebalalgo.UnexecutedTransfer) ([]models.ProposedTransfer, error)); ok {
		return rf(g, unexecuted)
	}
	if rf, ok := ret.Get(0).(func(graph.Graph, []rebalalgo.UnexecutedTransfer) []models.ProposedTransfer); ok {
		r0 = rf(g, unexecuted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProposedTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(graph.Graph, []rebalalgo.UnexecutedTransfer) error); ok {
		r1 = rf(g, unexecuted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRebalancingAlgo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRebalancingAlgo creates a new instance of RebalancingAlgo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRebalancingAlgo(t mockConstructorTestingTNewRebalancingAlgo) *RebalancingAlgo {
	mock := &RebalancingAlgo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
