// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	liquiditygraph "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/liquiditygraph"
	liquiditymanager "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/liquiditymanager"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/models"

	time "time"

	types "github.com/smartcontractkit/libocr/offchainreporting2plus/types"
)

// Rebalancer is an autogenerated mock type for the Rebalancer type
type Rebalancer struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Rebalancer) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigDigest provides a mock function with given fields: ctx
func (_m *Rebalancer) ConfigDigest(ctx context.Context) (types.ConfigDigest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConfigDigest")
	}

	var r0 types.ConfigDigest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.ConfigDigest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.ConfigDigest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ConfigDigest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Discover provides a mock function with given fields: ctx, lmFactory
func (_m *Rebalancer) Discover(ctx context.Context, lmFactory liquiditymanager.Factory) (*liquiditymanager.Registry, liquiditygraph.LiquidityGraph, error) {
	ret := _m.Called(ctx, lmFactory)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 *liquiditymanager.Registry
	var r1 liquiditygraph.LiquidityGraph
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, liquiditymanager.Factory) (*liquiditymanager.Registry, liquiditygraph.LiquidityGraph, error)); ok {
		return rf(ctx, lmFactory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, liquiditymanager.Factory) *liquiditymanager.Registry); ok {
		r0 = rf(ctx, lmFactory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquiditymanager.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, liquiditymanager.Factory) liquiditygraph.LiquidityGraph); ok {
		r1 = rf(ctx, lmFactory)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(liquiditygraph.LiquidityGraph)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, liquiditymanager.Factory) error); ok {
		r2 = rf(ctx, lmFactory)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBalance provides a mock function with given fields: ctx
func (_m *Rebalancer) GetBalance(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingTransfers provides a mock function with given fields: ctx, since
func (_m *Rebalancer) GetPendingTransfers(ctx context.Context, since time.Time) ([]models.PendingTransfer, error) {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingTransfers")
	}

	var r0 []models.PendingTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]models.PendingTransfer, error)); ok {
		return rf(ctx, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.PendingTransfer); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PendingTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRebalancers provides a mock function with given fields: ctx
func (_m *Rebalancer) GetRebalancers(ctx context.Context) (map[models.NetworkSelector]models.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRebalancers")
	}

	var r0 map[models.NetworkSelector]models.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[models.NetworkSelector]models.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[models.NetworkSelector]models.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[models.NetworkSelector]models.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRebalancer creates a new instance of Rebalancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRebalancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rebalancer {
	mock := &Rebalancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
