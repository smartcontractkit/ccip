// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/smartcontractkit/chainlink/v2/core/services/ccipcapability/types"
	mock "github.com/stretchr/testify/mock"
)

// HomeChainReader is an autogenerated mock type for the HomeChainReader type
type HomeChainReader struct {
	mock.Mock
}

// GetAllChainConfigs provides a mock function with given fields: ctx
func (_m *HomeChainReader) GetAllChainConfigs(ctx context.Context) (map[uint64]types.ChainConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChainConfigs")
	}

	var r0 map[uint64]types.ChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[uint64]types.ChainConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[uint64]types.ChainConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]types.ChainConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOCRConfigs provides a mock function with given fields: ctx, donID, pluginType
func (_m *HomeChainReader) GetOCRConfigs(ctx context.Context, donID uint32, pluginType types.PluginType) ([]types.OCRConfig, error) {
	ret := _m.Called(ctx, donID, pluginType)

	if len(ret) == 0 {
		panic("no return value specified for GetOCRConfigs")
	}

	var r0 []types.OCRConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, types.PluginType) ([]types.OCRConfig, error)); ok {
		return rf(ctx, donID, pluginType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, types.PluginType) []types.OCRConfig); ok {
		r0 = rf(ctx, donID, pluginType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OCRConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, types.PluginType) error); ok {
		r1 = rf(ctx, donID, pluginType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHealthy provides a mock function with given fields:
func (_m *HomeChainReader) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewHomeChainReader creates a new instance of HomeChainReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHomeChainReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *HomeChainReader {
	mock := &HomeChainReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
