// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/core/services/ccipcapability/types"
)

// OCRConfig is an autogenerated mock type for the OCRConfig type
type OCRConfig struct {
	mock.Mock
}

// ChainSelector provides a mock function with given fields:
func (_m *OCRConfig) ChainSelector() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainSelector")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// F provides a mock function with given fields:
func (_m *OCRConfig) F() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for F")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// OffchainConfig provides a mock function with given fields:
func (_m *OCRConfig) OffchainConfig() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OffchainConfig")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// OffchainConfigVersion provides a mock function with given fields:
func (_m *OCRConfig) OffchainConfigVersion() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OffchainConfigVersion")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// OfframpAddress provides a mock function with given fields:
func (_m *OCRConfig) OfframpAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OfframpAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PluginType provides a mock function with given fields:
func (_m *OCRConfig) PluginType() types.PluginType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginType")
	}

	var r0 types.PluginType
	if rf, ok := ret.Get(0).(func() types.PluginType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.PluginType)
	}

	return r0
}

// Signers provides a mock function with given fields:
func (_m *OCRConfig) Signers() [][2][32]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signers")
	}

	var r0 [][2][32]byte
	if rf, ok := ret.Get(0).(func() [][2][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2][32]byte)
		}
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *OCRConfig) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Transmitters provides a mock function with given fields:
func (_m *OCRConfig) Transmitters() [][2][32]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transmitters")
	}

	var r0 [][2][32]byte
	if rf, ok := ret.Get(0).(func() [][2][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2][32]byte)
		}
	}

	return r0
}

// NewOCRConfig creates a new instance of OCRConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOCRConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *OCRConfig {
	mock := &OCRConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
