// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/core/services/ccipcapability/types"
)

// OracleCreator is an autogenerated mock type for the OracleCreator type
type OracleCreator struct {
	mock.Mock
}

// CreateCommitOracle provides a mock function with given fields: config
func (_m *OracleCreator) CreateCommitOracle(config types.OCRConfig) (types.CCIPOracle, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommitOracle")
	}

	var r0 types.CCIPOracle
	var r1 error
	if rf, ok := ret.Get(0).(func(types.OCRConfig) (types.CCIPOracle, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(types.OCRConfig) types.CCIPOracle); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CCIPOracle)
		}
	}

	if rf, ok := ret.Get(1).(func(types.OCRConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExecOracle provides a mock function with given fields: config
func (_m *OracleCreator) CreateExecOracle(config types.OCRConfig) (types.CCIPOracle, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateExecOracle")
	}

	var r0 types.CCIPOracle
	var r1 error
	if rf, ok := ret.Get(0).(func(types.OCRConfig) (types.CCIPOracle, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(types.OCRConfig) types.CCIPOracle); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CCIPOracle)
		}
	}

	if rf, ok := ret.Get(1).(func(types.OCRConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOracleCreator creates a new instance of OracleCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleCreator {
	mock := &OracleCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
