// Code generated by mockery v2.28.1. DO NOT EDIT.

package mock_contracts

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	generated "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"

	link_token_interface "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/ccip/generated/link_token_interface"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// LinkTokenInterface is an autogenerated mock type for the LinkTokenInterface type
type LinkTokenInterface struct {
	mock.Mock
}

// AcceptOwnership provides a mock function with given fields: opts
func (_m *LinkTokenInterface) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Address provides a mock function with given fields:
func (_m *LinkTokenInterface) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Allowance provides a mock function with given fields: opts, owner, spender
func (_m *LinkTokenInterface) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	ret := _m.Called(opts, owner, spender)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)); ok {
		return rf(opts, owner, spender)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, common.Address) *big.Int); ok {
		r0 = rf(opts, owner, spender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, common.Address) error); ok {
		r1 = rf(opts, owner, spender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Approve provides a mock function with given fields: opts, spender, amount
func (_m *LinkTokenInterface) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, spender, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, spender, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, spender, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, spender, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceOf provides a mock function with given fields: opts, account
func (_m *LinkTokenInterface) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	ret := _m.Called(opts, account)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, account)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Burn provides a mock function with given fields: opts, amount
func (_m *LinkTokenInterface) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Burn0 provides a mock function with given fields: opts, account, amount
func (_m *LinkTokenInterface) Burn0(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, account, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, account, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, account, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, account, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BurnFrom provides a mock function with given fields: opts, account, amount
func (_m *LinkTokenInterface) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, account, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, account, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, account, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, account, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decimals provides a mock function with given fields: opts
func (_m *LinkTokenInterface) Decimals(opts *bind.CallOpts) (uint8, error) {
	ret := _m.Called(opts)

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (uint8, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) uint8); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseAllowance provides a mock function with given fields: opts, spender, subtractedValue
func (_m *LinkTokenInterface) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, spender, subtractedValue)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, spender, subtractedValue)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, spender, subtractedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, spender, subtractedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseApproval provides a mock function with given fields: opts, spender, subtractedValue
func (_m *LinkTokenInterface) DecreaseApproval(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, spender, subtractedValue)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, spender, subtractedValue)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, spender, subtractedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, spender, subtractedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterApproval provides a mock function with given fields: opts, owner, spender
func (_m *LinkTokenInterface) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*link_token_interface.LinkTokenApprovalIterator, error) {
	ret := _m.Called(opts, owner, spender)

	var r0 *link_token_interface.LinkTokenApprovalIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*link_token_interface.LinkTokenApprovalIterator, error)); ok {
		return rf(opts, owner, spender)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *link_token_interface.LinkTokenApprovalIterator); ok {
		r0 = rf(opts, owner, spender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenApprovalIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, owner, spender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterBurnAccessGranted provides a mock function with given fields: opts, burner
func (_m *LinkTokenInterface) FilterBurnAccessGranted(opts *bind.FilterOpts, burner []common.Address) (*link_token_interface.LinkTokenBurnAccessGrantedIterator, error) {
	ret := _m.Called(opts, burner)

	var r0 *link_token_interface.LinkTokenBurnAccessGrantedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*link_token_interface.LinkTokenBurnAccessGrantedIterator, error)); ok {
		return rf(opts, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *link_token_interface.LinkTokenBurnAccessGrantedIterator); ok {
		r0 = rf(opts, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenBurnAccessGrantedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterBurnAccessRevoked provides a mock function with given fields: opts, burner
func (_m *LinkTokenInterface) FilterBurnAccessRevoked(opts *bind.FilterOpts, burner []common.Address) (*link_token_interface.LinkTokenBurnAccessRevokedIterator, error) {
	ret := _m.Called(opts, burner)

	var r0 *link_token_interface.LinkTokenBurnAccessRevokedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*link_token_interface.LinkTokenBurnAccessRevokedIterator, error)); ok {
		return rf(opts, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *link_token_interface.LinkTokenBurnAccessRevokedIterator); ok {
		r0 = rf(opts, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenBurnAccessRevokedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterMintAccessGranted provides a mock function with given fields: opts, minter
func (_m *LinkTokenInterface) FilterMintAccessGranted(opts *bind.FilterOpts, minter []common.Address) (*link_token_interface.LinkTokenMintAccessGrantedIterator, error) {
	ret := _m.Called(opts, minter)

	var r0 *link_token_interface.LinkTokenMintAccessGrantedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*link_token_interface.LinkTokenMintAccessGrantedIterator, error)); ok {
		return rf(opts, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *link_token_interface.LinkTokenMintAccessGrantedIterator); ok {
		r0 = rf(opts, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenMintAccessGrantedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterMintAccessRevoked provides a mock function with given fields: opts, minter
func (_m *LinkTokenInterface) FilterMintAccessRevoked(opts *bind.FilterOpts, minter []common.Address) (*link_token_interface.LinkTokenMintAccessRevokedIterator, error) {
	ret := _m.Called(opts, minter)

	var r0 *link_token_interface.LinkTokenMintAccessRevokedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*link_token_interface.LinkTokenMintAccessRevokedIterator, error)); ok {
		return rf(opts, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *link_token_interface.LinkTokenMintAccessRevokedIterator); ok {
		r0 = rf(opts, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenMintAccessRevokedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterOwnershipTransferRequested provides a mock function with given fields: opts, from, to
func (_m *LinkTokenInterface) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*link_token_interface.LinkTokenOwnershipTransferRequestedIterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *link_token_interface.LinkTokenOwnershipTransferRequestedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*link_token_interface.LinkTokenOwnershipTransferRequestedIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *link_token_interface.LinkTokenOwnershipTransferRequestedIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenOwnershipTransferRequestedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterOwnershipTransferred provides a mock function with given fields: opts, from, to
func (_m *LinkTokenInterface) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*link_token_interface.LinkTokenOwnershipTransferredIterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *link_token_interface.LinkTokenOwnershipTransferredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*link_token_interface.LinkTokenOwnershipTransferredIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *link_token_interface.LinkTokenOwnershipTransferredIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenOwnershipTransferredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterTransfer provides a mock function with given fields: opts, from, to
func (_m *LinkTokenInterface) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*link_token_interface.LinkTokenTransferIterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *link_token_interface.LinkTokenTransferIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*link_token_interface.LinkTokenTransferIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *link_token_interface.LinkTokenTransferIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenTransferIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterTransfer0 provides a mock function with given fields: opts, from, to
func (_m *LinkTokenInterface) FilterTransfer0(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*link_token_interface.LinkTokenTransfer0Iterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *link_token_interface.LinkTokenTransfer0Iterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*link_token_interface.LinkTokenTransfer0Iterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *link_token_interface.LinkTokenTransfer0Iterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenTransfer0Iterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBurners provides a mock function with given fields: opts
func (_m *LinkTokenInterface) GetBurners(opts *bind.CallOpts) ([]common.Address, error) {
	ret := _m.Called(opts)

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinters provides a mock function with given fields: opts
func (_m *LinkTokenInterface) GetMinters(opts *bind.CallOpts) ([]common.Address, error) {
	ret := _m.Called(opts)

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantBurnRole provides a mock function with given fields: opts, burner
func (_m *LinkTokenInterface) GrantBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, burner)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantMintAndBurnRoles provides a mock function with given fields: opts, burnAndMinter
func (_m *LinkTokenInterface) GrantMintAndBurnRoles(opts *bind.TransactOpts, burnAndMinter common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, burnAndMinter)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, burnAndMinter)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, burnAndMinter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, burnAndMinter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantMintRole provides a mock function with given fields: opts, minter
func (_m *LinkTokenInterface) GrantMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, minter)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseAllowance provides a mock function with given fields: opts, spender, addedValue
func (_m *LinkTokenInterface) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, spender, addedValue)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, spender, addedValue)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, spender, addedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, spender, addedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseApproval provides a mock function with given fields: opts, spender, addedValue
func (_m *LinkTokenInterface) IncreaseApproval(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, spender, addedValue)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, spender, addedValue)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, spender, addedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, spender, addedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBurner provides a mock function with given fields: opts, burner
func (_m *LinkTokenInterface) IsBurner(opts *bind.CallOpts, burner common.Address) (bool, error) {
	ret := _m.Called(opts, burner)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, burner)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMinter provides a mock function with given fields: opts, minter
func (_m *LinkTokenInterface) IsMinter(opts *bind.CallOpts, minter common.Address) (bool, error) {
	ret := _m.Called(opts, minter)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, minter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxSupply provides a mock function with given fields: opts
func (_m *LinkTokenInterface) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mint provides a mock function with given fields: opts, account, amount
func (_m *LinkTokenInterface) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, account, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, account, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, account, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, account, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields: opts
func (_m *LinkTokenInterface) Name(opts *bind.CallOpts) (string, error) {
	ret := _m.Called(opts)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Owner provides a mock function with given fields: opts
func (_m *LinkTokenInterface) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseApproval provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseApproval(log types.Log) (*link_token_interface.LinkTokenApproval, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenApproval, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenApproval); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseBurnAccessGranted provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseBurnAccessGranted(log types.Log) (*link_token_interface.LinkTokenBurnAccessGranted, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenBurnAccessGranted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenBurnAccessGranted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenBurnAccessGranted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenBurnAccessGranted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseBurnAccessRevoked provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseBurnAccessRevoked(log types.Log) (*link_token_interface.LinkTokenBurnAccessRevoked, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenBurnAccessRevoked
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenBurnAccessRevoked, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenBurnAccessRevoked); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenBurnAccessRevoked)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseLog provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseLog(log types.Log) (generated.AbigenLog, error) {
	ret := _m.Called(log)

	var r0 generated.AbigenLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (generated.AbigenLog, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) generated.AbigenLog); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.AbigenLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseMintAccessGranted provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseMintAccessGranted(log types.Log) (*link_token_interface.LinkTokenMintAccessGranted, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenMintAccessGranted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenMintAccessGranted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenMintAccessGranted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenMintAccessGranted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseMintAccessRevoked provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseMintAccessRevoked(log types.Log) (*link_token_interface.LinkTokenMintAccessRevoked, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenMintAccessRevoked
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenMintAccessRevoked, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenMintAccessRevoked); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenMintAccessRevoked)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseOwnershipTransferRequested provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseOwnershipTransferRequested(log types.Log) (*link_token_interface.LinkTokenOwnershipTransferRequested, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenOwnershipTransferRequested
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenOwnershipTransferRequested, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenOwnershipTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenOwnershipTransferRequested)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseOwnershipTransferred provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseOwnershipTransferred(log types.Log) (*link_token_interface.LinkTokenOwnershipTransferred, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenOwnershipTransferred
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenOwnershipTransferred, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenOwnershipTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenOwnershipTransferred)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTransfer provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseTransfer(log types.Log) (*link_token_interface.LinkTokenTransfer, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenTransfer, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenTransfer); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTransfer0 provides a mock function with given fields: log
func (_m *LinkTokenInterface) ParseTransfer0(log types.Log) (*link_token_interface.LinkTokenTransfer0, error) {
	ret := _m.Called(log)

	var r0 *link_token_interface.LinkTokenTransfer0
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*link_token_interface.LinkTokenTransfer0, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *link_token_interface.LinkTokenTransfer0); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*link_token_interface.LinkTokenTransfer0)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeBurnRole provides a mock function with given fields: opts, burner
func (_m *LinkTokenInterface) RevokeBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, burner)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeMintRole provides a mock function with given fields: opts, minter
func (_m *LinkTokenInterface) RevokeMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, minter)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportsInterface provides a mock function with given fields: opts, interfaceId
func (_m *LinkTokenInterface) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	ret := _m.Called(opts, interfaceId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [4]byte) (bool, error)); ok {
		return rf(opts, interfaceId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [4]byte) bool); ok {
		r0 = rf(opts, interfaceId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, [4]byte) error); ok {
		r1 = rf(opts, interfaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Symbol provides a mock function with given fields: opts
func (_m *LinkTokenInterface) Symbol(opts *bind.CallOpts) (string, error) {
	ret := _m.Called(opts)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalSupply provides a mock function with given fields: opts
func (_m *LinkTokenInterface) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: opts, to, amount
func (_m *LinkTokenInterface) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, to, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, to, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, to, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int) error); ok {
		r1 = rf(opts, to, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferAndCall provides a mock function with given fields: opts, to, amount, data
func (_m *LinkTokenInterface) TransferAndCall(opts *bind.TransactOpts, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, to, amount, data)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error)); ok {
		return rf(opts, to, amount, data)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, to, amount, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int, []byte) error); ok {
		r1 = rf(opts, to, amount, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferFrom provides a mock function with given fields: opts, from, to, amount
func (_m *LinkTokenInterface) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, from, to, amount)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, from, to, amount)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, from, to, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) error); ok {
		r1 = rf(opts, from, to, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferOwnership provides a mock function with given fields: opts, to
func (_m *LinkTokenInterface) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, to)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchApproval provides a mock function with given fields: opts, sink, owner, spender
func (_m *LinkTokenInterface) WatchApproval(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, owner, spender)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenApproval, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, owner, spender)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenApproval, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, owner, spender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenApproval, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, owner, spender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchBurnAccessGranted provides a mock function with given fields: opts, sink, burner
func (_m *LinkTokenInterface) WatchBurnAccessGranted(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenBurnAccessGranted, burner []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, burner)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessGranted, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessGranted, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessGranted, []common.Address) error); ok {
		r1 = rf(opts, sink, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchBurnAccessRevoked provides a mock function with given fields: opts, sink, burner
func (_m *LinkTokenInterface) WatchBurnAccessRevoked(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenBurnAccessRevoked, burner []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, burner)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessRevoked, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, burner)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessRevoked, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, burner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenBurnAccessRevoked, []common.Address) error); ok {
		r1 = rf(opts, sink, burner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchMintAccessGranted provides a mock function with given fields: opts, sink, minter
func (_m *LinkTokenInterface) WatchMintAccessGranted(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenMintAccessGranted, minter []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, minter)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessGranted, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessGranted, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessGranted, []common.Address) error); ok {
		r1 = rf(opts, sink, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchMintAccessRevoked provides a mock function with given fields: opts, sink, minter
func (_m *LinkTokenInterface) WatchMintAccessRevoked(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenMintAccessRevoked, minter []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, minter)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessRevoked, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, minter)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessRevoked, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, minter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenMintAccessRevoked, []common.Address) error); ok {
		r1 = rf(opts, sink, minter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOwnershipTransferRequested provides a mock function with given fields: opts, sink, from, to
func (_m *LinkTokenInterface) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferRequested, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferRequested, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferRequested, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOwnershipTransferred provides a mock function with given fields: opts, sink, from, to
func (_m *LinkTokenInterface) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferred, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferred, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenOwnershipTransferred, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchTransfer provides a mock function with given fields: opts, sink, from, to
func (_m *LinkTokenInterface) WatchTransfer(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchTransfer0 provides a mock function with given fields: opts, sink, from, to
func (_m *LinkTokenInterface) WatchTransfer0(opts *bind.WatchOpts, sink chan<- *link_token_interface.LinkTokenTransfer0, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer0, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer0, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *link_token_interface.LinkTokenTransfer0, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLinkTokenInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewLinkTokenInterface creates a new instance of LinkTokenInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLinkTokenInterface(t mockConstructorTestingTNewLinkTokenInterface) *LinkTokenInterface {
	mock := &LinkTokenInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
