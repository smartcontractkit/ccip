// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package arm_contract

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IRMNTaggedRoot struct {
	CommitStore common.Address
	Root        [32]byte
}

type RMNConfig struct {
	Voters               []RMNVoter
	BlessWeightThreshold uint16
	CurseWeightThreshold uint16
}

type RMNUnvoteToCurseRecord struct {
	CurseVoteAddr common.Address
	CursesHash    [32]byte
	ForceUnvote   bool
}

type RMNVoter struct {
	BlessVoteAddr   common.Address
	CurseVoteAddr   common.Address
	CurseUnvoteAddr common.Address
	BlessWeight     uint8
	CurseWeight     uint8
}

var ARMContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structRMN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structRMN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyVotedToCurse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurseState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidCursesHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"InvalidVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustRecoverFromCurse\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyVotedToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structRMN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"structRMN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerCursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecoveredFromCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"ReusedVotesToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"SkippedUnvoteToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasBlessed\",\"type\":\"bool\"}],\"name\":\"TaggedRootBlessVotesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"TaggedRootBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"UnvotedToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"}],\"name\":\"VotedToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"VotedToCurse\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"getBlessProgress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"blessVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"blessed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structRMN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structRMN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurseProgress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"curseVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"voteCounts\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"cursesHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"cursed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIRMN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"isCursed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCursed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIRMN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"ownerResetBlessVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"forceUnvote\",\"type\":\"bool\"}],\"internalType\":\"structRMN.UnvoteToCurseRecord[]\",\"name\":\"unvoteRecords\",\"type\":\"tuple[]\"}],\"name\":\"ownerUnvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structRMN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structRMN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"unvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIRMN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"voteToBless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"voteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004c2538038062004c25833981016040819052620000349162000e20565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be816200013a565b5050604080516080808201835260008083526020830181905260608301526001600160801b03928201929092529150600190620000fd90829062000fad565b82604001516001600160801b0316901c6001600160801b0316101562000127576200012762000fc9565b506200013381620001e5565b506200115b565b336001600160a01b03821603620001945760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001fa600954640100000000900460ff1690565b1562000219576040516306523e6560e51b815260040160405180910390fd5b620002248162000a0c565b62000242576040516306b7c75960e31b815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b82821015620002e85760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548216858701526002909201549081169284019290925260ff600160a01b830481166060850152600160a81b909204909116608083015290835290920191016200026a565b505050908252506001919091015461ffff808216602080850191909152620100009283900482166040948501528601516003805494880151831690930263ffffffff1990941691161791909117905590505b600254156200045a576002805460009190620003599060019062000fad565b815481106200036c576200036c62000fdf565b600091825260208083206040805160a081018252600390940290910180546001600160a01b03908116808652600183015482168686019081526002938401548084168887015260ff600160a01b8204811660608a0152600160a81b90910416608088015290875260058552838720805465ffffffffffff19169055511685526007909252909220805460ff1916905581549092508062000410576200041062000ff5565b60008281526020902060036000199092019182020180546001600160a01b03199081168255600182018054909116905560020180546001600160b01b03191690559055506200033a565b60005b8251518110156200052e5782518051600291908390811062000483576200048362000fdf565b602090810291909101810151825460018181018555600094855293839020825160039092020180546001600160a01b039283166001600160a01b03199182161782559383015181860180549184169190951617909355604082015160029093018054606084015160809094015160ff908116600160a81b0260ff60a81b1991909516600160a01b026001600160a81b031990921695909316949094179390931716179055016200045d565b5060048054600090620005479063ffffffff166200100b565b82546101009290920a63ffffffff8181021990931691831602179091556004541660005b83515160ff821610156200071557600084600001518260ff168151811062000597576200059762000fdf565b602090810291909101810151604080516060808201835263ffffffff88811683528185015160ff90811684880190815289821685870190815287516001600160a01b03908116600090815260058b52888120975188549451935190871664ffffffffff1990951694909417640100000000938616939093029290921760ff60281b1916650100000000009385169390930292909217909555855160a08101875260018082526080808a01518516838c019081528a8c01805186168a526007808e528b8b205462010000908190048a16878e019081529d8d015188169a87019a8b52825188168c52818f528c8c20860154948701948552915187168b52909c52989097209151825498519951965161ffff1990991690151561ff0019161761010099909416989098029290921762010000600160d01b03191693909216909602600160301b600160d01b031916919091176601000000000000939091169290920291909117835551910155506200070d8162001031565b90506200056b565b506004805463ffffffff4381166401000000000263ffffffff60201b1990921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd906200077290869062001053565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff821610156200096157600084600001518260ff1681518110620007cb57620007cb62000fdf565b6020908102919091018101518101516001600160a01b03808216600090815260078452604090819020815160a081018352815460ff808216151580845261010083049091169783019790975263ffffffff62010000820416938201939093526601000000000000909204909216606082015260019091015460808201529092509062000881576001600160a01b038216600090815260076020526040812080546001600160d01b0319168155600101556200094b565b805180156200089a57506000816040015163ffffffff16115b156200094b57806020015160ff1684602001818151620008bb919062001106565b61ffff1690525060208082015160408084015160808501519388015191516001600160a01b0387169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03946200094294919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b505080620009599062001031565b90506200079f565b508051602082015161ffff91821691161080156040830152620009c0578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33342604051620009b791815260200190565b60405180910390a25b805160098054602084015160409094015115156401000000000260ff60201b1961ffff958616620100000263ffffffff1990931695909416949094171791909116919091179055505050565b805151600090158062000a2157508151516080105b8062000a335750602082015161ffff16155b8062000a455750604082015161ffff16155b1562000a5357506000919050565b6000806000846000015151600362000a6c91906200112b565b6001600160401b0381111562000a865762000a8662000d45565b60405190808252806020026020018201604052801562000ab0578160200160208202803683370190505b50905060005b85515181101562000c755760008660000151828151811062000adc5762000adc62000fdf565b6020026020010151905060006001600160a01b031681600001516001600160a01b0316148062000b17575060208101516001600160a01b0316155b8062000b2e575060408101516001600160a01b0316155b8062000b505750606081015160ff1615801562000b505750608081015160ff16155b1562000b63575060009695505050505050565b80518362000b738460036200112b565b62000b8090600062001145565b8151811062000b935762000b9362000fdf565b6001600160a01b039092166020928302919091018201528101518362000bbb8460036200112b565b62000bc890600162001145565b8151811062000bdb5762000bdb62000fdf565b6001600160a01b039092166020928302919091019091015260408101518362000c068460036200112b565b62000c1390600262001145565b8151811062000c265762000c2662000fdf565b6001600160a01b0390921660209283029190910190910152606081015162000c529060ff168662001145565b9450806080015160ff168462000c69919062001145565b93505060010162000ab6565b5060005b815181101562000d1a57600082828151811062000c9a5762000c9a62000fdf565b60200260200101519050600082600162000cb5919062001145565b90505b835181101562000d0f5783818151811062000cd75762000cd762000fdf565b60200260200101516001600160a01b0316826001600160a01b03160362000d0657506000979650505050505050565b60010162000cb8565b505060010162000c79565b50846020015161ffff16831015801562000d3c5750846040015161ffff168210155b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000d805762000d8062000d45565b60405290565b60405160a081016001600160401b038111828210171562000d805762000d8062000d45565b604051601f8201601f191681016001600160401b038111828210171562000dd65762000dd662000d45565b604052919050565b80516001600160a01b038116811462000df657600080fd5b919050565b805160ff8116811462000df657600080fd5b805161ffff8116811462000df657600080fd5b6000602080838503121562000e3457600080fd5b82516001600160401b038082111562000e4c57600080fd5b8185019150606080838803121562000e6357600080fd5b62000e6d62000d5b565b83518381111562000e7d57600080fd5b8401601f8101891362000e8f57600080fd5b80518481111562000ea45762000ea462000d45565b62000eb4878260051b0162000dab565b818152878101955060a091820283018801918b83111562000ed457600080fd5b928801925b8284101562000f625780848d03121562000ef35760008081fd5b62000efd62000d86565b62000f088562000dde565b815262000f178a860162000dde565b8a820152604062000f2a81870162000dde565b9082015262000f3b85880162000dfb565b87820152608062000f4e81870162000dfb565b908201528752958801959283019262000ed9565b5083525062000f75905084860162000e0d565b8582015262000f876040850162000e0d565b6040820152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000fc35762000fc362000f97565b92915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600063ffffffff80831681810362001027576200102762000f97565b6001019392505050565b600060ff821660ff81036200104a576200104a62000f97565b60010192915050565b60006020808352608080840185516060808588015282825180855260a0945060a089019150868401935060005b81811015620010d857845180516001600160a01b0390811685528982015181168a860152604080830151909116908501528481015160ff90811686860152908801511687840152938701939185019160010162001080565b50509488015161ffff8116604089015294604089015161ffff811660608a0152955098975050505050505050565b61ffff81811683821601908082111562001124576200112462000f97565b5092915050565b808202811582820484141762000fc35762000fc362000f97565b8082018082111562000fc35762000fc362000f97565b613aba806200116b6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80634d616771116100b25780639799861111610081578063e4bbc05c11610066578063e4bbc05c1461029c578063f2fde38b146102a4578063f33f2895146102b757600080fd5b80639799861114610276578063ba86a1f01461028957600080fd5b80634d61677114610220578063618af1281461023357806379ba5097146102465780638da5cb5b1461024e57600080fd5b8063397796f7116100ee578063397796f7146101ca5780633987d651146101dd5780633f42ab73146101f657806347cf2b601461020d57600080fd5b8063119a352714610120578063181f5a77146101355780632cbc26bb1461018757806335aea869146101b7575b600080fd5b61013361012e36600461317f565b6102d9565b005b6101716040518060400160405280600d81526020017f524d4e20312e352e302d6465760000000000000000000000000000000000000081525081565b60405161017e9190613198565b60405180910390f35b6101a7610195366004613205565b50600954640100000000900460ff1690565b604051901515815260200161017e565b6101336101c5366004613272565b610765565b600954640100000000900460ff166101a7565b6101e5610afa565b60405161017e9594939291906132ee565b6101fe610efb565b60405161017e93929190613448565b61013361021b36600461355e565b611033565b6101a761022e3660046136b6565b611047565b6101336102413660046136ce565b6110d9565b61013361158a565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161017e565b610133610284366004613743565b611687565b610133610297366004613743565b611bb4565b610133611d8c565b6101336102b23660046137a6565b611e51565b6102ca6102c53660046136b6565b611e62565b60405161017e939291906137c1565b33600090815260076020908152604091829020825160a081018452815460ff808216151580845261010083049091169483019490945263ffffffff6201000082041694820194909452660100000000000090930473ffffffffffffffffffffffffffffffffffffffff16606084015260010154608083015261038e576040517f669f262e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b33600090815260086020908152604080832085845290915290205460ff16156103ec576040517f9baf703d00000000000000000000000000000000000000000000000000000000815233600482015260248101839052604401610385565b3360009081526008602090815260408083208584529091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558101805161043e9061381e565b63ffffffff16905260808101516040805160208101929092528101839052606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291815281516020928301206080840190815233600090815260078452829020845181548686015187860180516060808b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009095169515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169590951761010060ff94851602177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff92831681027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1691909117660100000000000073ffffffffffffffffffffffffffffffffffffffff9096169590950294909417865595516001958601558651938401875260095461ffff8082168652938104909316978401979097526401000000009091041615159381019390935292519192911690036105fa57816020015160ff16816020018181516105f29190613841565b61ffff169052505b60045460208381015160408086015160808088015187860151845160ff909616865263ffffffff93841696860196909652928401899052606084019290925261ffff90931690820152911690339082907f8e5ceca76dae647f687fccbe8d42a3796e68330812669bd5003b938dacb1b6dd9060a00160405180910390a381604001511580156106995750816000015161ffff16826020015161ffff1610155b156106e35760016040838101919091525142815263ffffffff8216907f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e3339060200160405180910390a25b5080516009805460208401516040909401511515640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff61ffff95861662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909316959094169490941717919091169190911790555050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260076020908152604091829020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff62010000840416938101939093526601000000000000909104909216606082015260019091015460808201526107f560095460ff6401000000009091041690565b1561082c576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610897576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610385565b805115806108ad5750604081015163ffffffff16155b156108e4576040517f9ff6d96b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818160800151146109315760808101516040517f79aa5c5f000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610385565b6004546020820151604080840151905173ffffffffffffffffffffffffffffffffffffffff87169363ffffffff16927f56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade225926109a992889060ff93909316835263ffffffff919091166020830152604082015260600190565b60405180910390a3600060408281018281526080840183815273ffffffffffffffffffffffffffffffffffffffff878116855260076020908152939094208551815494870151935160608801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff909516948502177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff90921682027fffffffffffff0000000000000000000000000000000000000000ffffffffffff16176601000000000000959096169490940294909417845551600190930192909255600980549091600291610adb9185910461ffff16613863565b92506101000a81548161ffff021916908361ffff160217905550505050565b60095460028054604080516020808402820181019092528281526060948594859462010000830461ffff169464010000000090930460ff16936000938493919290849084015b82821015610bec5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610b40565b50505050905060005b8151811015610cbb57600060076000848481518110610c1657610c1661387e565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff6201000084041693810184905266010000000000009092049093166060820152600190920154608083015290915015610cb257610caf846138ad565b93505b50600101610bf5565b508167ffffffffffffffff811115610cd557610cd5613471565b604051908082528060200260200182016040528015610cfe578160200160208202803683370190505b5096508167ffffffffffffffff811115610d1a57610d1a613471565b604051908082528060200260200182016040528015610d43578160200160208202803683370190505b5095508167ffffffffffffffff811115610d5f57610d5f613471565b604051908082528060200260200182016040528015610d88578160200160208202803683370190505b5094506000805b8251811015610ef0576000838281518110610dac57610dac61387e565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff808216151583526101008204169682019690965263ffffffff6201000087041692810183905266010000000000009095049092166060850152600190910154608084015290925015610ee657818b8581518110610e4d57610e4d61387e565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080604001518a8581518110610e9e57610e9e61387e565b602002602001019063ffffffff16908163ffffffff16815250508060800151898581518110610ecf57610ecf61387e565b6020908102919091010152610ee3846138ad565b93505b5050600101610d8f565b505050509091929394565b6040805160608082018352808252600060208084018290528385018290526004548551600280549384028201608090810190985294810183815263ffffffff808416986401000000009094041696959194919385939192859285015b828210156110035760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610f57565b505050908252506001919091015461ffff8082166020840152620100009091041660409091015292939192919050565b61103b612128565b611044816121a9565b50565b60006006816110a561105e368690038601866138e5565b80516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b8152602081019190915260400160002054760100000000000000000000000000000000000000000000900460ff1692915050565b6110e1612128565b60005b818110156114055760008383838181106111005761110061387e565b905060600201803603810190611116919061393c565b805173ffffffffffffffffffffffffffffffffffffffff908116600090815260076020908152604091829020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff6201000084041681850152660100000000000090920490931660608201526001909201546080830152820151919250901580156111ac57508160200151816080015114155b156112145781516080820151602080850151604080519384529183015273ffffffffffffffffffffffffffffffffffffffff909216917ff4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a53910160405180910390a250506113fd565b8051158061122a5750604081015163ffffffff16155b156112365750506113fd565b81516004546020838101516040808601516080870151825160ff909416845263ffffffff918216948401949094529082019290925273ffffffffffffffffffffffffffffffffffffffff909316929116907f56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade2259060600160405180910390a36000604082810182815260808401838152855173ffffffffffffffffffffffffffffffffffffffff908116855260076020908152939094208551815494870151935160608801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff909516948502177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff90921682027fffffffffffff0000000000000000000000000000000000000000ffffffffffff161766010000000000009590961694909402949094178455516001909301929092556009805490916002916113e09185910461ffff16613863565b92506101000a81548161ffff021916908361ffff16021790555050505b6001016110e4565b50600954640100000000900460ff16801561142e575060095461ffff8082166201000090920416105b1561158657600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1690556040517f08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb790600090a160408051600280546080602082028401810190945260608301818152611586948492849160009085015b8282101561155a5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff740100000000000000000000000000000000000000008304811660608501527501000000000000000000000000000000000000000000909204909116608083015290835290920191016114ae565b505050908252506001919091015461ffff808216602084015262010000909104166040909101526121a9565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610385565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600954640100000000900460ff16156116cc576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454336000908152600560209081526040918290208251606081018452905463ffffffff81811680845260ff6401000000008404811695850195909552650100000000009092049093169382019390935292169190821461175c576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610385565b60005b83811015611bad57600085858381811061177b5761177b61387e565b90506040020180360381019061179191906138e5565b905060006117e08280516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b6000818152600660209081526040918290208251608081018452905463ffffffff81168252640100000000810461ffff1692820192909252660100000000000082046fffffffffffffffffffffffffffffffff1692810192909252760100000000000000000000000000000000000000000000900460ff161580156060830152919250906118c5573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf1856040516118b5919061398a565b60405180910390a3505050611ba5565b8563ffffffff16816000015163ffffffff161461190857506040805160808101825263ffffffff8716815260006020820181905291810182905260608101919091525b61191a81604001518660400151612c7a565b1561196c573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead856040516118b5919061398a565b61197e81604001518660400151612cb4565b6fffffffffffffffffffffffffffffffff166040820152602080860151908201805160ff909216916119b1908390613841565b61ffff1690525060208581015160408051865173ffffffffffffffffffffffffffffffffffffffff168152868401519381019390935260ff9091168282015251339163ffffffff8916917f2a08a2bd2798f0aae9a843f0f4ad4de488c1b3d5f04049940cfed736ad69fb979181900360600190a3600354602082015161ffff918216911610611ab85760016060820152602081015160405163ffffffff8816917f8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc991611aaf918791825173ffffffffffffffffffffffffffffffffffffffff1681526020928301519281019290925261ffff16604082015260600190565b60405180910390a25b6000918252600660209081526040928390208251815492840151948401516060909401511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff909516660100000000000002949094167fffffffffffffffffff0000000000000000000000000000000000ffffffffffff61ffff909616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000090941663ffffffff90921691909117929092179390931617179055505b60010161175f565b5050505050565b611bbc612128565b60045463ffffffff1660005b82811015611d86576000848483818110611be457611be461387e565b905060400201803603810190611bfa91906138e5565b90506000611c498280516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b60008181526006602081815260408084208151608081018352815463ffffffff808216835261ffff640100000000830416838701526fffffffffffffffffffffffffffffffff66010000000000008304169483019490945260ff76010000000000000000000000000000000000000000000082041615156060830190815296889052949093527fffffffffffffffffff000000000000000000000000000000000000000000000090931690925591518251939450919281169087161480611d0d5750805b15611d775760408051855173ffffffffffffffffffffffffffffffffffffffff1681526020808701519082015282151581830152905163ffffffff8816917f7d15a6eebaa019ea7d5b7d38937c51ebd3befbfdf51bb630a694fd28635bbcba919081900360600190a25b50505050806001019050611bc8565b50505050565b611d94612128565b6040514281527f367ba81ba03ea9fa7ee089ecfb43b1c35e0935bc87a472abf615b7580dc16b799060200160405180910390a1600954640100000000900460ff16611e4f57600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1664010000000017905560045460405163ffffffff909116907f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33390611e469042815260200190565b60405180910390a25b565b611e59612128565b61104481612cd7565b606060008080611e7a61105e368790038701876138e5565b6000818152600660209081526040918290208251608081018452905463ffffffff808216808452640100000000830461ffff1694840194909452660100000000000082046fffffffffffffffffffffffffffffffff1694830194909452760100000000000000000000000000000000000000000000900460ff1615156060820181905260045490965093945092909116900361211f5760208101516040820151909450611f2681612dcc565b60ff1667ffffffffffffffff811115611f4157611f41613471565b604051908082528060200260200182016040528015611f6a578160200160208202803683370190505b506002805460408051602080840282018101909252828152939950600093929190849084015b8282101561203c5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101611f90565b5050505090506000805b825181101561211a576120ac84600560008685815181106120695761206961387e565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205465010000000000900460ff16612c7a565b15612112578281815181106120c3576120c361387e565b6020026020010151600001518983815181106120e1576120e161387e565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015261210f826138ad565b91505b600101612046565b505050505b50509193909250565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610385565b600954640100000000900460ff16156121ee576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121f781612e0b565b61222d576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b828210156123015760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101612255565b505050908252506001919091015461ffff80821660208085019190915262010000928390048216604094850152860151600380549488015183169093027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090941691161791909117905590505b6002541561253957600280546000919061238a906001906139b7565b8154811061239a5761239a61387e565b600091825260208083206040805160a0810182526003909402909101805473ffffffffffffffffffffffffffffffffffffffff908116808652600183015482168686019081526002938401548084168887015260ff740100000000000000000000000000000000000000008204811660608a015275010000000000000000000000000000000000000000009091041660808801529087526005855283872080547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000016905551168552600790925290922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558154909250806124a2576124a26139ca565b60008281526020902060037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019182020180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168255600182018054909116905560020180547fffffffffffffffffffff0000000000000000000000000000000000000000000016905590555061236e565b60005b8251518110156126835782518051600291908390811061255e5761255e61387e565b6020908102919091018101518254600181810185556000948552938390208251600390920201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161782559383015181860180549184169190951617909355604082015160029093018054606084015160809094015160ff9081167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff9190951674010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909216959093169490941793909317161790550161253c565b506004805460009061269a9063ffffffff1661381e565b82546101009290920a63ffffffff8181021990931691831602179091556004541660005b83515160ff8216101561290857600084600001518260ff16815181106126e6576126e661387e565b602090810291909101810151604080516060808201835263ffffffff88811683528185015160ff908116848801908152898216858701908152875173ffffffffffffffffffffffffffffffffffffffff908116600090815260058b5288812097518854945193519087167fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000009095169490941764010000000093861693909302929092177fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff16650100000000009385169390930292909217909555855160a08101875260018082526080808a01518516838c019081528a8c01805186168a526007808e528b8b205462010000908190048a16878e019081529d8d015188169a87019a8b52825188168c52818f528c8c20860154948701948552915187168b52909c5298909720915182549851995196517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009099169015157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16176101009990941698909802929092177fffffffffffff000000000000000000000000000000000000000000000000ffff16939092169096027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1691909117660100000000000093909116929092029190911783555191015550612901816139f9565b90506126be565b506004805463ffffffff438116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff90921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd9061297b908690613a18565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff82161015612b9b57600084600001518260ff16815181106129d0576129d061387e565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff808216151580845261010083049091169783019790975263ffffffff620100008204169382019390935266010000000000009092049092166060820152600190910154608082015290925090612ab65773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812080547fffffffffffff000000000000000000000000000000000000000000000000000016815560010155612b88565b80518015612ace57506000816040015163ffffffff16115b15612b8857806020015160ff1684602001818151612aec9190613841565b61ffff16905250602080820151604080840151608085015193880151915173ffffffffffffffffffffffffffffffffffffffff87169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b0394612b7f94919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b505080612b94906139f9565b90506129a8565b508051602082015161ffff91821691161080156040830152612bf8578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33342604051612bef91815260200190565b60405180910390a25b80516009805460208401516040909401511515640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff61ffff95861662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090931695909416949094171791909116919091179055505050565b600060808260ff1610612c8f57612c8f613a2b565b50600160ff82161b82166fffffffffffffffffffffffffffffffff1615155b92915050565b600060808260ff1610612cc957612cc9613a2b565b50600160ff919091161b1790565b3373ffffffffffffffffffffffffffffffffffffffff821603612d56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610385565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005b6fffffffffffffffffffffffffffffffff821615612e0657612df2600183613a5a565b90911690612dff816139f9565b9050612dcf565b919050565b8051516000901580612e1f57508151516080105b80612e305750602082015161ffff16155b80612e415750604082015161ffff16155b15612e4e57506000919050565b60008060008460000151516003612e659190613a83565b67ffffffffffffffff811115612e7d57612e7d613471565b604051908082528060200260200182016040528015612ea6578160200160208202803683370190505b50905060005b8551518110156130a357600086600001518281518110612ece57612ece61387e565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480612f2f5750602081015173ffffffffffffffffffffffffffffffffffffffff16155b80612f525750604081015173ffffffffffffffffffffffffffffffffffffffff16155b80612f725750606081015160ff16158015612f725750608081015160ff16155b15612f84575060009695505050505050565b805183612f92846003613a83565b612f9d906000613a9a565b81518110612fad57612fad61387e565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015281015183612fe0846003613a83565b612feb906001613a9a565b81518110612ffb57612ffb61387e565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152604081015183613031846003613a83565b61303c906002613a9a565b8151811061304c5761304c61387e565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260608101516130839060ff1686613a9a565b9450806080015160ff16846130989190613a9a565b935050600101612eac565b5060005b81518110156131555760008282815181106130c4576130c461387e565b6020026020010151905060008260016130dd9190613a9a565b90505b835181101561314b578381815181106130fb576130fb61387e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361314357506000979650505050505050565b6001016130e0565b50506001016130a7565b50846020015161ffff1683101580156131765750846040015161ffff168210155b95945050505050565b60006020828403121561319157600080fd5b5035919050565b60006020808352835180602085015260005b818110156131c6578581018301518582016040015282016131aa565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561321757600080fd5b81357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461324757600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612e0657600080fd5b6000806040838503121561328557600080fd5b61328e8361324e565b946020939093013593505050565b60008151808452602080850194506020840160005b838110156132e357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016132b1565b509495945050505050565b60a08152600061330160a083018861329c565b82810360208481019190915287518083528882019282019060005b8181101561333e57845163ffffffff168352938301939183019160010161331c565b50508481036040860152875180825290820192508188019060005b8181101561337557825185529383019391830191600101613359565b50505061ffff8616606085015250905082151560808301525b9695505050505050565b8051606080845281518482018190526000926080916020918201918388019190865b8281101561341f578451805173ffffffffffffffffffffffffffffffffffffffff908116865283820151811684870152604080830151909116908601528781015160ff908116898701529087015116868501529381019360a0909301926001016133ba565b508781015161ffff81168a830152955050506040860151935061338e604088018561ffff169052565b600063ffffffff8086168352808516602084015250606060408301526131766060830184613398565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156134c3576134c3613471565b60405290565b60405160a0810167ffffffffffffffff811182821017156134c3576134c3613471565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561353357613533613471565b604052919050565b803560ff81168114612e0657600080fd5b803561ffff81168114612e0657600080fd5b6000602080838503121561357157600080fd5b823567ffffffffffffffff8082111561358957600080fd5b8185019150606080838803121561359f57600080fd5b6135a76134a0565b8335838111156135b657600080fd5b8401601f810189136135c757600080fd5b8035848111156135d9576135d9613471565b6135e7878260051b016134ec565b818152878101955060a091820283018801918b83111561360657600080fd5b928801925b828410156136855780848d0312156136235760008081fd5b61362b6134c9565b6136348561324e565b81526136418a860161324e565b8a820152604061365281870161324e565b9082015261366185880161353b565b87820152608061367281870161353b565b908201528752958801959283019261360b565b50835250613696905084860161354c565b858201526136a66040850161354c565b6040820152979650505050505050565b6000604082840312156136c857600080fd5b50919050565b600080602083850312156136e157600080fd5b823567ffffffffffffffff808211156136f957600080fd5b818501915085601f83011261370d57600080fd5b81358181111561371c57600080fd5b86602060608302850101111561373157600080fd5b60209290920196919550909350505050565b6000806020838503121561375657600080fd5b823567ffffffffffffffff8082111561376e57600080fd5b818501915085601f83011261378257600080fd5b81358181111561379157600080fd5b8660208260061b850101111561373157600080fd5b6000602082840312156137b857600080fd5b6132478261324e565b6060815260006137d4606083018661329c565b61ffff94909416602083015250901515604090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff808316818103613837576138376137ef565b6001019392505050565b61ffff81811683821601908082111561385c5761385c6137ef565b5092915050565b61ffff82811682821603908082111561385c5761385c6137ef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138de576138de6137ef565b5060010190565b6000604082840312156138f757600080fd5b6040516040810181811067ffffffffffffffff8211171561391a5761391a613471565b6040526139268361324e565b8152602083013560208201528091505092915050565b60006060828403121561394e57600080fd5b6139566134a0565b61395f8361324e565b8152602083013560208201526040830135801515811461397e57600080fd5b60408201529392505050565b815173ffffffffffffffffffffffffffffffffffffffff1681526020808301519082015260408101612cae565b81810381811115612cae57612cae6137ef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff821660ff8103613a0f57613a0f6137ef565b60010192915050565b6020815260006132476020830184613398565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6fffffffffffffffffffffffffffffffff82811682821603908082111561385c5761385c6137ef565b8082028115828204841417612cae57612cae6137ef565b80820180821115612cae57612cae6137ef56fea164736f6c6343000818000a",
}

var ARMContractABI = ARMContractMetaData.ABI

var ARMContractBin = ARMContractMetaData.Bin

func DeployARMContract(auth *bind.TransactOpts, backend bind.ContractBackend, config RMNConfig) (common.Address, *types.Transaction, *ARMContract, error) {
	parsed, err := ARMContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ARMContractBin), backend, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ARMContract{address: address, abi: *parsed, ARMContractCaller: ARMContractCaller{contract: contract}, ARMContractTransactor: ARMContractTransactor{contract: contract}, ARMContractFilterer: ARMContractFilterer{contract: contract}}, nil
}

type ARMContract struct {
	address common.Address
	abi     abi.ABI
	ARMContractCaller
	ARMContractTransactor
	ARMContractFilterer
}

type ARMContractCaller struct {
	contract *bind.BoundContract
}

type ARMContractTransactor struct {
	contract *bind.BoundContract
}

type ARMContractFilterer struct {
	contract *bind.BoundContract
}

type ARMContractSession struct {
	Contract     *ARMContract
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ARMContractCallerSession struct {
	Contract *ARMContractCaller
	CallOpts bind.CallOpts
}

type ARMContractTransactorSession struct {
	Contract     *ARMContractTransactor
	TransactOpts bind.TransactOpts
}

type ARMContractRaw struct {
	Contract *ARMContract
}

type ARMContractCallerRaw struct {
	Contract *ARMContractCaller
}

type ARMContractTransactorRaw struct {
	Contract *ARMContractTransactor
}

func NewARMContract(address common.Address, backend bind.ContractBackend) (*ARMContract, error) {
	abi, err := abi.JSON(strings.NewReader(ARMContractABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindARMContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ARMContract{address: address, abi: abi, ARMContractCaller: ARMContractCaller{contract: contract}, ARMContractTransactor: ARMContractTransactor{contract: contract}, ARMContractFilterer: ARMContractFilterer{contract: contract}}, nil
}

func NewARMContractCaller(address common.Address, caller bind.ContractCaller) (*ARMContractCaller, error) {
	contract, err := bindARMContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ARMContractCaller{contract: contract}, nil
}

func NewARMContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ARMContractTransactor, error) {
	contract, err := bindARMContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ARMContractTransactor{contract: contract}, nil
}

func NewARMContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ARMContractFilterer, error) {
	contract, err := bindARMContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ARMContractFilterer{contract: contract}, nil
}

func bindARMContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ARMContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_ARMContract *ARMContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ARMContract.Contract.ARMContractCaller.contract.Call(opts, result, method, params...)
}

func (_ARMContract *ARMContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ARMContract.Contract.ARMContractTransactor.contract.Transfer(opts)
}

func (_ARMContract *ARMContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ARMContract.Contract.ARMContractTransactor.contract.Transact(opts, method, params...)
}

func (_ARMContract *ARMContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ARMContract.Contract.contract.Call(opts, result, method, params...)
}

func (_ARMContract *ARMContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ARMContract.Contract.contract.Transfer(opts)
}

func (_ARMContract *ARMContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ARMContract.Contract.contract.Transact(opts, method, params...)
}

func (_ARMContract *ARMContractCaller) GetBlessProgress(opts *bind.CallOpts, taggedRoot IRMNTaggedRoot) (GetBlessProgress,

	error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "getBlessProgress", taggedRoot)

	outstruct := new(GetBlessProgress)
	if err != nil {
		return *outstruct, err
	}

	outstruct.BlessVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.AccumulatedWeight = *abi.ConvertType(out[1], new(uint16)).(*uint16)
	outstruct.Blessed = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

func (_ARMContract *ARMContractSession) GetBlessProgress(taggedRoot IRMNTaggedRoot) (GetBlessProgress,

	error) {
	return _ARMContract.Contract.GetBlessProgress(&_ARMContract.CallOpts, taggedRoot)
}

func (_ARMContract *ARMContractCallerSession) GetBlessProgress(taggedRoot IRMNTaggedRoot) (GetBlessProgress,

	error) {
	return _ARMContract.Contract.GetBlessProgress(&_ARMContract.CallOpts, taggedRoot)
}

func (_ARMContract *ARMContractCaller) GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

	error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "getConfigDetails")

	outstruct := new(GetConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Version = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.Config = *abi.ConvertType(out[2], new(RMNConfig)).(*RMNConfig)

	return *outstruct, err

}

func (_ARMContract *ARMContractSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _ARMContract.Contract.GetConfigDetails(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCallerSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _ARMContract.Contract.GetConfigDetails(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCaller) GetCurseProgress(opts *bind.CallOpts) (GetCurseProgress,

	error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "getCurseProgress")

	outstruct := new(GetCurseProgress)
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurseVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.VoteCounts = *abi.ConvertType(out[1], new([]uint32)).(*[]uint32)
	outstruct.CursesHashes = *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	outstruct.AccumulatedWeight = *abi.ConvertType(out[3], new(uint16)).(*uint16)
	outstruct.Cursed = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

func (_ARMContract *ARMContractSession) GetCurseProgress() (GetCurseProgress,

	error) {
	return _ARMContract.Contract.GetCurseProgress(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCallerSession) GetCurseProgress() (GetCurseProgress,

	error) {
	return _ARMContract.Contract.GetCurseProgress(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCaller) IsBlessed(opts *bind.CallOpts, taggedRoot IRMNTaggedRoot) (bool, error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "isBlessed", taggedRoot)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_ARMContract *ARMContractSession) IsBlessed(taggedRoot IRMNTaggedRoot) (bool, error) {
	return _ARMContract.Contract.IsBlessed(&_ARMContract.CallOpts, taggedRoot)
}

func (_ARMContract *ARMContractCallerSession) IsBlessed(taggedRoot IRMNTaggedRoot) (bool, error) {
	return _ARMContract.Contract.IsBlessed(&_ARMContract.CallOpts, taggedRoot)
}

func (_ARMContract *ARMContractCaller) IsCursed(opts *bind.CallOpts, arg0 [16]byte) (bool, error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "isCursed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_ARMContract *ARMContractSession) IsCursed(arg0 [16]byte) (bool, error) {
	return _ARMContract.Contract.IsCursed(&_ARMContract.CallOpts, arg0)
}

func (_ARMContract *ARMContractCallerSession) IsCursed(arg0 [16]byte) (bool, error) {
	return _ARMContract.Contract.IsCursed(&_ARMContract.CallOpts, arg0)
}

func (_ARMContract *ARMContractCaller) IsCursed0(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "isCursed0")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_ARMContract *ARMContractSession) IsCursed0() (bool, error) {
	return _ARMContract.Contract.IsCursed0(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCallerSession) IsCursed0() (bool, error) {
	return _ARMContract.Contract.IsCursed0(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ARMContract *ARMContractSession) Owner() (common.Address, error) {
	return _ARMContract.Contract.Owner(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCallerSession) Owner() (common.Address, error) {
	return _ARMContract.Contract.Owner(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ARMContract.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_ARMContract *ARMContractSession) TypeAndVersion() (string, error) {
	return _ARMContract.Contract.TypeAndVersion(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractCallerSession) TypeAndVersion() (string, error) {
	return _ARMContract.Contract.TypeAndVersion(&_ARMContract.CallOpts)
}

func (_ARMContract *ARMContractTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "acceptOwnership")
}

func (_ARMContract *ARMContractSession) AcceptOwnership() (*types.Transaction, error) {
	return _ARMContract.Contract.AcceptOwnership(&_ARMContract.TransactOpts)
}

func (_ARMContract *ARMContractTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ARMContract.Contract.AcceptOwnership(&_ARMContract.TransactOpts)
}

func (_ARMContract *ARMContractTransactor) OwnerCurse(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "ownerCurse")
}

func (_ARMContract *ARMContractSession) OwnerCurse() (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerCurse(&_ARMContract.TransactOpts)
}

func (_ARMContract *ARMContractTransactorSession) OwnerCurse() (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerCurse(&_ARMContract.TransactOpts)
}

func (_ARMContract *ARMContractTransactor) OwnerResetBlessVotes(opts *bind.TransactOpts, taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "ownerResetBlessVotes", taggedRoots)
}

func (_ARMContract *ARMContractSession) OwnerResetBlessVotes(taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerResetBlessVotes(&_ARMContract.TransactOpts, taggedRoots)
}

func (_ARMContract *ARMContractTransactorSession) OwnerResetBlessVotes(taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerResetBlessVotes(&_ARMContract.TransactOpts, taggedRoots)
}

func (_ARMContract *ARMContractTransactor) OwnerUnvoteToCurse(opts *bind.TransactOpts, unvoteRecords []RMNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "ownerUnvoteToCurse", unvoteRecords)
}

func (_ARMContract *ARMContractSession) OwnerUnvoteToCurse(unvoteRecords []RMNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerUnvoteToCurse(&_ARMContract.TransactOpts, unvoteRecords)
}

func (_ARMContract *ARMContractTransactorSession) OwnerUnvoteToCurse(unvoteRecords []RMNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _ARMContract.Contract.OwnerUnvoteToCurse(&_ARMContract.TransactOpts, unvoteRecords)
}

func (_ARMContract *ARMContractTransactor) SetConfig(opts *bind.TransactOpts, config RMNConfig) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "setConfig", config)
}

func (_ARMContract *ARMContractSession) SetConfig(config RMNConfig) (*types.Transaction, error) {
	return _ARMContract.Contract.SetConfig(&_ARMContract.TransactOpts, config)
}

func (_ARMContract *ARMContractTransactorSession) SetConfig(config RMNConfig) (*types.Transaction, error) {
	return _ARMContract.Contract.SetConfig(&_ARMContract.TransactOpts, config)
}

func (_ARMContract *ARMContractTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "transferOwnership", to)
}

func (_ARMContract *ARMContractSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ARMContract.Contract.TransferOwnership(&_ARMContract.TransactOpts, to)
}

func (_ARMContract *ARMContractTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ARMContract.Contract.TransferOwnership(&_ARMContract.TransactOpts, to)
}

func (_ARMContract *ARMContractTransactor) UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "unvoteToCurse", curseVoteAddr, cursesHash)
}

func (_ARMContract *ARMContractSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _ARMContract.Contract.UnvoteToCurse(&_ARMContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_ARMContract *ARMContractTransactorSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _ARMContract.Contract.UnvoteToCurse(&_ARMContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_ARMContract *ARMContractTransactor) VoteToBless(opts *bind.TransactOpts, taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "voteToBless", taggedRoots)
}

func (_ARMContract *ARMContractSession) VoteToBless(taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.Contract.VoteToBless(&_ARMContract.TransactOpts, taggedRoots)
}

func (_ARMContract *ARMContractTransactorSession) VoteToBless(taggedRoots []IRMNTaggedRoot) (*types.Transaction, error) {
	return _ARMContract.Contract.VoteToBless(&_ARMContract.TransactOpts, taggedRoots)
}

func (_ARMContract *ARMContractTransactor) VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error) {
	return _ARMContract.contract.Transact(opts, "voteToCurse", curseId)
}

func (_ARMContract *ARMContractSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _ARMContract.Contract.VoteToCurse(&_ARMContract.TransactOpts, curseId)
}

func (_ARMContract *ARMContractTransactorSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _ARMContract.Contract.VoteToCurse(&_ARMContract.TransactOpts, curseId)
}

type ARMContractAlreadyBlessedIterator struct {
	Event *ARMContractAlreadyBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractAlreadyBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractAlreadyBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractAlreadyBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractAlreadyBlessedIterator) Error() error {
	return it.fail
}

func (it *ARMContractAlreadyBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractAlreadyBlessed struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IRMNTaggedRoot
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractAlreadyBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractAlreadyBlessedIterator{contract: _ARMContract.contract, event: "AlreadyBlessed", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *ARMContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractAlreadyBlessed)
				if err := _ARMContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseAlreadyBlessed(log types.Log) (*ARMContractAlreadyBlessed, error) {
	event := new(ARMContractAlreadyBlessed)
	if err := _ARMContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractAlreadyVotedToBlessIterator struct {
	Event *ARMContractAlreadyVotedToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractAlreadyVotedToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractAlreadyVotedToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractAlreadyVotedToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractAlreadyVotedToBlessIterator) Error() error {
	return it.fail
}

func (it *ARMContractAlreadyVotedToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractAlreadyVotedToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IRMNTaggedRoot
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractAlreadyVotedToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractAlreadyVotedToBlessIterator{contract: _ARMContract.contract, event: "AlreadyVotedToBless", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *ARMContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractAlreadyVotedToBless)
				if err := _ARMContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseAlreadyVotedToBless(log types.Log) (*ARMContractAlreadyVotedToBless, error) {
	event := new(ARMContractAlreadyVotedToBless)
	if err := _ARMContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractConfigSetIterator struct {
	Event *ARMContractConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractConfigSetIterator) Error() error {
	return it.fail
}

func (it *ARMContractConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractConfigSet struct {
	ConfigVersion uint32
	Config        RMNConfig
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractConfigSetIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractConfigSetIterator{contract: _ARMContract.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ARMContractConfigSet, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractConfigSet)
				if err := _ARMContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseConfigSet(log types.Log) (*ARMContractConfigSet, error) {
	event := new(ARMContractConfigSet)
	if err := _ARMContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractCursedIterator struct {
	Event *ARMContractCursed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractCursedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractCursedIterator) Error() error {
	return it.fail
}

func (it *ARMContractCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractCursed struct {
	ConfigVersion uint32
	Timestamp     *big.Int
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractCursedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractCursedIterator{contract: _ARMContract.contract, event: "Cursed", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchCursed(opts *bind.WatchOpts, sink chan<- *ARMContractCursed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractCursed)
				if err := _ARMContract.contract.UnpackLog(event, "Cursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseCursed(log types.Log) (*ARMContractCursed, error) {
	event := new(ARMContractCursed)
	if err := _ARMContract.contract.UnpackLog(event, "Cursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractOwnerCursedIterator struct {
	Event *ARMContractOwnerCursed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractOwnerCursedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractOwnerCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractOwnerCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractOwnerCursedIterator) Error() error {
	return it.fail
}

func (it *ARMContractOwnerCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractOwnerCursed struct {
	Timestamp *big.Int
	Raw       types.Log
}

func (_ARMContract *ARMContractFilterer) FilterOwnerCursed(opts *bind.FilterOpts) (*ARMContractOwnerCursedIterator, error) {

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "OwnerCursed")
	if err != nil {
		return nil, err
	}
	return &ARMContractOwnerCursedIterator{contract: _ARMContract.contract, event: "OwnerCursed", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchOwnerCursed(opts *bind.WatchOpts, sink chan<- *ARMContractOwnerCursed) (event.Subscription, error) {

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "OwnerCursed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractOwnerCursed)
				if err := _ARMContract.contract.UnpackLog(event, "OwnerCursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseOwnerCursed(log types.Log) (*ARMContractOwnerCursed, error) {
	event := new(ARMContractOwnerCursed)
	if err := _ARMContract.contract.UnpackLog(event, "OwnerCursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractOwnershipTransferRequestedIterator struct {
	Event *ARMContractOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ARMContractOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ARMContract *ARMContractFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ARMContractOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractOwnershipTransferRequestedIterator{contract: _ARMContract.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ARMContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractOwnershipTransferRequested)
				if err := _ARMContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseOwnershipTransferRequested(log types.Log) (*ARMContractOwnershipTransferRequested, error) {
	event := new(ARMContractOwnershipTransferRequested)
	if err := _ARMContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractOwnershipTransferredIterator struct {
	Event *ARMContractOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *ARMContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ARMContract *ARMContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ARMContractOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractOwnershipTransferredIterator{contract: _ARMContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ARMContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractOwnershipTransferred)
				if err := _ARMContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseOwnershipTransferred(log types.Log) (*ARMContractOwnershipTransferred, error) {
	event := new(ARMContractOwnershipTransferred)
	if err := _ARMContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractRecoveredFromCurseIterator struct {
	Event *ARMContractRecoveredFromCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractRecoveredFromCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractRecoveredFromCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractRecoveredFromCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractRecoveredFromCurseIterator) Error() error {
	return it.fail
}

func (it *ARMContractRecoveredFromCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractRecoveredFromCurse struct {
	Raw types.Log
}

func (_ARMContract *ARMContractFilterer) FilterRecoveredFromCurse(opts *bind.FilterOpts) (*ARMContractRecoveredFromCurseIterator, error) {

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return &ARMContractRecoveredFromCurseIterator{contract: _ARMContract.contract, event: "RecoveredFromCurse", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *ARMContractRecoveredFromCurse) (event.Subscription, error) {

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractRecoveredFromCurse)
				if err := _ARMContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseRecoveredFromCurse(log types.Log) (*ARMContractRecoveredFromCurse, error) {
	event := new(ARMContractRecoveredFromCurse)
	if err := _ARMContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractReusedVotesToCurseIterator struct {
	Event *ARMContractReusedVotesToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractReusedVotesToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractReusedVotesToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractReusedVotesToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractReusedVotesToCurseIterator) Error() error {
	return it.fail
}

func (it *ARMContractReusedVotesToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractReusedVotesToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_ARMContract *ARMContractFilterer) FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractReusedVotesToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractReusedVotesToCurseIterator{contract: _ARMContract.contract, event: "ReusedVotesToCurse", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractReusedVotesToCurse)
				if err := _ARMContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseReusedVotesToCurse(log types.Log) (*ARMContractReusedVotesToCurse, error) {
	event := new(ARMContractReusedVotesToCurse)
	if err := _ARMContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractSkippedUnvoteToCurseIterator struct {
	Event *ARMContractSkippedUnvoteToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractSkippedUnvoteToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractSkippedUnvoteToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractSkippedUnvoteToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractSkippedUnvoteToCurseIterator) Error() error {
	return it.fail
}

func (it *ARMContractSkippedUnvoteToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractSkippedUnvoteToCurse struct {
	Voter              common.Address
	ExpectedCursesHash [32]byte
	ActualCursesHash   [32]byte
	Raw                types.Log
}

func (_ARMContract *ARMContractFilterer) FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*ARMContractSkippedUnvoteToCurseIterator, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractSkippedUnvoteToCurseIterator{contract: _ARMContract.contract, event: "SkippedUnvoteToCurse", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractSkippedUnvoteToCurse)
				if err := _ARMContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseSkippedUnvoteToCurse(log types.Log) (*ARMContractSkippedUnvoteToCurse, error) {
	event := new(ARMContractSkippedUnvoteToCurse)
	if err := _ARMContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractTaggedRootBlessVotesResetIterator struct {
	Event *ARMContractTaggedRootBlessVotesReset

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractTaggedRootBlessVotesResetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractTaggedRootBlessVotesReset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractTaggedRootBlessVotesReset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractTaggedRootBlessVotesResetIterator) Error() error {
	return it.fail
}

func (it *ARMContractTaggedRootBlessVotesResetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractTaggedRootBlessVotesReset struct {
	ConfigVersion uint32
	TaggedRoot    IRMNTaggedRoot
	WasBlessed    bool
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterTaggedRootBlessVotesReset(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractTaggedRootBlessVotesResetIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "TaggedRootBlessVotesReset", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractTaggedRootBlessVotesResetIterator{contract: _ARMContract.contract, event: "TaggedRootBlessVotesReset", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchTaggedRootBlessVotesReset(opts *bind.WatchOpts, sink chan<- *ARMContractTaggedRootBlessVotesReset, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "TaggedRootBlessVotesReset", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractTaggedRootBlessVotesReset)
				if err := _ARMContract.contract.UnpackLog(event, "TaggedRootBlessVotesReset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseTaggedRootBlessVotesReset(log types.Log) (*ARMContractTaggedRootBlessVotesReset, error) {
	event := new(ARMContractTaggedRootBlessVotesReset)
	if err := _ARMContract.contract.UnpackLog(event, "TaggedRootBlessVotesReset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractTaggedRootBlessedIterator struct {
	Event *ARMContractTaggedRootBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractTaggedRootBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractTaggedRootBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractTaggedRootBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractTaggedRootBlessedIterator) Error() error {
	return it.fail
}

func (it *ARMContractTaggedRootBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractTaggedRootBlessed struct {
	ConfigVersion     uint32
	TaggedRoot        IRMNTaggedRoot
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_ARMContract *ARMContractFilterer) FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractTaggedRootBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractTaggedRootBlessedIterator{contract: _ARMContract.contract, event: "TaggedRootBlessed", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *ARMContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractTaggedRootBlessed)
				if err := _ARMContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseTaggedRootBlessed(log types.Log) (*ARMContractTaggedRootBlessed, error) {
	event := new(ARMContractTaggedRootBlessed)
	if err := _ARMContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractUnvotedToCurseIterator struct {
	Event *ARMContractUnvotedToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractUnvotedToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractUnvotedToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractUnvotedToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractUnvotedToCurseIterator) Error() error {
	return it.fail
}

func (it *ARMContractUnvotedToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractUnvotedToCurse struct {
	ConfigVersion uint32
	Voter         common.Address
	Weight        uint8
	VoteCount     uint32
	CursesHash    [32]byte
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterUnvotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractUnvotedToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "UnvotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractUnvotedToCurseIterator{contract: _ARMContract.contract, event: "UnvotedToCurse", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchUnvotedToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractUnvotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "UnvotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractUnvotedToCurse)
				if err := _ARMContract.contract.UnpackLog(event, "UnvotedToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseUnvotedToCurse(log types.Log) (*ARMContractUnvotedToCurse, error) {
	event := new(ARMContractUnvotedToCurse)
	if err := _ARMContract.contract.UnpackLog(event, "UnvotedToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractVotedToBlessIterator struct {
	Event *ARMContractVotedToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractVotedToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractVotedToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractVotedToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractVotedToBlessIterator) Error() error {
	return it.fail
}

func (it *ARMContractVotedToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractVotedToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IRMNTaggedRoot
	Weight        uint8
	Raw           types.Log
}

func (_ARMContract *ARMContractFilterer) FilterVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractVotedToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "VotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractVotedToBlessIterator{contract: _ARMContract.contract, event: "VotedToBless", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchVotedToBless(opts *bind.WatchOpts, sink chan<- *ARMContractVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "VotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractVotedToBless)
				if err := _ARMContract.contract.UnpackLog(event, "VotedToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseVotedToBless(log types.Log) (*ARMContractVotedToBless, error) {
	event := new(ARMContractVotedToBless)
	if err := _ARMContract.contract.UnpackLog(event, "VotedToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ARMContractVotedToCurseIterator struct {
	Event *ARMContractVotedToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ARMContractVotedToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ARMContractVotedToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ARMContractVotedToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ARMContractVotedToCurseIterator) Error() error {
	return it.fail
}

func (it *ARMContractVotedToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ARMContractVotedToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CurseId           [32]byte
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_ARMContract *ARMContractFilterer) FilterVotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractVotedToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.FilterLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ARMContractVotedToCurseIterator{contract: _ARMContract.contract, event: "VotedToCurse", logs: logs, sub: sub}, nil
}

func (_ARMContract *ARMContractFilterer) WatchVotedToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractVotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _ARMContract.contract.WatchLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ARMContractVotedToCurse)
				if err := _ARMContract.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ARMContract *ARMContractFilterer) ParseVotedToCurse(log types.Log) (*ARMContractVotedToCurse, error) {
	event := new(ARMContractVotedToCurse)
	if err := _ARMContract.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBlessProgress struct {
	BlessVoteAddrs    []common.Address
	AccumulatedWeight uint16
	Blessed           bool
}
type GetConfigDetails struct {
	Version     uint32
	BlockNumber uint32
	Config      RMNConfig
}
type GetCurseProgress struct {
	CurseVoteAddrs    []common.Address
	VoteCounts        []uint32
	CursesHashes      [][32]byte
	AccumulatedWeight uint16
	Cursed            bool
}

func (_ARMContract *ARMContract) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _ARMContract.abi.Events["AlreadyBlessed"].ID:
		return _ARMContract.ParseAlreadyBlessed(log)
	case _ARMContract.abi.Events["AlreadyVotedToBless"].ID:
		return _ARMContract.ParseAlreadyVotedToBless(log)
	case _ARMContract.abi.Events["ConfigSet"].ID:
		return _ARMContract.ParseConfigSet(log)
	case _ARMContract.abi.Events["Cursed"].ID:
		return _ARMContract.ParseCursed(log)
	case _ARMContract.abi.Events["OwnerCursed"].ID:
		return _ARMContract.ParseOwnerCursed(log)
	case _ARMContract.abi.Events["OwnershipTransferRequested"].ID:
		return _ARMContract.ParseOwnershipTransferRequested(log)
	case _ARMContract.abi.Events["OwnershipTransferred"].ID:
		return _ARMContract.ParseOwnershipTransferred(log)
	case _ARMContract.abi.Events["RecoveredFromCurse"].ID:
		return _ARMContract.ParseRecoveredFromCurse(log)
	case _ARMContract.abi.Events["ReusedVotesToCurse"].ID:
		return _ARMContract.ParseReusedVotesToCurse(log)
	case _ARMContract.abi.Events["SkippedUnvoteToCurse"].ID:
		return _ARMContract.ParseSkippedUnvoteToCurse(log)
	case _ARMContract.abi.Events["TaggedRootBlessVotesReset"].ID:
		return _ARMContract.ParseTaggedRootBlessVotesReset(log)
	case _ARMContract.abi.Events["TaggedRootBlessed"].ID:
		return _ARMContract.ParseTaggedRootBlessed(log)
	case _ARMContract.abi.Events["UnvotedToCurse"].ID:
		return _ARMContract.ParseUnvotedToCurse(log)
	case _ARMContract.abi.Events["VotedToBless"].ID:
		return _ARMContract.ParseVotedToBless(log)
	case _ARMContract.abi.Events["VotedToCurse"].ID:
		return _ARMContract.ParseVotedToCurse(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ARMContractAlreadyBlessed) Topic() common.Hash {
	return common.HexToHash("0x274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf1")
}

func (ARMContractAlreadyVotedToBless) Topic() common.Hash {
	return common.HexToHash("0x6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead")
}

func (ARMContractConfigSet) Topic() common.Hash {
	return common.HexToHash("0x7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd")
}

func (ARMContractCursed) Topic() common.Hash {
	return common.HexToHash("0x6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e333")
}

func (ARMContractOwnerCursed) Topic() common.Hash {
	return common.HexToHash("0x367ba81ba03ea9fa7ee089ecfb43b1c35e0935bc87a472abf615b7580dc16b79")
}

func (ARMContractOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (ARMContractOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (ARMContractRecoveredFromCurse) Topic() common.Hash {
	return common.HexToHash("0x08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb7")
}

func (ARMContractReusedVotesToCurse) Topic() common.Hash {
	return common.HexToHash("0xb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03")
}

func (ARMContractSkippedUnvoteToCurse) Topic() common.Hash {
	return common.HexToHash("0xf4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a53")
}

func (ARMContractTaggedRootBlessVotesReset) Topic() common.Hash {
	return common.HexToHash("0x7d15a6eebaa019ea7d5b7d38937c51ebd3befbfdf51bb630a694fd28635bbcba")
}

func (ARMContractTaggedRootBlessed) Topic() common.Hash {
	return common.HexToHash("0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9")
}

func (ARMContractUnvotedToCurse) Topic() common.Hash {
	return common.HexToHash("0x56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade225")
}

func (ARMContractVotedToBless) Topic() common.Hash {
	return common.HexToHash("0x2a08a2bd2798f0aae9a843f0f4ad4de488c1b3d5f04049940cfed736ad69fb97")
}

func (ARMContractVotedToCurse) Topic() common.Hash {
	return common.HexToHash("0x8e5ceca76dae647f687fccbe8d42a3796e68330812669bd5003b938dacb1b6dd")
}

func (_ARMContract *ARMContract) Address() common.Address {
	return _ARMContract.address
}

type ARMContractInterface interface {
	GetBlessProgress(opts *bind.CallOpts, taggedRoot IRMNTaggedRoot) (GetBlessProgress,

		error)

	GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

		error)

	GetCurseProgress(opts *bind.CallOpts) (GetCurseProgress,

		error)

	IsBlessed(opts *bind.CallOpts, taggedRoot IRMNTaggedRoot) (bool, error)

	IsCursed(opts *bind.CallOpts, arg0 [16]byte) (bool, error)

	IsCursed0(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	OwnerCurse(opts *bind.TransactOpts) (*types.Transaction, error)

	OwnerResetBlessVotes(opts *bind.TransactOpts, taggedRoots []IRMNTaggedRoot) (*types.Transaction, error)

	OwnerUnvoteToCurse(opts *bind.TransactOpts, unvoteRecords []RMNUnvoteToCurseRecord) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config RMNConfig) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error)

	VoteToBless(opts *bind.TransactOpts, taggedRoots []IRMNTaggedRoot) (*types.Transaction, error)

	VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error)

	FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractAlreadyBlessedIterator, error)

	WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *ARMContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyBlessed(log types.Log) (*ARMContractAlreadyBlessed, error)

	FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractAlreadyVotedToBlessIterator, error)

	WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *ARMContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyVotedToBless(log types.Log) (*ARMContractAlreadyVotedToBless, error)

	FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ARMContractConfigSet, configVersion []uint32) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*ARMContractConfigSet, error)

	FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractCursedIterator, error)

	WatchCursed(opts *bind.WatchOpts, sink chan<- *ARMContractCursed, configVersion []uint32) (event.Subscription, error)

	ParseCursed(log types.Log) (*ARMContractCursed, error)

	FilterOwnerCursed(opts *bind.FilterOpts) (*ARMContractOwnerCursedIterator, error)

	WatchOwnerCursed(opts *bind.WatchOpts, sink chan<- *ARMContractOwnerCursed) (event.Subscription, error)

	ParseOwnerCursed(log types.Log) (*ARMContractOwnerCursed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ARMContractOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ARMContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*ARMContractOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ARMContractOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ARMContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*ARMContractOwnershipTransferred, error)

	FilterRecoveredFromCurse(opts *bind.FilterOpts) (*ARMContractRecoveredFromCurseIterator, error)

	WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *ARMContractRecoveredFromCurse) (event.Subscription, error)

	ParseRecoveredFromCurse(log types.Log) (*ARMContractRecoveredFromCurse, error)

	FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractReusedVotesToCurseIterator, error)

	WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseReusedVotesToCurse(log types.Log) (*ARMContractReusedVotesToCurse, error)

	FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*ARMContractSkippedUnvoteToCurseIterator, error)

	WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error)

	ParseSkippedUnvoteToCurse(log types.Log) (*ARMContractSkippedUnvoteToCurse, error)

	FilterTaggedRootBlessVotesReset(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractTaggedRootBlessVotesResetIterator, error)

	WatchTaggedRootBlessVotesReset(opts *bind.WatchOpts, sink chan<- *ARMContractTaggedRootBlessVotesReset, configVersion []uint32) (event.Subscription, error)

	ParseTaggedRootBlessVotesReset(log types.Log) (*ARMContractTaggedRootBlessVotesReset, error)

	FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*ARMContractTaggedRootBlessedIterator, error)

	WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *ARMContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error)

	ParseTaggedRootBlessed(log types.Log) (*ARMContractTaggedRootBlessed, error)

	FilterUnvotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractUnvotedToCurseIterator, error)

	WatchUnvotedToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractUnvotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseUnvotedToCurse(log types.Log) (*ARMContractUnvotedToCurse, error)

	FilterVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractVotedToBlessIterator, error)

	WatchVotedToBless(opts *bind.WatchOpts, sink chan<- *ARMContractVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVotedToBless(log types.Log) (*ARMContractVotedToBless, error)

	FilterVotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*ARMContractVotedToCurseIterator, error)

	WatchVotedToCurse(opts *bind.WatchOpts, sink chan<- *ARMContractVotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVotedToCurse(log types.Log) (*ARMContractVotedToCurse, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
