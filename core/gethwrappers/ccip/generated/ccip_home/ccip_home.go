// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_home

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPHomeChainConfig struct {
	Readers [][32]byte
	FChain  uint8
	Config  []byte
}

type CCIPHomeChainConfigInfo struct {
	ChainSelector uint64
	ChainConfig   CCIPHomeChainConfig
}

type CCIPHomeOCR3Config struct {
	PluginType            uint8
	ChainSelector         uint64
	FRoleDON              uint8
	OffchainConfigVersion uint64
	OfframpAddress        []byte
	Nodes                 []CCIPHomeOCR3Node
	OffchainConfig        []byte
}

type CCIPHomeOCR3ConfigWithMeta struct {
	Config       CCIPHomeOCR3Config
	Version      uint64
	ConfigDigest [32]byte
}

type CCIPHomeOCR3Node struct {
	P2pId          [32]byte
	SignerKey      []byte
	TransmitterKey []byte
}

var CCIPHomeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilitiesRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FChainMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FRoleDON\",\"type\":\"uint256\"}],\"name\":\"FChainTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPHome.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPHome.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"transmitterKey\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.OCR3Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"name\":\"InvalidNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTransmitters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfframpAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilitiesRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"expectedPluginType\",\"type\":\"uint8\"},{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"gotPluginType\",\"type\":\"uint8\"}],\"name\":\"PluginTypeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPHome.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"FRoleDON\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offrampAddress\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"transmitterKey\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.OCR3Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIPHome.OCR3ConfigWithMeta[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainSelectorRemoves\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPHome.ChainConfigInfo[]\",\"name\":\"chainConfigAdds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPHome.ChainConfigInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapabilityRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumChainConfigurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"},{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"}],\"name\":\"getOCRConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"FRoleDON\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offrampAddress\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"transmitterKey\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.OCR3Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPHome.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIPHome.OCR3ConfigWithMeta[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162003ef938038062003ef98339810160408190526200003491620001a6565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000fb565b5050506001600160a01b038116620000e9576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0316608052620001d8565b336001600160a01b03821603620001555760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600060208284031215620001b957600080fd5b81516001600160a01b0381168114620001d157600080fd5b9392505050565b608051613cf7620002026000396000818161010301528181610e5c01526110c40152613cf76000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638318ed5d11610081578063f2fde38b1161005b578063f2fde38b14610230578063f442c89a14610243578063fba64a7c1461025657600080fd5b80638318ed5d146101d15780638da5cb5b146101f2578063b74b23561461021057600080fd5b80634bd0473f116100b25780634bd0473f1461019157806379ba5097146101b15780637ac0d41e146101bb57600080fd5b806301ffc9a7146100d9578063020330e614610101578063181f5a7714610148575b600080fd5b6100ec6100e7366004612acd565b610269565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b6101846040518060400160405280601281526020017f43434950486f6d6520312e362e302d646576000000000000000000000000000081525081565b6040516100f89190612b73565b6101a461019f366004612bb7565b610302565b6040516100f89190612cdb565b6101b96106fd565b005b6101c36107ff565b6040519081526020016100f8565b6101846101df366004612e4d565b5060408051602081019091526000815290565b60005473ffffffffffffffffffffffffffffffffffffffff16610123565b61022361021e366004612e6a565b610810565b6040516100f89190612efa565b6101b961023e366004612f8a565b610a91565b6101b961025136600461300c565b610aa5565b6101b9610264366004613090565b610e44565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f78bea7210000000000000000000000000000000000000000000000000000000014806102fc57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b63ffffffff8216600090815260056020526040812060609183600181111561032c5761032c612bec565b600181111561033d5761033d612bec565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156106f157600084815260209020604080516101408101909152600684029091018054829060608201908390829060ff1660018111156103b0576103b0612bec565b60018111156103c1576103c1612bec565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a01000000000000000000009091041660608201526001820180546080909201916104199061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546104459061314d565b80156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156106205783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546104fd9061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546105299061314d565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b5050505050815260200160028201805461058f9061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb9061314d565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b505050505081525050815260200190600101906104c0565b5050505081526020016003820180546106389061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546106649061314d565b80156106b15780601f10610686576101008083540402835291602001916106b1565b820191906000526020600020905b81548152906001019060200180831161069457829003601f168201915b505050919092525050508152600482015467ffffffffffffffff16602080830191909152600590920154604090910152908252600192909201910161036b565b50505050905092915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600061080b6003610ef7565b905090565b6060600061081e6003610ef7565b9050600061082c84866131cf565b905083158061083b5750818110155b1561087b576040805160008082526020820190925290610871565b61085e6128c7565b8152602001906001900390816108565790505b50925050506102fc565b60006108878583613215565b9050828111156108945750815b60006108a08383613228565b67ffffffffffffffff8111156108b8576108b86131e6565b6040519080825280602002602001820160405280156108f157816020015b6108de6128c7565b8152602001906001900390816108d65790505b50905060006109006003610f01565b9050835b83811015610a845760008282815181106109205761092061323b565b60209081029190910181015160408051808201825267ffffffffffffffff8316808252600090815260028552829020825181546080818802830181019095526060820181815295975092958601949093919284928491908401828280156109a657602002820191906000526020600020905b815481526020019060010190808311610992575b5050509183525050600182015460ff1660208201526002820180546040909201916109d09061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546109fc9061314d565b8015610a495780601f10610a1e57610100808354040283529160200191610a49565b820191906000526020600020905b815481529060010190602001808311610a2c57829003601f168201915b50505091909252505050905284610a608885613228565b81518110610a7057610a7061323b565b602090810291909101015250600101610904565b5090979650505050505050565b610a99610f15565b610aa281610f98565b50565b610aad610f15565b60005b83811015610c9357610af4858583818110610acd57610acd61323b565b9050602002016020810190610ae2919061326a565b60039067ffffffffffffffff1661108d565b610b5e57848482818110610b0a57610b0a61323b565b9050602002016020810190610b1f919061326a565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260240161077a565b60026000868684818110610b7457610b7461323b565b9050602002016020810190610b89919061326a565b67ffffffffffffffff1681526020810191909152604001600090812090610bb0828261290f565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610be860028301600061292d565b5050610c26858583818110610bff57610bff61323b565b9050602002016020810190610c14919061326a565b60039067ffffffffffffffff166110a5565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0858583818110610c5a57610c5a61323b565b9050602002016020810190610c6f919061326a565b60405167ffffffffffffffff909116815260200160405180910390a1600101610ab0565b5060005b81811015610e3d576000838383818110610cb357610cb361323b565b9050602002810190610cc59190613285565b610cd39060208101906132c3565b610cdc90613455565b90506000848484818110610cf257610cf261323b565b9050602002810190610d049190613285565b610d1290602081019061326a565b9050610d2182600001516110b1565b816020015160ff16600003610d62576040517fa9b3766e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff81166000908152600260209081526040909120835180518593610d92928492910190612967565b5060208201516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff90921691909117905560408201516002820190610ddf908261357d565b50610df991506003905067ffffffffffffffff83166111fd565b507f05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e08183604051610e2b929190613697565b60405180910390a15050600101610c97565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610eb3576040517fac7a7efd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ec285870187613944565b8151919350915015610eda57610eda83600084611209565b805115610eed57610eed83600183611209565b5050505050505050565b60006102fc825490565b60606000610f0e83611a57565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161077a565b565b3373ffffffffffffffffffffffffffffffffffffffff821603611017576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161077a565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008181526001830160205260408120541515610f0e565b6000610f0e8383611ab3565b60005b81518110156111f95760008019167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350c946fe8484815181106111105761111061323b565b60200260200101516040518263ffffffff1660e01b815260040161113691815260200190565b600060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111999190810190613a12565b60800151036111f1578181815181106111b4576111b461323b565b60200260200101516040517f8907a4fa00000000000000000000000000000000000000000000000000000000815260040161077a91815260200190565b6001016110b4565b5050565b6000610f0e8383611bad565b80516002101561124a5780516040517f3e47852600000000000000000000000000000000000000000000000000000000815260040161077a91815260200190565b63ffffffff831660009081526005602052604081208184600181111561127257611272612bec565b600181111561128357611283612bec565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561163757600084815260209020604080516101408101909152600684029091018054829060608201908390829060ff1660018111156112f6576112f6612bec565b600181111561130757611307612bec565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a010000000000000000000090910416606082015260018201805460809092019161135f9061314d565b80601f016020809104026020016040519081016040528092919081815260200182805461138b9061314d565b80156113d85780601f106113ad576101008083540402835291602001916113d8565b820191906000526020600020905b8154815290600101906020018083116113bb57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156115665783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546114439061314d565b80601f016020809104026020016040519081016040528092919081815260200182805461146f9061314d565b80156114bc5780601f10611491576101008083540402835291602001916114bc565b820191906000526020600020905b81548152906001019060200180831161149f57829003601f168201915b505050505081526020016002820180546114d59061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546115019061314d565b801561154e5780601f106115235761010080835404028352916020019161154e565b820191906000526020600020905b81548152906001019060200180831161153157829003601f168201915b50505050508152505081526020019060010190611406565b50505050815260200160038201805461157e9061314d565b80601f01602080910402602001604051908101604052809291908181526020018280546115aa9061314d565b80156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b505050919092525050508152600482015467ffffffffffffffff1660208083019190915260059092015460409091015290825260019290920191016112b1565b505050509050600061164a858385611bfc565b90506116568282612008565b63ffffffff851660009081526005602052604081209085600181111561167e5761167e612bec565b600181111561168f5761168f612bec565b815260200190815260200160002060006116a991906129b2565b60005b81518110156119fc5760008282815181106116c9576116c961323b565b60200260200101516000015190508560018111156116e9576116e9612bec565b815160018111156116fc576116fc612bec565b1461175a578282815181106117135761171361323b565b6020026020010151604001518682600001516040517f4e9bea2d00000000000000000000000000000000000000000000000000000000815260040161077a93929190613aea565b63ffffffff871660009081526005602052604081208188600181111561178257611782612bec565b600181111561179357611793612bec565b815260200190815260200160002060018160018154018082558091505003906000526020600020906006020190508383815181106117d3576117d361323b565b60200260200101516040015181600501819055508383815181106117f9576117f961323b565b60209081029190910181015101516004820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9092169190911790558151815482919082907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001838181111561187f5761187f612bec565b021790555060208301518154604085015160608601517fffffffffffffffffffffffffffffffffffffffffffff000000000000000000ff90921661010067ffffffffffffffff948516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff1617690100000000000000000060ff90921691909102177fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a010000000000000000000092909116919091021781556080830151600182019061194e908261357d565b5060c08301516003820190611963908261357d565b5060005b8360a00151518110156119ed57816002018460a00151828151811061198e5761198e61323b565b60209081029190910181015182546001818101855560009485529383902082516003909202019081559181015190928201906119ca908261357d565b50604082015160028201906119df908261357d565b505050806001019050611967565b505050508060010190506116ac565b50836001811115611a0f57611a0f612bec565b60ff168563ffffffff167f0fe4c45ffc7f05233ddfee7d79ac01d075176a0aa116068c486a2f7490088a0b83604051611a489190612cdb565b60405180910390a35050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611aa757602002820191906000526020600020905b815481526020019060010190808311611a93575b50505050509050919050565b60008181526001830160205260408120548015611b9c576000611ad7600183613228565b8554909150600090611aeb90600190613228565b9050808214611b50576000866000018281548110611b0b57611b0b61323b565b9060005260206000200154905080876000018481548110611b2e57611b2e61323b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b6157611b61613b0b565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102fc565b60009150506102fc565b5092915050565b6000818152600183016020526040812054611bf4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102fc565b5060006102fc565b6060600083516002811115611c1357611c13612bec565b9050600083516002811115611c2a57611c2a612bec565b9050611c368282612387565b6000845167ffffffffffffffff811115611c5257611c526131e6565b604051908082528060200260200182016040528015611c7b578160200160208202803683370190505b5090506000836002811115611c9257611c92612bec565b148015611cb057506001826002811115611cae57611cae612bec565b145b15611cf157600181600081518110611cca57611cca61323b565b602002602001019067ffffffffffffffff16908167ffffffffffffffff1681525050611e59565b6001836002811115611d0557611d05612bec565b148015611d2357506002826002811115611d2157611d21612bec565b145b15611dba5785600081518110611d3b57611d3b61323b565b60200260200101516020015181600081518110611d5a57611d5a61323b565b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505085600081518110611d8f57611d8f61323b565b6020026020010151602001516001611da79190613b3a565b81600181518110611cca57611cca61323b565b6002836002811115611dce57611dce612bec565b148015611dec57506001826002811115611dea57611dea612bec565b145b15611e235785600181518110611e0457611e0461323b565b60200260200101516020015181600081518110611cca57611cca61323b565b82826040517f0a6b675b00000000000000000000000000000000000000000000000000000000815260040161077a929190613b6b565b6000855167ffffffffffffffff811115611e7557611e756131e6565b604051908082528060200260200182016040528015611f1357816020015b6040805161014081018252600060608083018281526080840183905260a0840183905260c0840183905260e084018290526101008401829052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181611e935790505b50905060005b8251811015611ffc57611f44878281518110611f3757611f3761323b565b602002602001015161240d565b6040518060600160405280888381518110611f6157611f6161323b565b60200260200101518152602001848381518110611f8057611f8061323b565b602002602001015167ffffffffffffffff168152602001611fd48b868581518110611fad57611fad61323b565b60200260200101518b8681518110611fc757611fc761323b565b6020026020010151612807565b815250828281518110611fe957611fe961323b565b6020908102919091010152600101611f19565b50979650505050505050565b815181518115801561201a5750806001145b156120bc57826000815181106120325761203261323b565b60200260200101516020015167ffffffffffffffff166001146120b657826000815181106120625761206261323b565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526001602482015260440161077a565b50505050565b8160011480156120cc5750806002145b1561228257836000815181106120e4576120e461323b565b602002602001015160400151836000815181106121035761210361323b565b6020026020010151604001511461218f57826000815181106121275761212761323b565b602002602001015160400151846000815181106121465761214661323b565b6020026020010151604001516040517fc7ccdd7f00000000000000000000000000000000000000000000000000000000815260040161077a929190918252602082015260400190565b836000815181106121a2576121a261323b565b60200260200101516020015160016121ba9190613b3a565b67ffffffffffffffff16836001815181106121d7576121d761323b565b60200260200101516020015167ffffffffffffffff16146120b657826001815181106122055761220561323b565b602002602001015160200151846000815181106122245761222461323b565b602002602001015160200151600161223c9190613b3a565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015260440161077a565b8160021480156122925750806001145b1561235557836001815181106122aa576122aa61323b565b602002602001015160400151836000815181106122c9576122c961323b565b602002602001015160400151146120b657826000815181106122ed576122ed61323b565b6020026020010151604001518460018151811061230c5761230c61323b565b6020026020010151604001516040517f9e97567000000000000000000000000000000000000000000000000000000000815260040161077a929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082600281111561239b5761239b612bec565b8260028111156123ad576123ad612bec565b6123b79190613b86565b905080600114806124035750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1480156124035750600283600281111561240157612401612bec565b145b15611e2357505050565b806020015167ffffffffffffffff16600003612455576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151600181111561246a5761246a612bec565b1415801561248b575060018151600181111561248857612488612bec565b14155b156124c2576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101515115806124ff575060408051600060208201520160405160208183030381529060405280519060200120816080015180519060200120145b15612536576040517f358c192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516125519060039067ffffffffffffffff1661108d565b6125995760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260240161077a565b60408082015160208084015167ffffffffffffffff1660009081526002909152919091206001015460ff91821691168181111561260c576040517f2db22040000000000000000000000000000000000000000000000000000000008152600481018290526024810183905260440161077a565b60a08301515161010081111561264e576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6126598360036131cf565b8111612691576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808267ffffffffffffffff8111156126ad576126ad6131e6565b6040519080825280602002602001820160405280156126d6578160200160208202803683370190505b50905060005b838110156127965760008760a0015182815181106126fc576126fc61323b565b60200260200101519050806040015151600014612721578361271d81613ba6565b9450505b602081015151158061273257508051155b1561276b57806040517f9fa4031400000000000000000000000000000000000000000000000000000000815260040161077a9190613bde565b80600001518383815181106127825761278261323b565b6020908102919091010152506001016126dc565b5060006127a48560036131cf565b6127af906001613215565b9050808310156127f5576040517f548dd21f000000000000000000000000000000000000000000000000000000008152600481018490526024810182905260440161077a565b6127fe826110b1565b50505050505050565b60008082602001518584600001518560800151878760a00151886040015189606001518a60c0015160405160200161284799989796959493929190613bf1565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e0a0000000000000000000000000000000000000000000000000000000000001795945050505050565b6040518060400160405280600067ffffffffffffffff16815260200161290a604051806060016040528060608152602001600060ff168152602001606081525090565b905290565b5080546000825590600052602060002090810190610aa291906129d3565b5080546129399061314d565b6000825580601f10612949575050565b601f016020900490600052602060002090810190610aa291906129d3565b8280548282559060005260206000209081019282156129a2579160200282015b828111156129a2578251825591602001919060010190612987565b506129ae9291506129d3565b5090565b5080546000825560060290600052602060002090810190610aa291906129e8565b5b808211156129ae57600081556001016129d4565b808211156129ae5780547fffffffffffffffffffffffffffff00000000000000000000000000000000000016815560008181612a27600183018261292d565b612a35600283016000612a7f565b612a4360038301600061292d565b5050506004810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055600060058201556006016129e8565b5080546000825560030290600052602060002090810190610aa291905b808211156129ae576000808255612ab6600183018261292d565b612ac460028301600061292d565b50600301612a9c565b600060208284031215612adf57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f0e57600080fd5b6000815180845260005b81811015612b3557602081850181015186830182015201612b19565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610f0e6020830184612b0f565b63ffffffff81168114610aa257600080fd5b8035612ba381612b86565b919050565b803560028110612ba357600080fd5b60008060408385031215612bca57600080fd5b8235612bd581612b86565b9150612be360208401612ba8565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612c2b57612c2b612bec565b9052565b805182526000602082015160606020850152612c4e6060850182612b0f565b905060408301518482036040860152612c678282612b0f565b95945050505050565b60008282518085526020808601955060208260051b8401016020860160005b84811015610a84577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952612cc9838351612c2f565b98840198925090830190600101612c8f565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612e3f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160608151818652612d498287018251612c1b565b89810151608067ffffffffffffffff8216818901528a830151915060a060ff8316818a015284840151945060c09250612d8d838a018667ffffffffffffffff169052565b81840151945060e0915081828a0152612daa6101408a0186612b0f565b9450808401519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa080898603016101008a0152612de98583612c70565b9290930151888303909301610120890152509150612e078282612b0f565b91505088820151612e238a87018267ffffffffffffffff169052565b5090870151938701939093529386019390860190600101612d04565b509098975050505050505050565b600060208284031215612e5f57600080fd5b8135610f0e81612b86565b60008060408385031215612e7d57600080fd5b50508035926020909101359150565b805160608084528151908401819052600091602091908201906080860190845b81811015612ec857835183529284019291840191600101612eac565b505060ff6020860151166020870152604085015192508581036040870152612ef08184612b0f565b9695505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612e3f578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805167ffffffffffffffff168452870151878401879052612f7787850182612e8c565b9588019593505090860190600101612f23565b600060208284031215612f9c57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610f0e57600080fd5b60008083601f840112612fd257600080fd5b50813567ffffffffffffffff811115612fea57600080fd5b6020830191508360208260051b850101111561300557600080fd5b9250929050565b6000806000806040858703121561302257600080fd5b843567ffffffffffffffff8082111561303a57600080fd5b61304688838901612fc0565b9096509450602087013591508082111561305f57600080fd5b5061306c87828801612fc0565b95989497509550505050565b803567ffffffffffffffff81168114612ba357600080fd5b600080600080600080608087890312156130a957600080fd5b863567ffffffffffffffff808211156130c157600080fd5b6130cd8a838b01612fc0565b909850965060208901359150808211156130e657600080fd5b818901915089601f8301126130fa57600080fd5b81358181111561310957600080fd5b8a602082850101111561311b57600080fd5b60208301965080955050505061313360408801613078565b915061314160608801612b98565b90509295509295509295565b600181811c9082168061316157607f821691505b60208210810361319a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102fc576102fc6131a0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b808201808211156102fc576102fc6131a0565b818103818111156102fc576102fc6131a0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561327c57600080fd5b610f0e82613078565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126132b957600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126132b957600080fd5b6040516060810167ffffffffffffffff8111828210171561331a5761331a6131e6565b60405290565b60405160e0810167ffffffffffffffff8111828210171561331a5761331a6131e6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561338a5761338a6131e6565b604052919050565b600067ffffffffffffffff8211156133ac576133ac6131e6565b5060051b60200190565b803560ff81168114612ba357600080fd5b600082601f8301126133d857600080fd5b813567ffffffffffffffff8111156133f2576133f26131e6565b61342360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613343565b81815284602083860101111561343857600080fd5b816020850160208301376000918101602001919091529392505050565b60006060823603121561346757600080fd5b61346f6132f7565b823567ffffffffffffffff8082111561348757600080fd5b9084019036601f83011261349a57600080fd5b813560206134af6134aa83613392565b613343565b82815260059290921b840181019181810190368411156134ce57600080fd5b948201945b838610156134ec578535825294820194908201906134d3565b8652506134fa8782016133b6565b9085015250604085013591508082111561351357600080fd5b50613520368286016133c7565b60408301525092915050565b601f821115613578576000816000526020600020601f850160051c810160208610156135555750805b601f850160051c820191505b8181101561357457828155600101613561565b5050505b505050565b815167ffffffffffffffff811115613597576135976131e6565b6135ab816135a5845461314d565b8461352c565b602080601f8311600181146135fe57600084156135c85750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613574565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561364b5788860151825594840194600190910190840161362c565b508582101561368757878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff831681526040602082015260006136ba6040830184612e8c565b949350505050565b600082601f8301126136d357600080fd5b813560206136e36134aa83613392565b82815260059290921b8401810191818101908684111561370257600080fd5b8286015b848110156137ca57803567ffffffffffffffff808211156137275760008081fd5b81890191506060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156137605760008081fd5b6137686132f7565b878401358152604080850135848111156137825760008081fd5b6137908e8b838901016133c7565b838b0152509184013591838311156137a85760008081fd5b6137b68d8a858801016133c7565b908201528652505050918301918301613706565b509695505050505050565b600082601f8301126137e657600080fd5b813560206137f66134aa83613392565b82815260059290921b8401810191818101908684111561381557600080fd5b8286015b848110156137ca57803567ffffffffffffffff8082111561383a5760008081fd5b818901915060e0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156138735760008081fd5b61387b613320565b613886888501612ba8565b81526040613895818601613078565b8983015260606138a68187016133b6565b82840152608091506138b9828701613078565b9083015260a085810135858111156138d15760008081fd5b6138df8f8c838a01016133c7565b838501525060c0915081860135858111156138fa5760008081fd5b6139088f8c838a01016136c2565b828501525050828501359250838311156139225760008081fd5b6139308d8a858801016133c7565b908201528652505050918301918301613819565b6000806040838503121561395757600080fd5b823567ffffffffffffffff8082111561396f57600080fd5b61397b868387016137d5565b9350602085013591508082111561399157600080fd5b5061399e858286016137d5565b9150509250929050565b8051612ba381612b86565b600082601f8301126139c457600080fd5b815160206139d46134aa83613392565b8083825260208201915060208460051b8701019350868411156139f657600080fd5b602086015b848110156137ca57805183529183019183016139fb565b600060208284031215613a2457600080fd5b815167ffffffffffffffff80821115613a3c57600080fd5b9083019060e08286031215613a5057600080fd5b613a58613320565b613a61836139a8565b8152613a6f602084016139a8565b6020820152613a80604084016139a8565b6040820152606083015160608201526080830151608082015260a083015182811115613aab57600080fd5b613ab7878286016139b3565b60a08301525060c083015182811115613acf57600080fd5b613adb878286016139b3565b60c08301525095945050505050565b83815260608101613afe6020830185612c1b565b6136ba6040830184612c1b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b67ffffffffffffffff818116838216019080821115611ba657611ba66131a0565b60038110612c2b57612c2b612bec565b60408101613b798285613b5b565b610f0e6020830184613b5b565b8181036000831280158383131683831282161715611ba657611ba66131a0565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bd757613bd76131a0565b5060010190565b602081526000610f0e6020830184612c2f565b600061012067ffffffffffffffff808d168452602063ffffffff8d1681860152613c1e604086018d612c1b565b826060860152613c308386018c612b0f565b918a16608086015284820360a0860152885180835291925080830191600581901b84018201828b0160005b83811015613ca7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878403018652613c95838351612c2f565b95850195925090840190600101613c5b565b505060ff8a1660c088015267ffffffffffffffff891660e0880152868103610100880152613cd58189612b0f565b955050505050509a995050505050505050505056fea164736f6c6343000818000a",
}

var CCIPHomeABI = CCIPHomeMetaData.ABI

var CCIPHomeBin = CCIPHomeMetaData.Bin

func DeployCCIPHome(auth *bind.TransactOpts, backend bind.ContractBackend, capabilitiesRegistry common.Address) (common.Address, *types.Transaction, *CCIPHome, error) {
	parsed, err := CCIPHomeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPHomeBin), backend, capabilitiesRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPHome{address: address, abi: *parsed, CCIPHomeCaller: CCIPHomeCaller{contract: contract}, CCIPHomeTransactor: CCIPHomeTransactor{contract: contract}, CCIPHomeFilterer: CCIPHomeFilterer{contract: contract}}, nil
}

type CCIPHome struct {
	address common.Address
	abi     abi.ABI
	CCIPHomeCaller
	CCIPHomeTransactor
	CCIPHomeFilterer
}

type CCIPHomeCaller struct {
	contract *bind.BoundContract
}

type CCIPHomeTransactor struct {
	contract *bind.BoundContract
}

type CCIPHomeFilterer struct {
	contract *bind.BoundContract
}

type CCIPHomeSession struct {
	Contract     *CCIPHome
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPHomeCallerSession struct {
	Contract *CCIPHomeCaller
	CallOpts bind.CallOpts
}

type CCIPHomeTransactorSession struct {
	Contract     *CCIPHomeTransactor
	TransactOpts bind.TransactOpts
}

type CCIPHomeRaw struct {
	Contract *CCIPHome
}

type CCIPHomeCallerRaw struct {
	Contract *CCIPHomeCaller
}

type CCIPHomeTransactorRaw struct {
	Contract *CCIPHomeTransactor
}

func NewCCIPHome(address common.Address, backend bind.ContractBackend) (*CCIPHome, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPHomeABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPHome(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPHome{address: address, abi: abi, CCIPHomeCaller: CCIPHomeCaller{contract: contract}, CCIPHomeTransactor: CCIPHomeTransactor{contract: contract}, CCIPHomeFilterer: CCIPHomeFilterer{contract: contract}}, nil
}

func NewCCIPHomeCaller(address common.Address, caller bind.ContractCaller) (*CCIPHomeCaller, error) {
	contract, err := bindCCIPHome(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeCaller{contract: contract}, nil
}

func NewCCIPHomeTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPHomeTransactor, error) {
	contract, err := bindCCIPHome(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeTransactor{contract: contract}, nil
}

func NewCCIPHomeFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPHomeFilterer, error) {
	contract, err := bindCCIPHome(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeFilterer{contract: contract}, nil
}

func bindCCIPHome(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPHomeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPHome *CCIPHomeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPHome.Contract.CCIPHomeCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPHome *CCIPHomeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPHome.Contract.CCIPHomeTransactor.contract.Transfer(opts)
}

func (_CCIPHome *CCIPHomeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPHome.Contract.CCIPHomeTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPHome *CCIPHomeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPHome.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPHome *CCIPHomeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPHome.Contract.contract.Transfer(opts)
}

func (_CCIPHome *CCIPHomeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPHome.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPHome *CCIPHomeCaller) GetAllChainConfigs(opts *bind.CallOpts, pageIndex *big.Int, pageSize *big.Int) ([]CCIPHomeChainConfigInfo, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "getAllChainConfigs", pageIndex, pageSize)

	if err != nil {
		return *new([]CCIPHomeChainConfigInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPHomeChainConfigInfo)).(*[]CCIPHomeChainConfigInfo)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) GetAllChainConfigs(pageIndex *big.Int, pageSize *big.Int) ([]CCIPHomeChainConfigInfo, error) {
	return _CCIPHome.Contract.GetAllChainConfigs(&_CCIPHome.CallOpts, pageIndex, pageSize)
}

func (_CCIPHome *CCIPHomeCallerSession) GetAllChainConfigs(pageIndex *big.Int, pageSize *big.Int) ([]CCIPHomeChainConfigInfo, error) {
	return _CCIPHome.Contract.GetAllChainConfigs(&_CCIPHome.CallOpts, pageIndex, pageSize)
}

func (_CCIPHome *CCIPHomeCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPHome.Contract.GetCapabilityConfiguration(&_CCIPHome.CallOpts, arg0)
}

func (_CCIPHome *CCIPHomeCallerSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPHome.Contract.GetCapabilityConfiguration(&_CCIPHome.CallOpts, arg0)
}

func (_CCIPHome *CCIPHomeCaller) GetCapabilityRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "getCapabilityRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) GetCapabilityRegistry() (common.Address, error) {
	return _CCIPHome.Contract.GetCapabilityRegistry(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCallerSession) GetCapabilityRegistry() (common.Address, error) {
	return _CCIPHome.Contract.GetCapabilityRegistry(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCaller) GetNumChainConfigurations(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "getNumChainConfigurations")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) GetNumChainConfigurations() (*big.Int, error) {
	return _CCIPHome.Contract.GetNumChainConfigurations(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCallerSession) GetNumChainConfigurations() (*big.Int, error) {
	return _CCIPHome.Contract.GetNumChainConfigurations(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCaller) GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPHomeOCR3ConfigWithMeta, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "getOCRConfig", donId, pluginType)

	if err != nil {
		return *new([]CCIPHomeOCR3ConfigWithMeta), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPHomeOCR3ConfigWithMeta)).(*[]CCIPHomeOCR3ConfigWithMeta)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPHomeOCR3ConfigWithMeta, error) {
	return _CCIPHome.Contract.GetOCRConfig(&_CCIPHome.CallOpts, donId, pluginType)
}

func (_CCIPHome *CCIPHomeCallerSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPHomeOCR3ConfigWithMeta, error) {
	return _CCIPHome.Contract.GetOCRConfig(&_CCIPHome.CallOpts, donId, pluginType)
}

func (_CCIPHome *CCIPHomeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) Owner() (common.Address, error) {
	return _CCIPHome.Contract.Owner(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCallerSession) Owner() (common.Address, error) {
	return _CCIPHome.Contract.Owner(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPHome.Contract.SupportsInterface(&_CCIPHome.CallOpts, interfaceId)
}

func (_CCIPHome *CCIPHomeCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPHome.Contract.SupportsInterface(&_CCIPHome.CallOpts, interfaceId)
}

func (_CCIPHome *CCIPHomeCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPHome.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPHome *CCIPHomeSession) TypeAndVersion() (string, error) {
	return _CCIPHome.Contract.TypeAndVersion(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeCallerSession) TypeAndVersion() (string, error) {
	return _CCIPHome.Contract.TypeAndVersion(&_CCIPHome.CallOpts)
}

func (_CCIPHome *CCIPHomeTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPHome.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPHome *CCIPHomeSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPHome.Contract.AcceptOwnership(&_CCIPHome.TransactOpts)
}

func (_CCIPHome *CCIPHomeTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPHome.Contract.AcceptOwnership(&_CCIPHome.TransactOpts)
}

func (_CCIPHome *CCIPHomeTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPHomeChainConfigInfo) (*types.Transaction, error) {
	return _CCIPHome.contract.Transact(opts, "applyChainConfigUpdates", chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPHome *CCIPHomeSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPHomeChainConfigInfo) (*types.Transaction, error) {
	return _CCIPHome.Contract.ApplyChainConfigUpdates(&_CCIPHome.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPHome *CCIPHomeTransactorSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPHomeChainConfigInfo) (*types.Transaction, error) {
	return _CCIPHome.Contract.ApplyChainConfigUpdates(&_CCIPHome.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPHome *CCIPHomeTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPHome.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPHome *CCIPHomeSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPHome.Contract.BeforeCapabilityConfigSet(&_CCIPHome.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPHome *CCIPHomeTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPHome.Contract.BeforeCapabilityConfigSet(&_CCIPHome.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPHome *CCIPHomeTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPHome.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPHome *CCIPHomeSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPHome.Contract.TransferOwnership(&_CCIPHome.TransactOpts, to)
}

func (_CCIPHome *CCIPHomeTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPHome.Contract.TransferOwnership(&_CCIPHome.TransactOpts, to)
}

type CCIPHomeCapabilityConfigurationSetIterator struct {
	Event *CCIPHomeCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPHomeCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPHomeCapabilityConfigurationSetIterator{contract: _CCIPHome.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeCapabilityConfigurationSet)
				if err := _CCIPHome.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPHomeCapabilityConfigurationSet, error) {
	event := new(CCIPHomeCapabilityConfigurationSet)
	if err := _CCIPHome.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPHomeChainConfigRemovedIterator struct {
	Event *CCIPHomeChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPHomeChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPHomeChainConfigRemovedIterator{contract: _CCIPHome.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPHomeChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeChainConfigRemoved)
				if err := _CCIPHome.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPHomeChainConfigRemoved, error) {
	event := new(CCIPHomeChainConfigRemoved)
	if err := _CCIPHome.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPHomeChainConfigSetIterator struct {
	Event *CCIPHomeChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPHomeChainConfig
	Raw           types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPHomeChainConfigSetIterator, error) {

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPHomeChainConfigSetIterator{contract: _CCIPHome.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeChainConfigSet)
				if err := _CCIPHome.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseChainConfigSet(log types.Log) (*CCIPHomeChainConfigSet, error) {
	event := new(CCIPHomeChainConfigSet)
	if err := _CCIPHome.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPHomeConfigSetIterator struct {
	Event *CCIPHomeConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeConfigSet struct {
	DonId      uint32
	PluginType uint8
	Config     []CCIPHomeOCR3ConfigWithMeta
	Raw        types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterConfigSet(opts *bind.FilterOpts, donId []uint32, pluginType []uint8) (*CCIPHomeConfigSetIterator, error) {

	var donIdRule []interface{}
	for _, donIdItem := range donId {
		donIdRule = append(donIdRule, donIdItem)
	}
	var pluginTypeRule []interface{}
	for _, pluginTypeItem := range pluginType {
		pluginTypeRule = append(pluginTypeRule, pluginTypeItem)
	}

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "ConfigSet", donIdRule, pluginTypeRule)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeConfigSetIterator{contract: _CCIPHome.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeConfigSet, donId []uint32, pluginType []uint8) (event.Subscription, error) {

	var donIdRule []interface{}
	for _, donIdItem := range donId {
		donIdRule = append(donIdRule, donIdItem)
	}
	var pluginTypeRule []interface{}
	for _, pluginTypeItem := range pluginType {
		pluginTypeRule = append(pluginTypeRule, pluginTypeItem)
	}

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "ConfigSet", donIdRule, pluginTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeConfigSet)
				if err := _CCIPHome.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseConfigSet(log types.Log) (*CCIPHomeConfigSet, error) {
	event := new(CCIPHomeConfigSet)
	if err := _CCIPHome.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPHomeOwnershipTransferRequestedIterator struct {
	Event *CCIPHomeOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPHomeOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeOwnershipTransferRequestedIterator{contract: _CCIPHome.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPHomeOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeOwnershipTransferRequested)
				if err := _CCIPHome.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPHomeOwnershipTransferRequested, error) {
	event := new(CCIPHomeOwnershipTransferRequested)
	if err := _CCIPHome.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPHomeOwnershipTransferredIterator struct {
	Event *CCIPHomeOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPHomeOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPHomeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPHomeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPHomeOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPHomeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPHomeOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPHome *CCIPHomeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPHomeOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPHome.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPHomeOwnershipTransferredIterator{contract: _CCIPHome.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPHome *CCIPHomeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPHomeOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPHome.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPHomeOwnershipTransferred)
				if err := _CCIPHome.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPHome *CCIPHomeFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPHomeOwnershipTransferred, error) {
	event := new(CCIPHomeOwnershipTransferred)
	if err := _CCIPHome.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPHome *CCIPHome) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPHome.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPHome.ParseCapabilityConfigurationSet(log)
	case _CCIPHome.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPHome.ParseChainConfigRemoved(log)
	case _CCIPHome.abi.Events["ChainConfigSet"].ID:
		return _CCIPHome.ParseChainConfigSet(log)
	case _CCIPHome.abi.Events["ConfigSet"].ID:
		return _CCIPHome.ParseConfigSet(log)
	case _CCIPHome.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPHome.ParseOwnershipTransferRequested(log)
	case _CCIPHome.abi.Events["OwnershipTransferred"].ID:
		return _CCIPHome.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPHomeCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPHomeChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPHomeChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e0")
}

func (CCIPHomeConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0fe4c45ffc7f05233ddfee7d79ac01d075176a0aa116068c486a2f7490088a0b")
}

func (CCIPHomeOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPHomeOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPHome *CCIPHome) Address() common.Address {
	return _CCIPHome.address
}

type CCIPHomeInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts, pageIndex *big.Int, pageSize *big.Int) ([]CCIPHomeChainConfigInfo, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error)

	GetCapabilityRegistry(opts *bind.CallOpts) (common.Address, error)

	GetNumChainConfigurations(opts *bind.CallOpts) (*big.Int, error)

	GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPHomeOCR3ConfigWithMeta, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPHomeChainConfigInfo) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPHomeCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPHomeCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPHomeChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPHomeChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPHomeChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPHomeChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPHomeChainConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts, donId []uint32, pluginType []uint8) (*CCIPHomeConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPHomeConfigSet, donId []uint32, pluginType []uint8) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CCIPHomeConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPHomeOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPHomeOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPHomeOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPHomeOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPHomeOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPHomeOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
