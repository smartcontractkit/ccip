// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package multi_commit_store

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IMultiCommitStoreSourceChainConfig struct {
	IsEnabled bool
	MinSeqNr  uint64
	OnRamp    common.Address
}

type InternalGasPriceUpdate struct {
	DestChainSelector uint64
	UsdPerUnitGas     *big.Int
}

type InternalPriceUpdates struct {
	TokenPriceUpdates []InternalTokenPriceUpdate
	GasPriceUpdates   []InternalGasPriceUpdate
}

type InternalTokenPriceUpdate struct {
	SourceToken common.Address
	UsdPerToken *big.Int
}

type MultiCommitStoreCommitReport struct {
	PriceUpdates InternalPriceUpdates
	MerkleRoots  []MultiCommitStoreMerkleRoot
}

type MultiCommitStoreDynamicConfig struct {
	PriceRegistry common.Address
}

type MultiCommitStoreInterval struct {
	Min uint64
	Max uint64
}

type MultiCommitStoreMerkleRoot struct {
	SourceChainSelector uint64
	Interval            MultiCommitStoreInterval
	MerkleRoot          [32]byte
}

type MultiCommitStoreSourceChainConfigArgs struct {
	SourceChainSelector uint64
	IsEnabled           bool
	MinSeqNr            uint64
	OnRamp              common.Address
}

type MultiCommitStoreStaticConfig struct {
	ChainSelector uint64
	ArmProxy      common.Address
}

type MultiCommitStoreUnblessedRoot struct {
	SourceChainSelector uint64
	MerkleRoot          [32]byte
}

var MultiCommitStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.SourceChainConfigArgs[]\",\"name\":\"sourceChainConfigs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadARMSignal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommitStoreConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structMultiCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidSourceChainConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeavesCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"RootAlreadyCommitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"SourceChainNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint224\",\"name\":\"usdPerToken\",\"type\":\"uint224\"}],\"internalType\":\"structInternal.TokenPriceUpdate[]\",\"name\":\"tokenPriceUpdates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint224\",\"name\":\"usdPerUnitGas\",\"type\":\"uint224\"}],\"internalType\":\"structInternal.GasPriceUpdate[]\",\"name\":\"gasPriceUpdates\",\"type\":\"tuple[]\"}],\"internalType\":\"structInternal.PriceUpdates\",\"name\":\"priceUpdates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structMultiCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiCommitStore.MerkleRoot[]\",\"name\":\"merkleRoots\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RootRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structIMultiCommitStore.SourceChainConfig\",\"name\":\"sourceChainConfig\",\"type\":\"tuple\"}],\"name\":\"SourceChainConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.SourceChainConfigArgs[]\",\"name\":\"sourceChainConfigs\",\"type\":\"tuple[]\"}],\"name\":\"applySourceChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.DynamicConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceEpochAndRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getOnRamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getSourceChainConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structIMultiCommitStore.SourceChainConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isARMHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnpausedAndARMHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiCommitStore.UnblessedRoot[]\",\"name\":\"rootToReset\",\"type\":\"tuple[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"latestPriceEpochAndRound\",\"type\":\"uint40\"}],\"name\":\"setLatestPriceEpochAndRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101006040526009805460ff60281b191690553480156200001f57600080fd5b50604051620042e0380380620042e0833981016040819052620000429162000580565b6000338082816200009a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000cd57620000cd816200014d565b50505015156080524660a05281516001600160401b03161580620000fc575060208201516001600160a01b0316155b156200011b57604051631fc5f15f60e11b815260040160405180910390fd5b81516001600160401b031660c05260208201516001600160a01b031660e0526200014581620001f8565b50506200071d565b336001600160a01b03821603620001a75760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000091565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6200020262000454565b60005b815181101562000450576000828281518110620002265762000226620006df565b6020026020010151905060006001600160a01b031681606001516001600160a01b031614806200025e575080516001600160401b0316155b156200028c5780516040516362977f8b60e11b81526001600160401b03909116600482015260240162000091565b80516001600160401b03166000908152600a6020526040902054690100000000000000000090046001600160a01b031680620003065781604001516001600160401b0316600114620003005781516040516362977f8b60e11b81526001600160401b03909116600482015260240162000091565b6200034c565b806001600160a01b031682606001516001600160a01b0316146200034c5781516040516362977f8b60e11b81526001600160401b03909116600482015260240162000091565b604080516060808201835260208581015115158352858401516001600160401b03908116828501908152878401516001600160a01b03908116868801908152895184166000908152600a865288902087518154855184518616690100000000000000000002600160481b600160e81b031991891661010002610100600160481b03199415159485166001600160481b0319909416939093179290921716179091558a51895191825293518516958101959095525116958301959095529293909216917fb0580f85d17935c257a3c1a9032df9bfa99d272e40027c8eb1b0ede2611c0b0b910160405180910390a2505050806200044890620006f5565b905062000205565b5050565b6000546001600160a01b03163314620004b05760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000091565b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620004ed57620004ed620004b2565b60405290565b604051608081016001600160401b0381118282101715620004ed57620004ed620004b2565b604051601f8201601f191681016001600160401b0381118282101715620005435762000543620004b2565b604052919050565b80516001600160401b03811681146200056357600080fd5b919050565b80516001600160a01b03811681146200056357600080fd5b6000808284036060808212156200059657600080fd5b604080831215620005a657600080fd5b620005b0620004c8565b9250620005bd866200054b565b83526020620005ce81880162000568565b84820152868201519395506001600160401b0380851115620005ef57600080fd5b848801945088601f8601126200060457600080fd5b845181811115620006195762000619620004b2565b62000629838260051b0162000518565b818152838101925060079190911b86018301908a8211156200064a57600080fd5b958301955b81871015620006ce576080878c0312156200066a5760008081fd5b62000674620004f3565b6200067f886200054b565b8152848801518015158114620006955760008081fd5b81860152620006a68887016200054b565b86820152620006b787890162000568565b81880152835260809690960195918301916200064f565b809750505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200071657634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e051613b586200078860003960008181610208015281816105ae015281816110f401528181611a2a01528181611c2301526120b60152600081816101cf0152611bf50152600081816112240152611270015260006112eb0152613b586000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806381ff7048116100ee578063b1dc65a411610097578063e9d68a8e11610071578063e9d68a8e146104a2578063f2fde38b14610571578063fe41448f14610584578063ff888fb11461059757600080fd5b8063b1dc65a41461045b578063ccd37ba31461046e578063d2a15d351461048f57600080fd5b80638db94e44116100c85780638db94e44146103e6578063a8d87a3b146103ee578063afcb95d71461043b57600080fd5b806381ff70481461036f5780638456cb591461039f5780638da5cb5b146103a757600080fd5b80633f4ba83a1161015057806372a15a091161012a57806372a15a09146103155780637437ff9f1461032857806379ba50971461036757600080fd5b80633f4ba83a146102e45780635c975abb146102ec578063666cab8d1461030057600080fd5b8063181f5a7711610181578063181f5a77146102735780631ef38174146102bc57806329b980e4146102d157600080fd5b806306285c69146101a85780630a6cd30d1461024257806310c374ed1461025a575b600080fd5b6040805180820182526000808252602091820152815180830190925267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016908201526040516102399190612aa3565b60405180910390f35b61024a6105aa565b6040519015158152602001610239565b60095460405164ffffffffff9091168152602001610239565b6102af6040518060400160405280601a81526020017f4d756c7469436f6d6d697453746f726520312e362e302d64657600000000000081525081565b6040516102399190612b3e565b6102cf6102ca366004612db4565b610641565b005b6102cf6102df366004612e81565b610e62565b6102cf610ea2565b60095465010000000000900460ff1661024a565b610308610f08565b6040516102399190612ef9565b6102cf610323366004612f1a565b610f77565b604080516020808201835260009091528151808201835260085473ffffffffffffffffffffffffffffffffffffffff1690819052915191825201610239565b6102cf610f8b565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610239565b6102cf611088565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610239565b61024a6110f0565b6103c16103fc366004613005565b67ffffffffffffffff166000908152600a60205260409020546901000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690565b604080516001815260006020820181905291810191909152606001610239565b6102cf61046936600461306c565b61119f565b61048161047c366004613151565b6117bf565b604051908152602001610239565b6102cf61049d36600461317b565b6117eb565b61052d6104b0366004613005565b60408051606080820183526000808352602080840182905292840181905267ffffffffffffffff9485168152600a8352839020835191820184525460ff811615158252610100810490941691810191909152690100000000000000000090920473ffffffffffffffffffffffffffffffffffffffff169082015290565b6040805182511515815260208084015167ffffffffffffffff16908201529181015173ffffffffffffffffffffffffffffffffffffffff1690820152606001610239565b6102cf61057f3660046131f0565b6118b2565b61048161059236600461320d565b6118c3565b61024a6105a5366004613296565b6119c7565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b91906132af565b15905090565b855185518560ff16601f8311156106b9576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610723576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016106b0565b8183146107b1576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016106b0565b6107bc8160036132fb565b8311610824576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016106b0565b61082c611a95565b61083586611b18565b60065460005b8181101561093157600560006006838154811061085a5761085a613312565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055600780546005929190849081106108ca576108ca613312565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905561092a81613341565b905061083b565b50895160005b81811015610d0a5760008c828151811061095357610953613312565b602002602001015190506000600281111561097057610970613379565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff1660028111156109af576109af613379565b14610a16576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016106b0565b73ffffffffffffffffffffffffffffffffffffffff8116610a63576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610b1357610b13613379565b021790555090505060008c8381518110610b2f57610b2f613312565b6020026020010151905060006002811115610b4c57610b4c613379565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610b8b57610b8b613379565b14610bf2576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016106b0565b73ffffffffffffffffffffffffffffffffffffffff8116610c3f576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610cef57610cef613379565b0217905550905050505080610d0390613341565b9050610937565b508a51610d1e9060069060208e01906129e5565b508951610d329060079060208d01906129e5565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c161717905560048054610db8914691309190600090610d8a9063ffffffff166133a8565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e611c95565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f604051610e4c999897969594939291906133cb565b60405180910390a1505050505050505050505050565b610e6a611a95565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055565b610eaa611a95565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff1690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60606007805480602002602001604051908101604052809291908181526020018280548015610f6d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f42575b5050505050905090565b610f7f611a95565b610f8881611d40565b50565b60015473ffffffffffffffffffffffffffffffffffffffff16331461100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016106b0565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611090611a95565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff16650100000000001790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610efe565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118191906132af565b15801561119a575060095465010000000000900460ff16155b905090565b6111ae878760208b013561206e565b6040805160608101825260025480825260035460ff8082166020850152610100909104169282019290925289359182146112215780516040517f93df584c0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016106b0565b467f0000000000000000000000000000000000000000000000000000000000000000146112a2576040517f0f01ce850000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201524660248201526044016106b0565b6040805183815260208c81013560081c63ffffffff16908201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a160007f000000000000000000000000000000000000000000000000000000000000000015611344576002826020015183604001516113259190613461565b61132f919061347a565b61133a906001613461565b60ff16905061135a565b6020820151611354906001613461565b60ff1690505b868114611393576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8685146113cc576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561140f5761140f613379565b600281111561142057611420613379565b905250905060028160200151600281111561143d5761143d613379565b14801561148457506007816000015160ff168154811061145f5761145f613312565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b6114ba576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060006114c88660206132fb565b6114d38960206132fb565b6114df8c6101446134c3565b6114e991906134c3565b6114f391906134c3565b9050368114611537576040517f8e1192e1000000000000000000000000000000000000000000000000000000008152600481018290523660248201526044016106b0565b5060008a8a60405161154a9291906134d6565b604051908190038120611561918e906020016134e6565b604051602081830303815290604052805190602001209050611581612a6f565b8860005b818110156117ae5760006001858a84602081106115a4576115a4613312565b6115b191901a601b613461565b8f8f868181106115c3576115c3613312565b905060200201358e8e878181106115dc576115dc613312565b9050602002013560405160008152602001604052604051611619949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561163b573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff80821686529397509195509293928401916101009091041660028111156116be576116be613379565b60028111156116cf576116cf613379565b90525090506001816020015160028111156116ec576116ec613379565b14611723576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f811061173a5761173a613312565b602002015115611776576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f811061179157611791613312565b91151560209092020152506117a7905081613341565b9050611585565b505050505050505050505050505050565b67ffffffffffffffff82166000908152600b602090815260408083208484529091529020545b92915050565b6117f3611a95565b60005b818110156118ad57600083838381811061181257611812613312565b90506040020180360381019061182891906134fa565b905061183781602001516119c7565b61189c57805167ffffffffffffffff166000908152600b602090815260408083208285018051855290835281842093909355915191519182527f202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f12910160405180910390a15b506118a681613341565b90506117f6565b505050565b6118ba611a95565b610f8881612554565b60095460009065010000000000900460ff161561190c576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061197d87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250889250612649915050565b9050611988816119c7565b6119965760009150506119bd565b67ffffffffffffffff88166000908152600b60209081526040808320938352929052205490505b9695505050505050565b6040805180820182523081526020810183815291517f4d616771000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9081166004830152915160248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634d61677190604401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e591906132af565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016106b0565b565b600081806020019051810190611b2e9190613533565b805190915073ffffffffffffffffffffffffffffffffffffffff16611b7f576040517f3f8be2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001690556040805180820182527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168082527f0000000000000000000000000000000000000000000000000000000000000000841660209283019081528351918252518416918101919091528351909216908201527f7882169f23bcc4c4bbd6f25544a5e4edaec9002828e752af06697c440f3516e19060600160405180910390a15050565b6000808a8a8a8a8a8a8a8a8a604051602001611cb99998979695949392919061357f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b611d48611a95565b60005b815181101561206a576000828281518110611d6857611d68613312565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161480611dba5750805167ffffffffffffffff16155b15611e005780516040517fc52eff1600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016106b0565b805167ffffffffffffffff166000908152600a60205260409020546901000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1680611e9f57816040015167ffffffffffffffff16600114611e9a5781516040517fc52eff1600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016106b0565b611f17565b8073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff1614611f175781516040517fc52eff1600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016106b0565b6040805160608082018352602085810151151583528584015167ffffffffffffffff9081168285019081528784015173ffffffffffffffffffffffffffffffffffffffff908116868801908152895184166000908152600a8652889020875181548551845186166901000000000000000000027fffffff0000000000000000000000000000000000000000ffffffffffffffffff918916610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff9415159485167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909416939093179290921716179091558a51895191825293518516958101959095525116958301959095529293909216917fb0580f85d17935c257a3c1a9032df9bfa99d272e40027c8eb1b0ede2611c0b0b910160405180910390a25050508061206390613341565b9050611d4b565b5050565b60095465010000000000900460ff16156120b4576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214391906132af565b1561217a576040517fc148371500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612188838501856137b7565b805151519091501515806121a157508051602001515115155b156122ca5760095464ffffffffff8084169116101561228b57600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff841617905560085481516040517f3937306f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691633937306f9161224191600401613a15565b600060405180830381600087803b15801561225b57600080fd5b505af115801561226f573d6000803e3d6000fd5b505050508060200151516000036122865750505050565b6122ca565b8060200151516000036122ca576040517ff803a2ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b816020015151811015612516576000826020015182815181106122f2576122f2613312565b602090810291909101810151805167ffffffffffffffff166000908152600a909252604090912080549192509060ff166123675781516040517fed053c5900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016106b0565b6020820151518154610100900467ffffffffffffffff90811691161415806123a6575060208083015190810151905167ffffffffffffffff9182169116115b156123e657815160208301516040517feefb0cac0000000000000000000000000000000000000000000000000000000081526106b0929190600401613a28565b6040820151612421576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815167ffffffffffffffff166000908152600b602090815260408083208186015184529091529020541561249a57815160408084015190517f32cf0cbf00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909216600483015260248201526044016106b0565b60208083015101516124ad906001613a5d565b81547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff92831602179091558151166000908152600b602090815260408083209381015183529290522042905561250f81613341565b90506122cd565b507faaefc28340f1ee9610a1370eafda130d1b58f0523b62b8eba25fdfbd79b0eb6b816040516125469190613a85565b60405180910390a150505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036125d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016106b0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b825182516000919081830361268a576040517f11a6b26400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610101821180159061269e57506101018111155b6126d4576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82820101610100811115612735576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600003612762578660008151811061275057612750613312565b60200260200101519350505050612963565b60008167ffffffffffffffff81111561277d5761277d612b51565b6040519080825280602002602001820160405280156127a6578160200160208202803683370190505b50905060008080805b858110156128e95760006001821b8b81160361280a57888510156127f3578c5160018601958e9181106127e4576127e4613312565b6020026020010151905061282c565b85516001850194879181106127e4576127e4613312565b8b5160018401938d91811061282157612821613312565b602002602001015190505b60008986101561285c578d5160018701968f91811061284d5761284d613312565b6020026020010151905061287e565b865160018601958891811061287357612873613312565b602002602001015190505b828511156128b8576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128c2828261296a565b8784815181106128d4576128d4613312565b602090810291909101015250506001016127af565b5060018503821480156128fb57508683145b801561290657508581145b61293c576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600186038151811061295157612951613312565b60200260200101519750505050505050505b9392505050565b60008183106129ac5760408051600160208083019190915281830185905260608083018790528351808403909101815260809092019092528051910120612963565b60408051600160208083019190915281830186905260608083018690528351808403909101815260809092019092528051910120612963565b828054828255906000526020600020908101928215612a5f579160200282015b82811115612a5f57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612a05565b50612a6b929150612a8e565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b80821115612a6b5760008155600101612a8f565b815167ffffffffffffffff16815260208083015173ffffffffffffffffffffffffffffffffffffffff1690820152604081016117e5565b6000815180845260005b81811015612b0057602081850181015186830182015201612ae4565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006129636020830184612ada565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715612ba357612ba3612b51565b60405290565b6040805190810167ffffffffffffffff81118282101715612ba357612ba3612b51565b6040516060810167ffffffffffffffff81118282101715612ba357612ba3612b51565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612c3657612c36612b51565b604052919050565b600067ffffffffffffffff821115612c5857612c58612b51565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff81168114610f8857600080fd5b600082601f830112612c9557600080fd5b81356020612caa612ca583612c3e565b612bef565b82815260059290921b84018101918181019086841115612cc957600080fd5b8286015b84811015612ced578035612ce081612c62565b8352918301918301612ccd565b509695505050505050565b803560ff81168114612d0957600080fd5b919050565b600082601f830112612d1f57600080fd5b813567ffffffffffffffff811115612d3957612d39612b51565b612d6a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612bef565b818152846020838601011115612d7f57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114612d0957600080fd5b60008060008060008060c08789031215612dcd57600080fd5b863567ffffffffffffffff80821115612de557600080fd5b612df18a838b01612c84565b97506020890135915080821115612e0757600080fd5b612e138a838b01612c84565b9650612e2160408a01612cf8565b95506060890135915080821115612e3757600080fd5b612e438a838b01612d0e565b9450612e5160808a01612d9c565b935060a0890135915080821115612e6757600080fd5b50612e7489828a01612d0e565b9150509295509295509295565b600060208284031215612e9357600080fd5b813564ffffffffff8116811461296357600080fd5b600081518084526020808501945080840160005b83811015612eee57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612ebc565b509495945050505050565b6020815260006129636020830184612ea8565b8015158114610f8857600080fd5b60006020808385031215612f2d57600080fd5b823567ffffffffffffffff811115612f4457600080fd5b8301601f81018513612f5557600080fd5b8035612f63612ca582612c3e565b81815260079190911b82018301908381019087831115612f8257600080fd5b928401925b82841015612ffa5760808489031215612fa05760008081fd5b612fa8612b80565b612fb185612d9c565b815285850135612fc081612f0c565b818701526040612fd1868201612d9c565b90820152606085810135612fe481612c62565b9082015282526080939093019290840190612f87565b979650505050505050565b60006020828403121561301757600080fd5b61296382612d9c565b60008083601f84011261303257600080fd5b50813567ffffffffffffffff81111561304a57600080fd5b6020830191508360208260051b850101111561306557600080fd5b9250929050565b60008060008060008060008060e0898b03121561308857600080fd5b606089018a81111561309957600080fd5b8998503567ffffffffffffffff808211156130b357600080fd5b818b0191508b601f8301126130c757600080fd5b8135818111156130d657600080fd5b8c60208285010111156130e857600080fd5b6020830199508098505060808b013591508082111561310657600080fd5b6131128c838d01613020565b909750955060a08b013591508082111561312b57600080fd5b506131388b828c01613020565b999c989b50969995989497949560c00135949350505050565b6000806040838503121561316457600080fd5b61316d83612d9c565b946020939093013593505050565b6000806020838503121561318e57600080fd5b823567ffffffffffffffff808211156131a657600080fd5b818501915085601f8301126131ba57600080fd5b8135818111156131c957600080fd5b8660208260061b85010111156131de57600080fd5b60209290920196919550909350505050565b60006020828403121561320257600080fd5b813561296381612c62565b6000806000806000806080878903121561322657600080fd5b61322f87612d9c565b9550602087013567ffffffffffffffff8082111561324c57600080fd5b6132588a838b01613020565b9097509550604089013591508082111561327157600080fd5b5061327e89828a01613020565b979a9699509497949695606090950135949350505050565b6000602082840312156132a857600080fd5b5035919050565b6000602082840312156132c157600080fd5b815161296381612f0c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176117e5576117e56132cc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613372576133726132cc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff8083168181036133c1576133c16132cc565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526133fb8184018a612ea8565b9050828103608084015261340f8189612ea8565b905060ff871660a084015282810360c084015261342c8187612ada565b905067ffffffffffffffff851660e08401528281036101008401526134518185612ada565b9c9b505050505050505050505050565b60ff81811683821601908111156117e5576117e56132cc565b600060ff8316806134b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b808201808211156117e5576117e56132cc565b8183823760009101908152919050565b828152606082602083013760800192915050565b60006040828403121561350c57600080fd5b613514612ba9565b61351d83612d9c565b8152602083013560208201528091505092915050565b60006020828403121561354557600080fd5b6040516020810181811067ffffffffffffffff8211171561356857613568612b51565b604052825161357681612c62565b81529392505050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b1660408501528160608501526135c68285018b612ea8565b915083820360808501526135da828a612ea8565b915060ff881660a085015283820360c08501526135f78288612ada565b90861660e085015283810361010085015290506134518185612ada565b80357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168114612d0957600080fd5b600082601f83011261365157600080fd5b81356020613661612ca583612c3e565b82815260069290921b8401810191818101908684111561368057600080fd5b8286015b84811015612ced576040818903121561369d5760008081fd5b6136a5612ba9565b6136ae82612d9c565b81526136bb858301613614565b81860152835291830191604001613684565b600082601f8301126136de57600080fd5b813560206136ee612ca583612c3e565b82815260079290921b8401810191818101908684111561370d57600080fd5b8286015b84811015612ced57808803608081121561372b5760008081fd5b613733612bcc565b61373c83612d9c565b81526040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0840112156137705760008081fd5b613778612ba9565b9250613785878501612d9c565b8352613792818501612d9c565b8388015281870192909252606083013591810191909152835291830191608001613711565b600060208083850312156137ca57600080fd5b823567ffffffffffffffff808211156137e257600080fd5b818501915060408083880312156137f857600080fd5b613800612ba9565b83358381111561380f57600080fd5b840180890383131561382057600080fd5b613828612ba9565b81358581111561383757600080fd5b8201601f81018b1361384857600080fd5b8035613856612ca582612c3e565b81815260069190911b8201890190898101908d83111561387557600080fd5b928a01925b828410156138c55787848f0312156138925760008081fd5b61389a612ba9565b84356138a581612c62565b81526138b2858d01613614565b818d0152825292870192908a019061387a565b8452505050818701359350848411156138dd57600080fd5b6138e98a858401613640565b818801528252508385013591508282111561390357600080fd5b61390f888386016136cd565b85820152809550505050505092915050565b805160408084528151848201819052600092602091908201906060870190855b8181101561399a578351805173ffffffffffffffffffffffffffffffffffffffff1684528501517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16858401529284019291850191600101613941565b50508583015187820388850152805180835290840192506000918401905b80831015613a09578351805167ffffffffffffffff1683528501517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16858301529284019260019290920191908501906139b8565b50979650505050505050565b6020815260006129636020830184613921565b67ffffffffffffffff83168152606081016129636020830184805167ffffffffffffffff908116835260209182015116910152565b67ffffffffffffffff818116838216019080821115613a7e57613a7e6132cc565b5092915050565b600060208083526060845160408084870152613aa383870183613921565b878501518782037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183890152805180835290860193506000918601905b80831015613b3e57845167ffffffffffffffff815116835287810151613b2089850182805167ffffffffffffffff908116835260209182015116910152565b50840151828701529386019360019290920191608090910190613ae1565b509897505050505050505056fea164736f6c6343000813000a",
}

var MultiCommitStoreABI = MultiCommitStoreMetaData.ABI

var MultiCommitStoreBin = MultiCommitStoreMetaData.Bin

func DeployMultiCommitStore(auth *bind.TransactOpts, backend bind.ContractBackend, staticConfig MultiCommitStoreStaticConfig, sourceChainConfigs []MultiCommitStoreSourceChainConfigArgs) (common.Address, *types.Transaction, *MultiCommitStore, error) {
	parsed, err := MultiCommitStoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MultiCommitStoreBin), backend, staticConfig, sourceChainConfigs)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiCommitStore{address: address, abi: *parsed, MultiCommitStoreCaller: MultiCommitStoreCaller{contract: contract}, MultiCommitStoreTransactor: MultiCommitStoreTransactor{contract: contract}, MultiCommitStoreFilterer: MultiCommitStoreFilterer{contract: contract}}, nil
}

type MultiCommitStore struct {
	address common.Address
	abi     abi.ABI
	MultiCommitStoreCaller
	MultiCommitStoreTransactor
	MultiCommitStoreFilterer
}

type MultiCommitStoreCaller struct {
	contract *bind.BoundContract
}

type MultiCommitStoreTransactor struct {
	contract *bind.BoundContract
}

type MultiCommitStoreFilterer struct {
	contract *bind.BoundContract
}

type MultiCommitStoreSession struct {
	Contract     *MultiCommitStore
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MultiCommitStoreCallerSession struct {
	Contract *MultiCommitStoreCaller
	CallOpts bind.CallOpts
}

type MultiCommitStoreTransactorSession struct {
	Contract     *MultiCommitStoreTransactor
	TransactOpts bind.TransactOpts
}

type MultiCommitStoreRaw struct {
	Contract *MultiCommitStore
}

type MultiCommitStoreCallerRaw struct {
	Contract *MultiCommitStoreCaller
}

type MultiCommitStoreTransactorRaw struct {
	Contract *MultiCommitStoreTransactor
}

func NewMultiCommitStore(address common.Address, backend bind.ContractBackend) (*MultiCommitStore, error) {
	abi, err := abi.JSON(strings.NewReader(MultiCommitStoreABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMultiCommitStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStore{address: address, abi: abi, MultiCommitStoreCaller: MultiCommitStoreCaller{contract: contract}, MultiCommitStoreTransactor: MultiCommitStoreTransactor{contract: contract}, MultiCommitStoreFilterer: MultiCommitStoreFilterer{contract: contract}}, nil
}

func NewMultiCommitStoreCaller(address common.Address, caller bind.ContractCaller) (*MultiCommitStoreCaller, error) {
	contract, err := bindMultiCommitStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreCaller{contract: contract}, nil
}

func NewMultiCommitStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiCommitStoreTransactor, error) {
	contract, err := bindMultiCommitStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreTransactor{contract: contract}, nil
}

func NewMultiCommitStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiCommitStoreFilterer, error) {
	contract, err := bindMultiCommitStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreFilterer{contract: contract}, nil
}

func bindMultiCommitStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MultiCommitStoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MultiCommitStore *MultiCommitStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCommitStore.Contract.MultiCommitStoreCaller.contract.Call(opts, result, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.MultiCommitStoreTransactor.contract.Transfer(opts)
}

func (_MultiCommitStore *MultiCommitStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.MultiCommitStoreTransactor.contract.Transact(opts, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCommitStore.Contract.contract.Call(opts, result, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.contract.Transfer(opts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.contract.Transact(opts, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetDynamicConfig(opts *bind.CallOpts) (MultiCommitStoreDynamicConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getDynamicConfig")

	if err != nil {
		return *new(MultiCommitStoreDynamicConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(MultiCommitStoreDynamicConfig)).(*MultiCommitStoreDynamicConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetDynamicConfig() (MultiCommitStoreDynamicConfig, error) {
	return _MultiCommitStore.Contract.GetDynamicConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetDynamicConfig() (MultiCommitStoreDynamicConfig, error) {
	return _MultiCommitStore.Contract.GetDynamicConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetLatestPriceEpochAndRound(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getLatestPriceEpochAndRound")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetLatestPriceEpochAndRound() (uint64, error) {
	return _MultiCommitStore.Contract.GetLatestPriceEpochAndRound(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetLatestPriceEpochAndRound() (uint64, error) {
	return _MultiCommitStore.Contract.GetLatestPriceEpochAndRound(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetMerkleRoot(opts *bind.CallOpts, sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getMerkleRoot", sourceChainSelector, root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetMerkleRoot(sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	return _MultiCommitStore.Contract.GetMerkleRoot(&_MultiCommitStore.CallOpts, sourceChainSelector, root)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetMerkleRoot(sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	return _MultiCommitStore.Contract.GetMerkleRoot(&_MultiCommitStore.CallOpts, sourceChainSelector, root)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetOnRamp(opts *bind.CallOpts, sourceChainSelector uint64) (common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getOnRamp", sourceChainSelector)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetOnRamp(sourceChainSelector uint64) (common.Address, error) {
	return _MultiCommitStore.Contract.GetOnRamp(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetOnRamp(sourceChainSelector uint64) (common.Address, error) {
	return _MultiCommitStore.Contract.GetOnRamp(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetSourceChainConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceChainConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getSourceChainConfig", sourceChainSelector)

	if err != nil {
		return *new(IMultiCommitStoreSourceChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(IMultiCommitStoreSourceChainConfig)).(*IMultiCommitStoreSourceChainConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetSourceChainConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceChainConfig, error) {
	return _MultiCommitStore.Contract.GetSourceChainConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetSourceChainConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceChainConfig, error) {
	return _MultiCommitStore.Contract.GetSourceChainConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetStaticConfig(opts *bind.CallOpts) (MultiCommitStoreStaticConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getStaticConfig")

	if err != nil {
		return *new(MultiCommitStoreStaticConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(MultiCommitStoreStaticConfig)).(*MultiCommitStoreStaticConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetStaticConfig() (MultiCommitStoreStaticConfig, error) {
	return _MultiCommitStore.Contract.GetStaticConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetStaticConfig() (MultiCommitStoreStaticConfig, error) {
	return _MultiCommitStore.Contract.GetStaticConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetTransmitters() ([]common.Address, error) {
	return _MultiCommitStore.Contract.GetTransmitters(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetTransmitters() ([]common.Address, error) {
	return _MultiCommitStore.Contract.GetTransmitters(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsARMHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isARMHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsBlessed(root [32]byte) (bool, error) {
	return _MultiCommitStore.Contract.IsBlessed(&_MultiCommitStore.CallOpts, root)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _MultiCommitStore.Contract.IsBlessed(&_MultiCommitStore.CallOpts, root)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsUnpausedAndARMHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isUnpausedAndARMHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsUnpausedAndARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsUnpausedAndARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsUnpausedAndARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsUnpausedAndARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_MultiCommitStore *MultiCommitStoreSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDetails(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDetails(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MultiCommitStore *MultiCommitStoreSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDigestAndEpoch(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDigestAndEpoch(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Owner() (common.Address, error) {
	return _MultiCommitStore.Contract.Owner(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Owner() (common.Address, error) {
	return _MultiCommitStore.Contract.Owner(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Paused() (bool, error) {
	return _MultiCommitStore.Contract.Paused(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Paused() (bool, error) {
	return _MultiCommitStore.Contract.Paused(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) TypeAndVersion() (string, error) {
	return _MultiCommitStore.Contract.TypeAndVersion(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) TypeAndVersion() (string, error) {
	return _MultiCommitStore.Contract.TypeAndVersion(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Verify(opts *bind.CallOpts, sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "verify", sourceChainSelector, hashedLeaves, proofs, proofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Verify(sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _MultiCommitStore.Contract.Verify(&_MultiCommitStore.CallOpts, sourceChainSelector, hashedLeaves, proofs, proofFlagBits)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Verify(sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _MultiCommitStore.Contract.Verify(&_MultiCommitStore.CallOpts, sourceChainSelector, hashedLeaves, proofs, proofFlagBits)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "acceptOwnership")
}

func (_MultiCommitStore *MultiCommitStoreSession) AcceptOwnership() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.AcceptOwnership(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.AcceptOwnership(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) ApplySourceChainConfigUpdates(opts *bind.TransactOpts, sourceChainConfigs []MultiCommitStoreSourceChainConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "applySourceChainConfigUpdates", sourceChainConfigs)
}

func (_MultiCommitStore *MultiCommitStoreSession) ApplySourceChainConfigUpdates(sourceChainConfigs []MultiCommitStoreSourceChainConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ApplySourceChainConfigUpdates(&_MultiCommitStore.TransactOpts, sourceChainConfigs)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) ApplySourceChainConfigUpdates(sourceChainConfigs []MultiCommitStoreSourceChainConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ApplySourceChainConfigUpdates(&_MultiCommitStore.TransactOpts, sourceChainConfigs)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "pause")
}

func (_MultiCommitStore *MultiCommitStoreSession) Pause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Pause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Pause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Pause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset []MultiCommitStoreUnblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreSession) ResetUnblessedRoots(rootToReset []MultiCommitStoreUnblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ResetUnblessedRoots(&_MultiCommitStore.TransactOpts, rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) ResetUnblessedRoots(rootToReset []MultiCommitStoreUnblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ResetUnblessedRoots(&_MultiCommitStore.TransactOpts, rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) SetLatestPriceEpochAndRound(opts *bind.TransactOpts, latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "setLatestPriceEpochAndRound", latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreSession) SetLatestPriceEpochAndRound(latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetLatestPriceEpochAndRound(&_MultiCommitStore.TransactOpts, latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) SetLatestPriceEpochAndRound(latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetLatestPriceEpochAndRound(&_MultiCommitStore.TransactOpts, latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "setOCR2Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetOCR2Config(&_MultiCommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetOCR2Config(&_MultiCommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "transferOwnership", to)
}

func (_MultiCommitStore *MultiCommitStoreSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.TransferOwnership(&_MultiCommitStore.TransactOpts, to)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.TransferOwnership(&_MultiCommitStore.TransactOpts, to)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Transmit(&_MultiCommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Transmit(&_MultiCommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "unpause")
}

func (_MultiCommitStore *MultiCommitStoreSession) Unpause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Unpause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Unpause(&_MultiCommitStore.TransactOpts)
}

type MultiCommitStoreConfigSetIterator struct {
	Event *MultiCommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreConfigSet struct {
	StaticConfig  MultiCommitStoreStaticConfig
	DynamicConfig MultiCommitStoreDynamicConfig
	Raw           types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterConfigSet(opts *bind.FilterOpts) (*MultiCommitStoreConfigSetIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreConfigSetIterator{contract: _MultiCommitStore.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreConfigSet)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseConfigSet(log types.Log) (*MultiCommitStoreConfigSet, error) {
	event := new(MultiCommitStoreConfigSet)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreConfigSet0Iterator struct {
	Event *MultiCommitStoreConfigSet0

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreConfigSet0Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreConfigSet0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreConfigSet0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreConfigSet0Iterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreConfigSet0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreConfigSet0 struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterConfigSet0(opts *bind.FilterOpts) (*MultiCommitStoreConfigSet0Iterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreConfigSet0Iterator{contract: _MultiCommitStore.contract, event: "ConfigSet0", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet0) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreConfigSet0)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseConfigSet0(log types.Log) (*MultiCommitStoreConfigSet0, error) {
	event := new(MultiCommitStoreConfigSet0)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreOwnershipTransferRequestedIterator struct {
	Event *MultiCommitStoreOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreOwnershipTransferRequestedIterator{contract: _MultiCommitStore.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreOwnershipTransferRequested)
				if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseOwnershipTransferRequested(log types.Log) (*MultiCommitStoreOwnershipTransferRequested, error) {
	event := new(MultiCommitStoreOwnershipTransferRequested)
	if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreOwnershipTransferredIterator struct {
	Event *MultiCommitStoreOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreOwnershipTransferredIterator{contract: _MultiCommitStore.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreOwnershipTransferred)
				if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseOwnershipTransferred(log types.Log) (*MultiCommitStoreOwnershipTransferred, error) {
	event := new(MultiCommitStoreOwnershipTransferred)
	if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStorePausedIterator struct {
	Event *MultiCommitStorePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStorePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStorePausedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStorePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterPaused(opts *bind.FilterOpts) (*MultiCommitStorePausedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStorePausedIterator{contract: _MultiCommitStore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStorePaused) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStorePaused)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParsePaused(log types.Log) (*MultiCommitStorePaused, error) {
	event := new(MultiCommitStorePaused)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreReportAcceptedIterator struct {
	Event *MultiCommitStoreReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreReportAccepted struct {
	Report MultiCommitStoreCommitReport
	Raw    types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*MultiCommitStoreReportAcceptedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreReportAcceptedIterator{contract: _MultiCommitStore.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreReportAccepted) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreReportAccepted)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseReportAccepted(log types.Log) (*MultiCommitStoreReportAccepted, error) {
	event := new(MultiCommitStoreReportAccepted)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreRootRemovedIterator struct {
	Event *MultiCommitStoreRootRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreRootRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreRootRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreRootRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreRootRemovedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreRootRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreRootRemoved struct {
	Root [32]byte
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterRootRemoved(opts *bind.FilterOpts) (*MultiCommitStoreRootRemovedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreRootRemovedIterator{contract: _MultiCommitStore.contract, event: "RootRemoved", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreRootRemoved) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreRootRemoved)
				if err := _MultiCommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseRootRemoved(log types.Log) (*MultiCommitStoreRootRemoved, error) {
	event := new(MultiCommitStoreRootRemoved)
	if err := _MultiCommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreSourceChainConfigUpdatedIterator struct {
	Event *MultiCommitStoreSourceChainConfigUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreSourceChainConfigUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreSourceChainConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreSourceChainConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreSourceChainConfigUpdatedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreSourceChainConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreSourceChainConfigUpdated struct {
	SourceChainSelector uint64
	SourceChainConfig   IMultiCommitStoreSourceChainConfig
	Raw                 types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterSourceChainConfigUpdated(opts *bind.FilterOpts, sourceChainSelector []uint64) (*MultiCommitStoreSourceChainConfigUpdatedIterator, error) {

	var sourceChainSelectorRule []interface{}
	for _, sourceChainSelectorItem := range sourceChainSelector {
		sourceChainSelectorRule = append(sourceChainSelectorRule, sourceChainSelectorItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "SourceChainConfigUpdated", sourceChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreSourceChainConfigUpdatedIterator{contract: _MultiCommitStore.contract, event: "SourceChainConfigUpdated", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchSourceChainConfigUpdated(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreSourceChainConfigUpdated, sourceChainSelector []uint64) (event.Subscription, error) {

	var sourceChainSelectorRule []interface{}
	for _, sourceChainSelectorItem := range sourceChainSelector {
		sourceChainSelectorRule = append(sourceChainSelectorRule, sourceChainSelectorItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "SourceChainConfigUpdated", sourceChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreSourceChainConfigUpdated)
				if err := _MultiCommitStore.contract.UnpackLog(event, "SourceChainConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseSourceChainConfigUpdated(log types.Log) (*MultiCommitStoreSourceChainConfigUpdated, error) {
	event := new(MultiCommitStoreSourceChainConfigUpdated)
	if err := _MultiCommitStore.contract.UnpackLog(event, "SourceChainConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreTransmittedIterator struct {
	Event *MultiCommitStoreTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreTransmittedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterTransmitted(opts *bind.FilterOpts) (*MultiCommitStoreTransmittedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreTransmittedIterator{contract: _MultiCommitStore.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreTransmitted) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreTransmitted)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseTransmitted(log types.Log) (*MultiCommitStoreTransmitted, error) {
	event := new(MultiCommitStoreTransmitted)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreUnpausedIterator struct {
	Event *MultiCommitStoreUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreUnpausedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MultiCommitStoreUnpausedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreUnpausedIterator{contract: _MultiCommitStore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreUnpaused)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseUnpaused(log types.Log) (*MultiCommitStoreUnpaused, error) {
	event := new(MultiCommitStoreUnpaused)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_MultiCommitStore *MultiCommitStore) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MultiCommitStore.abi.Events["ConfigSet"].ID:
		return _MultiCommitStore.ParseConfigSet(log)
	case _MultiCommitStore.abi.Events["ConfigSet0"].ID:
		return _MultiCommitStore.ParseConfigSet0(log)
	case _MultiCommitStore.abi.Events["OwnershipTransferRequested"].ID:
		return _MultiCommitStore.ParseOwnershipTransferRequested(log)
	case _MultiCommitStore.abi.Events["OwnershipTransferred"].ID:
		return _MultiCommitStore.ParseOwnershipTransferred(log)
	case _MultiCommitStore.abi.Events["Paused"].ID:
		return _MultiCommitStore.ParsePaused(log)
	case _MultiCommitStore.abi.Events["ReportAccepted"].ID:
		return _MultiCommitStore.ParseReportAccepted(log)
	case _MultiCommitStore.abi.Events["RootRemoved"].ID:
		return _MultiCommitStore.ParseRootRemoved(log)
	case _MultiCommitStore.abi.Events["SourceChainConfigUpdated"].ID:
		return _MultiCommitStore.ParseSourceChainConfigUpdated(log)
	case _MultiCommitStore.abi.Events["Transmitted"].ID:
		return _MultiCommitStore.ParseTransmitted(log)
	case _MultiCommitStore.abi.Events["Unpaused"].ID:
		return _MultiCommitStore.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MultiCommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0x7882169f23bcc4c4bbd6f25544a5e4edaec9002828e752af06697c440f3516e1")
}

func (MultiCommitStoreConfigSet0) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (MultiCommitStoreOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MultiCommitStoreOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (MultiCommitStorePaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (MultiCommitStoreReportAccepted) Topic() common.Hash {
	return common.HexToHash("0xaaefc28340f1ee9610a1370eafda130d1b58f0523b62b8eba25fdfbd79b0eb6b")
}

func (MultiCommitStoreRootRemoved) Topic() common.Hash {
	return common.HexToHash("0x202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f12")
}

func (MultiCommitStoreSourceChainConfigUpdated) Topic() common.Hash {
	return common.HexToHash("0xb0580f85d17935c257a3c1a9032df9bfa99d272e40027c8eb1b0ede2611c0b0b")
}

func (MultiCommitStoreTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (MultiCommitStoreUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_MultiCommitStore *MultiCommitStore) Address() common.Address {
	return _MultiCommitStore.address
}

type MultiCommitStoreInterface interface {
	GetDynamicConfig(opts *bind.CallOpts) (MultiCommitStoreDynamicConfig, error)

	GetLatestPriceEpochAndRound(opts *bind.CallOpts) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, sourceChainSelector uint64, root [32]byte) (*big.Int, error)

	GetOnRamp(opts *bind.CallOpts, sourceChainSelector uint64) (common.Address, error)

	GetSourceChainConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceChainConfig, error)

	GetStaticConfig(opts *bind.CallOpts) (MultiCommitStoreStaticConfig, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	IsARMHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	IsUnpausedAndARMHealthy(opts *bind.CallOpts) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplySourceChainConfigUpdates(opts *bind.TransactOpts, sourceChainConfigs []MultiCommitStoreSourceChainConfigArgs) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset []MultiCommitStoreUnblessedRoot) (*types.Transaction, error)

	SetLatestPriceEpochAndRound(opts *bind.TransactOpts, latestPriceEpochAndRound *big.Int) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*MultiCommitStoreConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*MultiCommitStoreConfigSet, error)

	FilterConfigSet0(opts *bind.FilterOpts) (*MultiCommitStoreConfigSet0Iterator, error)

	WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet0) (event.Subscription, error)

	ParseConfigSet0(log types.Log) (*MultiCommitStoreConfigSet0, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MultiCommitStoreOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MultiCommitStoreOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*MultiCommitStorePausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStorePaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*MultiCommitStorePaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*MultiCommitStoreReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*MultiCommitStoreReportAccepted, error)

	FilterRootRemoved(opts *bind.FilterOpts) (*MultiCommitStoreRootRemovedIterator, error)

	WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreRootRemoved) (event.Subscription, error)

	ParseRootRemoved(log types.Log) (*MultiCommitStoreRootRemoved, error)

	FilterSourceChainConfigUpdated(opts *bind.FilterOpts, sourceChainSelector []uint64) (*MultiCommitStoreSourceChainConfigUpdatedIterator, error)

	WatchSourceChainConfigUpdated(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreSourceChainConfigUpdated, sourceChainSelector []uint64) (event.Subscription, error)

	ParseSourceChainConfigUpdated(log types.Log) (*MultiCommitStoreSourceChainConfigUpdated, error)

	FilterTransmitted(opts *bind.FilterOpts) (*MultiCommitStoreTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*MultiCommitStoreTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*MultiCommitStoreUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*MultiCommitStoreUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
