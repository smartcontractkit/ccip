// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package multi_commit_store

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IMultiCommitStoreSourceConfig struct {
	IsEnabled bool
	MinSeqNr  uint64
	OnRamp    common.Address
}

type InternalGasPriceUpdate struct {
	DestChainSelector uint64
	UsdPerUnitGas     *big.Int
}

type InternalPriceUpdates struct {
	TokenPriceUpdates []InternalTokenPriceUpdate
	GasPriceUpdates   []InternalGasPriceUpdate
}

type InternalTokenPriceUpdate struct {
	SourceToken common.Address
	UsdPerToken *big.Int
}

type MultiCommitStoreCommitReport struct {
	PriceUpdates InternalPriceUpdates
	MerkleRoots  []MultiCommitStoreMerkleRoot
}

type MultiCommitStoreDynamicConfig struct {
	PriceRegistry common.Address
}

type MultiCommitStoreInterval struct {
	Min uint64
	Max uint64
}

type MultiCommitStoreMerkleRoot struct {
	SourceChainSelector uint64
	Interval            MultiCommitStoreInterval
	MerkleRoot          [32]byte
}

type MultiCommitStoreSourceConfigArgs struct {
	SourceChainSelector uint64
	IsEnabled           bool
	MinSeqNr            uint64
	OnRamp              common.Address
}

type MultiCommitStoreStaticConfig struct {
	ChainSelector uint64
	ArmProxy      common.Address
}

type MultiCommitStoreUblessedRoot struct {
	SourceChainSelector uint64
	MerkleRoot          [32]byte
}

var MultiCommitStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.SourceConfigArgs[]\",\"name\":\"srcConfigs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadARMSignal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidChainSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommitStoreConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structMultiCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeavesCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RootAlreadyCommitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint224\",\"name\":\"usdPerToken\",\"type\":\"uint224\"}],\"internalType\":\"structInternal.TokenPriceUpdate[]\",\"name\":\"tokenPriceUpdates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint224\",\"name\":\"usdPerUnitGas\",\"type\":\"uint224\"}],\"internalType\":\"structInternal.GasPriceUpdate[]\",\"name\":\"gasPriceUpdates\",\"type\":\"tuple[]\"}],\"internalType\":\"structInternal.PriceUpdates\",\"name\":\"priceUpdates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structMultiCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiCommitStore.MerkleRoot[]\",\"name\":\"merkleRoots\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"structMultiCommitStore.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RootRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structIMultiCommitStore.SourceConfig\",\"name\":\"srcConfig\",\"type\":\"tuple\"}],\"name\":\"SourceConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.SourceConfigArgs[]\",\"name\":\"srcConfigs\",\"type\":\"tuple[]\"}],\"name\":\"applySourceConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.DynamicConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceEpochAndRound\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getOnRamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getSourceConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structIMultiCommitStore.SourceConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getSrcConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structIMultiCommitStore.SourceConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"armProxy\",\"type\":\"address\"}],\"internalType\":\"structMultiCommitStore.StaticConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isARMHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnpausedAndARMHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiCommitStore.UblessedRoot[]\",\"name\":\"rootToReset\",\"type\":\"tuple[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"latestPriceEpochAndRound\",\"type\":\"uint40\"}],\"name\":\"setLatestPriceEpochAndRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101006040526009805460ff60281b191690553480156200001f57600080fd5b50604051620040e1380380620040e18339810160408190526200004291620004df565b6000338082816200009a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000cd57620000cd81620001a4565b50505015156080524660a05281516001600160401b03161580620000fc575060208201516001600160a01b0316155b156200011b57604051631fc5f15f60e11b815260040160405180910390fd5b81516001600160401b031660c05260208201516001600160a01b031660e05260005b81518110156200019b5760008282815181106200015e576200015e6200063e565b60209081029190910181015160016040820181905291810191909152905062000187816200024f565b50620001938162000654565b90506200013d565b5050506200067c565b336001600160a01b03821603620001fe5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000091565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b62000259620003b3565b60608101516001600160a01b031615806200027c575080516001600160401b0316155b156200029b57604051631fc5f15f60e11b815260040160405180910390fd5b6040805160608082018352602084810180511515845285850180516001600160401b0390811684870190815288860180516001600160a01b03908116898b019081528b5185166000908152600a89528b902099518a54945191518316690100000000000000000002600160481b600160e81b031992871661010002610100600160481b0319921515929092166001600160481b031990961695909517171692909217909755885188518088018a529451151580865293518316858701908152975182169489019485528851938452965182169483019490945291519092169482019490945291909216917f1d9af807eb98a74c187b6399b8f2f06d3af8b4a4802543684ab582004f3c4b9f910160405180910390a250565b6000546001600160a01b031633146200040f5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000091565b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200044c576200044c62000411565b60405290565b604051608081016001600160401b03811182821017156200044c576200044c62000411565b604051601f8201601f191681016001600160401b0381118282101715620004a257620004a262000411565b604052919050565b80516001600160401b0381168114620004c257600080fd5b919050565b80516001600160a01b0381168114620004c257600080fd5b600080828403606080821215620004f557600080fd5b6040808312156200050557600080fd5b6200050f62000427565b92506200051c86620004aa565b835260206200052d818801620004c7565b84820152868201519395506001600160401b03808511156200054e57600080fd5b848801945088601f8601126200056357600080fd5b84518181111562000578576200057862000411565b62000588838260051b0162000477565b818152838101925060079190911b86018301908a821115620005a957600080fd5b958301955b818710156200062d576080878c031215620005c95760008081fd5b620005d362000452565b620005de88620004aa565b8152848801518015158114620005f45760008081fd5b8186015262000605888701620004aa565b8682015262000616878901620004c7565b8188015283526080969096019591830191620005ae565b809750505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200067557634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e0516139fa620006e760003960008181610213015281816105b9015281816110eb01528181611a7701528181611c700152611dd50152600081816101da0152611c4201526000818161121b0152611267015260006112e201526139fa6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638456cb59116100ee578063baef185611610097578063deada5dc11610071578063deada5dc146102dc578063f2fde38b1461057c578063fe41448f1461058f578063ff888fb1146105a257600080fd5b8063baef185614610535578063ccd37ba314610548578063d2a15d351461056957600080fd5b8063a8d87a3b116100c8578063a8d87a3b146104b5578063afcb95d714610502578063b1dc65a41461052257600080fd5b80638456cb59146104665780638da5cb5b1461046e5780638db94e44146104ad57600080fd5b806329b980e41161015b578063666cab8d11610135578063666cab8d146103da5780637437ff9f146103ef57806379ba50971461042e57806381ff70481461043657600080fd5b806329b980e4146103ab5780633f4ba83a146103be5780635c975abb146103c657600080fd5b8063181f5a771161018c578063181f5a771461027e5780631ef38174146102c757806324bc9b5c146102dc57600080fd5b806306285c69146101b35780630a6cd30d1461024d57806310c374ed14610265575b600080fd5b6040805180820182526000808252602091820152815180830190925267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690820152604051610244919061297f565b60405180910390f35b6102556105b5565b6040519015158152602001610244565b60095460405164ffffffffff9091168152602001610244565b6102ba6040518060400160405280601681526020017f4d756c7469436f6d6d697453746f726520312e362e300000000000000000000081525081565b6040516102449190612a1a565b6102da6102d5366004612c6d565b61064c565b005b6103676102ea366004612d3a565b60408051606080820183526000808352602080840182905292840181905267ffffffffffffffff9485168152600a8352839020835191820184525460ff811615158252610100810490941691810191909152690100000000000000000090920473ffffffffffffffffffffffffffffffffffffffff169082015290565b6040805182511515815260208084015167ffffffffffffffff16908201529181015173ffffffffffffffffffffffffffffffffffffffff1690820152606001610244565b6102da6103b9366004612d55565b610e6d565b6102da610ead565b60095465010000000000900460ff16610255565b6103e2610f13565b6040516102449190612dcd565b604080516020808201835260009091528151808201835260085473ffffffffffffffffffffffffffffffffffffffff1690819052915191825201610244565b6102da610f82565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610244565b6102da61107f565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610244565b6102556110e7565b6104886104c3366004612d3a565b67ffffffffffffffff166000908152600a60205260409020546901000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690565b604080516001815260006020820181905291810191909152606001610244565b6102da610530366004612e2c565b611196565b6102da610543366004612f11565b6117b6565b61055b610556366004612f86565b61180e565b604051908152602001610244565b6102da610577366004612fb0565b61183a565b6102da61058a366004613013565b6118fc565b61055b61059d366004613030565b611910565b6102556105b03660046130b9565b611a14565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064691906130e0565b15905090565b855185518560ff16601f8311156106c4576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b8060000361072e576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016106bb565b8183146107bc576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016106bb565b6107c781600361312c565b831161082f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016106bb565b610837611ae2565b61084086611b65565b60065460005b8181101561093c57600560006006838154811061086557610865613143565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055600780546005929190849081106108d5576108d5613143565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905561093581613172565b9050610846565b50895160005b81811015610d155760008c828151811061095e5761095e613143565b602002602001015190506000600281111561097b5761097b6131aa565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff1660028111156109ba576109ba6131aa565b14610a21576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016106bb565b73ffffffffffffffffffffffffffffffffffffffff8116610a6e576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610b1e57610b1e6131aa565b021790555090505060008c8381518110610b3a57610b3a613143565b6020026020010151905060006002811115610b5757610b576131aa565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610b9657610b966131aa565b14610bfd576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016106bb565b73ffffffffffffffffffffffffffffffffffffffff8116610c4a576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610cfa57610cfa6131aa565b0217905550905050505080610d0e90613172565b9050610942565b508a51610d299060069060208e01906128c1565b508951610d3d9060079060208d01906128c1565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c161717905560048054610dc3914691309190600090610d959063ffffffff166131d9565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e611ce2565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f604051610e57999897969594939291906131fc565b60405180910390a1505050505050505050505050565b610e75611ae2565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055565b610eb5611ae2565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff1690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60606007805480602002602001604051908101604052809291908181526020018280548015610f7857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f4d575b5050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314611003576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016106bb565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611087611ae2565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff16650100000000001790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610f09565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117891906130e0565b158015611191575060095465010000000000900460ff16155b905090565b6111a5878760208b0135611d8d565b6040805160608101825260025480825260035460ff8082166020850152610100909104169282019290925289359182146112185780516040517f93df584c0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016106bb565b467f000000000000000000000000000000000000000000000000000000000000000014611299576040517f0f01ce850000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201524660248201526044016106bb565b6040805183815260208c81013560081c63ffffffff16908201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a160007f00000000000000000000000000000000000000000000000000000000000000001561133b5760028260200151836040015161131c9190613292565b61132691906132ab565b611331906001613292565b60ff169050611351565b602082015161134b906001613292565b60ff1690505b86811461138a576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8685146113c3576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115611406576114066131aa565b6002811115611417576114176131aa565b9052509050600281602001516002811115611434576114346131aa565b14801561147b57506007816000015160ff168154811061145657611456613143565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b6114b1576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060006114bf86602061312c565b6114ca89602061312c565b6114d68c6101446132f4565b6114e091906132f4565b6114ea91906132f4565b905036811461152e576040517f8e1192e1000000000000000000000000000000000000000000000000000000008152600481018290523660248201526044016106bb565b5060008a8a604051611541929190613307565b604051908190038120611558918e90602001613317565b60405160208183030381529060405280519060200120905061157861294b565b8860005b818110156117a55760006001858a846020811061159b5761159b613143565b6115a891901a601b613292565b8f8f868181106115ba576115ba613143565b905060200201358e8e878181106115d3576115d3613143565b9050602002013560405160008152602001604052604051611610949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611632573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff80821686529397509195509293928401916101009091041660028111156116b5576116b56131aa565b60028111156116c6576116c66131aa565b90525090506001816020015160028111156116e3576116e36131aa565b1461171a576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f811061173157611731613143565b60200201511561176d576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f811061178857611788613143565b911515602090920201525061179e905081613172565b905061157c565b505050505050505050505050505050565b6117be611ae2565b60005b81811015611809576117f98383838181106117de576117de613143565b9050608002018036038101906117f4919061332b565b612257565b61180281613172565b90506117c1565b505050565b67ffffffffffffffff82166000908152600b602090815260408083208484529091529020545b92915050565b611842611ae2565b60005b8181101561180957600083838381811061186157611861613143565b90506040020180360381019061187791906133ac565b90506118868160200151611a14565b6118eb57805167ffffffffffffffff166000908152600b602090815260408083208285018051855290835281842093909355915191519182527f202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f12910160405180910390a15b506118f581613172565b9050611845565b611904611ae2565b61190d81612430565b50565b60095460009065010000000000900460ff1615611959576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006119ca87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250889250612525915050565b90506119d581611a14565b6119e3576000915050611a0a565b67ffffffffffffffff88166000908152600b60209081526040808320938352929052205490505b9695505050505050565b6040805180820182523081526020810183815291517f4d616771000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9081166004830152915160248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634d61677190604401602060405180830381865afa158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183491906130e0565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016106bb565b565b600081806020019051810190611b7b91906133e5565b805190915073ffffffffffffffffffffffffffffffffffffffff16611bcc576040517f3f8be2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001690556040805180820182527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168082527f0000000000000000000000000000000000000000000000000000000000000000841660209283019081528351918252518416918101919091528351909216908201527f7882169f23bcc4c4bbd6f25544a5e4edaec9002828e752af06697c440f3516e19060600160405180910390a15050565b6000808a8a8a8a8a8a8a8a8a604051602001611d0699989796959493929190613431565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b60095465010000000000900460ff1615611dd3576040517feced32bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663397796f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6291906130e0565b15611e99576040517fc148371500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ea783850185613669565b80515151909150151580611ec057508051602001515115155b15611fe95760095464ffffffffff80841691161015611faa57600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff841617905560085481516040517f3937306f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691633937306f91611f60916004016138c7565b600060405180830381600087803b158015611f7a57600080fd5b505af1158015611f8e573d6000803e3d6000fd5b50505050806020015151600003611fa55750505050565b611fe9565b806020015151600003611fe9576040517ff803a2ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8160200151518110156122195760008260200151828151811061201157612011613143565b602090810291909101810151805167ffffffffffffffff166000908152600a909252604090912080549192509060ff166120865781516040517fd9a9cd6800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016106bb565b6020820151518154610100900467ffffffffffffffff90811691161415806120c5575060208083015190810151905167ffffffffffffffff9182169116115b156121025781602001516040517fbb1ae18d0000000000000000000000000000000000000000000000000000000081526004016106bb91906138da565b604082015161213d576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815167ffffffffffffffff166000908152600b602090815260408083208186015184529091529020541561219d576040517fa0bce24f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208083015101516121b09060016138ff565b81547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff92831602179091558151166000908152600b602090815260408083209381015183529290522042905561221281613172565b9050611fec565b507faaefc28340f1ee9610a1370eafda130d1b58f0523b62b8eba25fdfbd79b0eb6b816040516122499190613927565b60405180910390a150505050565b61225f611ae2565b606081015173ffffffffffffffffffffffffffffffffffffffff16158061228f5750805167ffffffffffffffff16155b156122c6576040517f3f8be2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606080820183526020848101805115158452858501805167ffffffffffffffff908116848701908152888601805173ffffffffffffffffffffffffffffffffffffffff908116898b019081528b5185166000908152600a89528b902099518a549451915183166901000000000000000000027fffffff0000000000000000000000000000000000000000ffffffffffffffffff928716610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff921515929092167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090961695909517171692909217909755885188518088018a529451151580865293518316858701908152975182169489019485528851938452965182169483019490945291519092169482019490945291909216917f1d9af807eb98a74c187b6399b8f2f06d3af8b4a4802543684ab582004f3c4b9f910160405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff8216036124af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016106bb565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8251825160009190818303612566576040517f11a6b26400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610101821180159061257a57506101018111155b6125b0576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82820101610100811115612611576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000361263e578660008151811061262c5761262c613143565b6020026020010151935050505061283f565b60008167ffffffffffffffff81111561265957612659612a2d565b604051908082528060200260200182016040528015612682578160200160208202803683370190505b50905060008080805b858110156127c55760006001821b8b8116036126e657888510156126cf578c5160018601958e9181106126c0576126c0613143565b60200260200101519050612708565b85516001850194879181106126c0576126c0613143565b8b5160018401938d9181106126fd576126fd613143565b602002602001015190505b600089861015612738578d5160018701968f91811061272957612729613143565b6020026020010151905061275a565b865160018601958891811061274f5761274f613143565b602002602001015190505b82851115612794576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61279e8282612846565b8784815181106127b0576127b0613143565b6020908102919091010152505060010161268b565b5060018503821480156127d757508683145b80156127e257508581145b612818576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600186038151811061282d5761282d613143565b60200260200101519750505050505050505b9392505050565b6000818310612888576040805160016020808301919091528183018590526060808301879052835180840390910181526080909201909252805191012061283f565b6040805160016020808301919091528183018690526060808301869052835180840390910181526080909201909252805191012061283f565b82805482825590600052602060002090810192821561293b579160200282015b8281111561293b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906128e1565b5061294792915061296a565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b80821115612947576000815560010161296b565b815167ffffffffffffffff16815260208083015173ffffffffffffffffffffffffffffffffffffffff169082015260408101611834565b6000815180845260005b818110156129dc576020818501810151868301820152016129c0565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061283f60208301846129b6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612a7f57612a7f612a2d565b60405290565b6040516060810167ffffffffffffffff81118282101715612a7f57612a7f612a2d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612aef57612aef612a2d565b604052919050565b600067ffffffffffffffff821115612b1157612b11612a2d565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461190d57600080fd5b600082601f830112612b4e57600080fd5b81356020612b63612b5e83612af7565b612aa8565b82815260059290921b84018101918181019086841115612b8257600080fd5b8286015b84811015612ba6578035612b9981612b1b565b8352918301918301612b86565b509695505050505050565b803560ff81168114612bc257600080fd5b919050565b600082601f830112612bd857600080fd5b813567ffffffffffffffff811115612bf257612bf2612a2d565b612c2360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612aa8565b818152846020838601011115612c3857600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114612bc257600080fd5b60008060008060008060c08789031215612c8657600080fd5b863567ffffffffffffffff80821115612c9e57600080fd5b612caa8a838b01612b3d565b97506020890135915080821115612cc057600080fd5b612ccc8a838b01612b3d565b9650612cda60408a01612bb1565b95506060890135915080821115612cf057600080fd5b612cfc8a838b01612bc7565b9450612d0a60808a01612c55565b935060a0890135915080821115612d2057600080fd5b50612d2d89828a01612bc7565b9150509295509295509295565b600060208284031215612d4c57600080fd5b61283f82612c55565b600060208284031215612d6757600080fd5b813564ffffffffff8116811461283f57600080fd5b600081518084526020808501945080840160005b83811015612dc257815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612d90565b509495945050505050565b60208152600061283f6020830184612d7c565b60008083601f840112612df257600080fd5b50813567ffffffffffffffff811115612e0a57600080fd5b6020830191508360208260051b8501011115612e2557600080fd5b9250929050565b60008060008060008060008060e0898b031215612e4857600080fd5b606089018a811115612e5957600080fd5b8998503567ffffffffffffffff80821115612e7357600080fd5b818b0191508b601f830112612e8757600080fd5b813581811115612e9657600080fd5b8c6020828501011115612ea857600080fd5b6020830199508098505060808b0135915080821115612ec657600080fd5b612ed28c838d01612de0565b909750955060a08b0135915080821115612eeb57600080fd5b50612ef88b828c01612de0565b999c989b50969995989497949560c00135949350505050565b60008060208385031215612f2457600080fd5b823567ffffffffffffffff80821115612f3c57600080fd5b818501915085601f830112612f5057600080fd5b813581811115612f5f57600080fd5b8660208260071b8501011115612f7457600080fd5b60209290920196919550909350505050565b60008060408385031215612f9957600080fd5b612fa283612c55565b946020939093013593505050565b60008060208385031215612fc357600080fd5b823567ffffffffffffffff80821115612fdb57600080fd5b818501915085601f830112612fef57600080fd5b813581811115612ffe57600080fd5b8660208260061b8501011115612f7457600080fd5b60006020828403121561302557600080fd5b813561283f81612b1b565b6000806000806000806080878903121561304957600080fd5b61305287612c55565b9550602087013567ffffffffffffffff8082111561306f57600080fd5b61307b8a838b01612de0565b9097509550604089013591508082111561309457600080fd5b506130a189828a01612de0565b979a9699509497949695606090950135949350505050565b6000602082840312156130cb57600080fd5b5035919050565b801515811461190d57600080fd5b6000602082840312156130f257600080fd5b815161283f816130d2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417611834576118346130fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131a3576131a36130fd565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff8083168181036131f2576131f26130fd565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b1660408501525080606084015261322c8184018a612d7c565b905082810360808401526132408189612d7c565b905060ff871660a084015282810360c084015261325d81876129b6565b905067ffffffffffffffff851660e084015282810361010084015261328281856129b6565b9c9b505050505050505050505050565b60ff8181168382160190811115611834576118346130fd565b600060ff8316806132e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b80820180821115611834576118346130fd565b8183823760009101908152919050565b828152606082602083013760800192915050565b60006080828403121561333d57600080fd5b6040516080810181811067ffffffffffffffff8211171561336057613360612a2d565b60405261336c83612c55565b8152602083013561337c816130d2565b602082015261338d60408401612c55565b604082015260608301356133a081612b1b565b60608201529392505050565b6000604082840312156133be57600080fd5b6133c6612a5c565b6133cf83612c55565b8152602083013560208201528091505092915050565b6000602082840312156133f757600080fd5b6040516020810181811067ffffffffffffffff8211171561341a5761341a612a2d565b604052825161342881612b1b565b81529392505050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b1660408501528160608501526134788285018b612d7c565b9150838203608085015261348c828a612d7c565b915060ff881660a085015283820360c08501526134a982886129b6565b90861660e0850152838103610100850152905061328281856129b6565b80357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168114612bc257600080fd5b600082601f83011261350357600080fd5b81356020613513612b5e83612af7565b82815260069290921b8401810191818101908684111561353257600080fd5b8286015b84811015612ba6576040818903121561354f5760008081fd5b613557612a5c565b61356082612c55565b815261356d8583016134c6565b81860152835291830191604001613536565b600082601f83011261359057600080fd5b813560206135a0612b5e83612af7565b82815260079290921b840181019181810190868411156135bf57600080fd5b8286015b84811015612ba65780880360808112156135dd5760008081fd5b6135e5612a85565b6135ee83612c55565b81526040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0840112156136225760008081fd5b61362a612a5c565b9250613637878501612c55565b8352613644818501612c55565b83880152818701929092526060830135918101919091528352918301916080016135c3565b6000602080838503121561367c57600080fd5b823567ffffffffffffffff8082111561369457600080fd5b818501915060408083880312156136aa57600080fd5b6136b2612a5c565b8335838111156136c157600080fd5b84018089038313156136d257600080fd5b6136da612a5c565b8135858111156136e957600080fd5b8201601f81018b136136fa57600080fd5b8035613708612b5e82612af7565b81815260069190911b8201890190898101908d83111561372757600080fd5b928a01925b828410156137775787848f0312156137445760008081fd5b61374c612a5c565b843561375781612b1b565b8152613764858d016134c6565b818d0152825292870192908a019061372c565b84525050508187013593508484111561378f57600080fd5b61379b8a8584016134f2565b81880152825250838501359150828211156137b557600080fd5b6137c18883860161357f565b85820152809550505050505092915050565b805160408084528151848201819052600092602091908201906060870190855b8181101561384c578351805173ffffffffffffffffffffffffffffffffffffffff1684528501517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168584015292840192918501916001016137f3565b50508583015187820388850152805180835290840192506000918401905b808310156138bb578351805167ffffffffffffffff1683528501517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168583015292840192600192909201919085019061386a565b50979650505050505050565b60208152600061283f60208301846137d3565b604081016118348284805167ffffffffffffffff908116835260209182015116910152565b67ffffffffffffffff818116838216019080821115613920576139206130fd565b5092915050565b600060208083526060845160408084870152613945838701836137d3565b878501518782037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183890152805180835290860193506000918601905b808310156139e057845167ffffffffffffffff8151168352878101516139c289850182805167ffffffffffffffff908116835260209182015116910152565b50840151828701529386019360019290920191608090910190613983565b509897505050505050505056fea164736f6c6343000813000a",
}

var MultiCommitStoreABI = MultiCommitStoreMetaData.ABI

var MultiCommitStoreBin = MultiCommitStoreMetaData.Bin

func DeployMultiCommitStore(auth *bind.TransactOpts, backend bind.ContractBackend, staticConfig MultiCommitStoreStaticConfig, srcConfigs []MultiCommitStoreSourceConfigArgs) (common.Address, *types.Transaction, *MultiCommitStore, error) {
	parsed, err := MultiCommitStoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MultiCommitStoreBin), backend, staticConfig, srcConfigs)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiCommitStore{address: address, abi: *parsed, MultiCommitStoreCaller: MultiCommitStoreCaller{contract: contract}, MultiCommitStoreTransactor: MultiCommitStoreTransactor{contract: contract}, MultiCommitStoreFilterer: MultiCommitStoreFilterer{contract: contract}}, nil
}

type MultiCommitStore struct {
	address common.Address
	abi     abi.ABI
	MultiCommitStoreCaller
	MultiCommitStoreTransactor
	MultiCommitStoreFilterer
}

type MultiCommitStoreCaller struct {
	contract *bind.BoundContract
}

type MultiCommitStoreTransactor struct {
	contract *bind.BoundContract
}

type MultiCommitStoreFilterer struct {
	contract *bind.BoundContract
}

type MultiCommitStoreSession struct {
	Contract     *MultiCommitStore
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MultiCommitStoreCallerSession struct {
	Contract *MultiCommitStoreCaller
	CallOpts bind.CallOpts
}

type MultiCommitStoreTransactorSession struct {
	Contract     *MultiCommitStoreTransactor
	TransactOpts bind.TransactOpts
}

type MultiCommitStoreRaw struct {
	Contract *MultiCommitStore
}

type MultiCommitStoreCallerRaw struct {
	Contract *MultiCommitStoreCaller
}

type MultiCommitStoreTransactorRaw struct {
	Contract *MultiCommitStoreTransactor
}

func NewMultiCommitStore(address common.Address, backend bind.ContractBackend) (*MultiCommitStore, error) {
	abi, err := abi.JSON(strings.NewReader(MultiCommitStoreABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMultiCommitStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStore{address: address, abi: abi, MultiCommitStoreCaller: MultiCommitStoreCaller{contract: contract}, MultiCommitStoreTransactor: MultiCommitStoreTransactor{contract: contract}, MultiCommitStoreFilterer: MultiCommitStoreFilterer{contract: contract}}, nil
}

func NewMultiCommitStoreCaller(address common.Address, caller bind.ContractCaller) (*MultiCommitStoreCaller, error) {
	contract, err := bindMultiCommitStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreCaller{contract: contract}, nil
}

func NewMultiCommitStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiCommitStoreTransactor, error) {
	contract, err := bindMultiCommitStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreTransactor{contract: contract}, nil
}

func NewMultiCommitStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiCommitStoreFilterer, error) {
	contract, err := bindMultiCommitStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreFilterer{contract: contract}, nil
}

func bindMultiCommitStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MultiCommitStoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MultiCommitStore *MultiCommitStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCommitStore.Contract.MultiCommitStoreCaller.contract.Call(opts, result, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.MultiCommitStoreTransactor.contract.Transfer(opts)
}

func (_MultiCommitStore *MultiCommitStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.MultiCommitStoreTransactor.contract.Transact(opts, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCommitStore.Contract.contract.Call(opts, result, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.contract.Transfer(opts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.contract.Transact(opts, method, params...)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetDynamicConfig(opts *bind.CallOpts) (MultiCommitStoreDynamicConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getDynamicConfig")

	if err != nil {
		return *new(MultiCommitStoreDynamicConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(MultiCommitStoreDynamicConfig)).(*MultiCommitStoreDynamicConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetDynamicConfig() (MultiCommitStoreDynamicConfig, error) {
	return _MultiCommitStore.Contract.GetDynamicConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetDynamicConfig() (MultiCommitStoreDynamicConfig, error) {
	return _MultiCommitStore.Contract.GetDynamicConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetLatestPriceEpochAndRound(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getLatestPriceEpochAndRound")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetLatestPriceEpochAndRound() (uint64, error) {
	return _MultiCommitStore.Contract.GetLatestPriceEpochAndRound(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetLatestPriceEpochAndRound() (uint64, error) {
	return _MultiCommitStore.Contract.GetLatestPriceEpochAndRound(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetMerkleRoot(opts *bind.CallOpts, sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getMerkleRoot", sourceChainSelector, root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetMerkleRoot(sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	return _MultiCommitStore.Contract.GetMerkleRoot(&_MultiCommitStore.CallOpts, sourceChainSelector, root)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetMerkleRoot(sourceChainSelector uint64, root [32]byte) (*big.Int, error) {
	return _MultiCommitStore.Contract.GetMerkleRoot(&_MultiCommitStore.CallOpts, sourceChainSelector, root)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetOnRamp(opts *bind.CallOpts, sourceChainSelector uint64) (common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getOnRamp", sourceChainSelector)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetOnRamp(sourceChainSelector uint64) (common.Address, error) {
	return _MultiCommitStore.Contract.GetOnRamp(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetOnRamp(sourceChainSelector uint64) (common.Address, error) {
	return _MultiCommitStore.Contract.GetOnRamp(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetSourceConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getSourceConfig", sourceChainSelector)

	if err != nil {
		return *new(IMultiCommitStoreSourceConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(IMultiCommitStoreSourceConfig)).(*IMultiCommitStoreSourceConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetSourceConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	return _MultiCommitStore.Contract.GetSourceConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetSourceConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	return _MultiCommitStore.Contract.GetSourceConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetSrcConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getSrcConfig", sourceChainSelector)

	if err != nil {
		return *new(IMultiCommitStoreSourceConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(IMultiCommitStoreSourceConfig)).(*IMultiCommitStoreSourceConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetSrcConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	return _MultiCommitStore.Contract.GetSrcConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetSrcConfig(sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error) {
	return _MultiCommitStore.Contract.GetSrcConfig(&_MultiCommitStore.CallOpts, sourceChainSelector)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetStaticConfig(opts *bind.CallOpts) (MultiCommitStoreStaticConfig, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getStaticConfig")

	if err != nil {
		return *new(MultiCommitStoreStaticConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(MultiCommitStoreStaticConfig)).(*MultiCommitStoreStaticConfig)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetStaticConfig() (MultiCommitStoreStaticConfig, error) {
	return _MultiCommitStore.Contract.GetStaticConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetStaticConfig() (MultiCommitStoreStaticConfig, error) {
	return _MultiCommitStore.Contract.GetStaticConfig(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) GetTransmitters() ([]common.Address, error) {
	return _MultiCommitStore.Contract.GetTransmitters(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) GetTransmitters() ([]common.Address, error) {
	return _MultiCommitStore.Contract.GetTransmitters(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsARMHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isARMHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsBlessed(root [32]byte) (bool, error) {
	return _MultiCommitStore.Contract.IsBlessed(&_MultiCommitStore.CallOpts, root)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _MultiCommitStore.Contract.IsBlessed(&_MultiCommitStore.CallOpts, root)
}

func (_MultiCommitStore *MultiCommitStoreCaller) IsUnpausedAndARMHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "isUnpausedAndARMHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) IsUnpausedAndARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsUnpausedAndARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) IsUnpausedAndARMHealthy() (bool, error) {
	return _MultiCommitStore.Contract.IsUnpausedAndARMHealthy(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_MultiCommitStore *MultiCommitStoreSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDetails(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDetails(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MultiCommitStore *MultiCommitStoreSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDigestAndEpoch(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MultiCommitStore.Contract.LatestConfigDigestAndEpoch(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Owner() (common.Address, error) {
	return _MultiCommitStore.Contract.Owner(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Owner() (common.Address, error) {
	return _MultiCommitStore.Contract.Owner(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Paused() (bool, error) {
	return _MultiCommitStore.Contract.Paused(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Paused() (bool, error) {
	return _MultiCommitStore.Contract.Paused(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) TypeAndVersion() (string, error) {
	return _MultiCommitStore.Contract.TypeAndVersion(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) TypeAndVersion() (string, error) {
	return _MultiCommitStore.Contract.TypeAndVersion(&_MultiCommitStore.CallOpts)
}

func (_MultiCommitStore *MultiCommitStoreCaller) Verify(opts *bind.CallOpts, sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MultiCommitStore.contract.Call(opts, &out, "verify", sourceChainSelector, hashedLeaves, proofs, proofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_MultiCommitStore *MultiCommitStoreSession) Verify(sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _MultiCommitStore.Contract.Verify(&_MultiCommitStore.CallOpts, sourceChainSelector, hashedLeaves, proofs, proofFlagBits)
}

func (_MultiCommitStore *MultiCommitStoreCallerSession) Verify(sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _MultiCommitStore.Contract.Verify(&_MultiCommitStore.CallOpts, sourceChainSelector, hashedLeaves, proofs, proofFlagBits)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "acceptOwnership")
}

func (_MultiCommitStore *MultiCommitStoreSession) AcceptOwnership() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.AcceptOwnership(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.AcceptOwnership(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) ApplySourceConfigUpdates(opts *bind.TransactOpts, srcConfigs []MultiCommitStoreSourceConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "applySourceConfigUpdates", srcConfigs)
}

func (_MultiCommitStore *MultiCommitStoreSession) ApplySourceConfigUpdates(srcConfigs []MultiCommitStoreSourceConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ApplySourceConfigUpdates(&_MultiCommitStore.TransactOpts, srcConfigs)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) ApplySourceConfigUpdates(srcConfigs []MultiCommitStoreSourceConfigArgs) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ApplySourceConfigUpdates(&_MultiCommitStore.TransactOpts, srcConfigs)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "pause")
}

func (_MultiCommitStore *MultiCommitStoreSession) Pause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Pause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Pause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Pause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset []MultiCommitStoreUblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreSession) ResetUnblessedRoots(rootToReset []MultiCommitStoreUblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ResetUnblessedRoots(&_MultiCommitStore.TransactOpts, rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) ResetUnblessedRoots(rootToReset []MultiCommitStoreUblessedRoot) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.ResetUnblessedRoots(&_MultiCommitStore.TransactOpts, rootToReset)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) SetLatestPriceEpochAndRound(opts *bind.TransactOpts, latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "setLatestPriceEpochAndRound", latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreSession) SetLatestPriceEpochAndRound(latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetLatestPriceEpochAndRound(&_MultiCommitStore.TransactOpts, latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) SetLatestPriceEpochAndRound(latestPriceEpochAndRound *big.Int) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetLatestPriceEpochAndRound(&_MultiCommitStore.TransactOpts, latestPriceEpochAndRound)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "setOCR2Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetOCR2Config(&_MultiCommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.SetOCR2Config(&_MultiCommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "transferOwnership", to)
}

func (_MultiCommitStore *MultiCommitStoreSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.TransferOwnership(&_MultiCommitStore.TransactOpts, to)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.TransferOwnership(&_MultiCommitStore.TransactOpts, to)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Transmit(&_MultiCommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Transmit(&_MultiCommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MultiCommitStore *MultiCommitStoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCommitStore.contract.Transact(opts, "unpause")
}

func (_MultiCommitStore *MultiCommitStoreSession) Unpause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Unpause(&_MultiCommitStore.TransactOpts)
}

func (_MultiCommitStore *MultiCommitStoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _MultiCommitStore.Contract.Unpause(&_MultiCommitStore.TransactOpts)
}

type MultiCommitStoreConfigSetIterator struct {
	Event *MultiCommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreConfigSet struct {
	StaticConfig  MultiCommitStoreStaticConfig
	DynamicConfig MultiCommitStoreDynamicConfig
	Raw           types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterConfigSet(opts *bind.FilterOpts) (*MultiCommitStoreConfigSetIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreConfigSetIterator{contract: _MultiCommitStore.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreConfigSet)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseConfigSet(log types.Log) (*MultiCommitStoreConfigSet, error) {
	event := new(MultiCommitStoreConfigSet)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreConfigSet0Iterator struct {
	Event *MultiCommitStoreConfigSet0

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreConfigSet0Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreConfigSet0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreConfigSet0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreConfigSet0Iterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreConfigSet0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreConfigSet0 struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterConfigSet0(opts *bind.FilterOpts) (*MultiCommitStoreConfigSet0Iterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreConfigSet0Iterator{contract: _MultiCommitStore.contract, event: "ConfigSet0", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet0) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreConfigSet0)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseConfigSet0(log types.Log) (*MultiCommitStoreConfigSet0, error) {
	event := new(MultiCommitStoreConfigSet0)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreOwnershipTransferRequestedIterator struct {
	Event *MultiCommitStoreOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreOwnershipTransferRequestedIterator{contract: _MultiCommitStore.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreOwnershipTransferRequested)
				if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseOwnershipTransferRequested(log types.Log) (*MultiCommitStoreOwnershipTransferRequested, error) {
	event := new(MultiCommitStoreOwnershipTransferRequested)
	if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreOwnershipTransferredIterator struct {
	Event *MultiCommitStoreOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreOwnershipTransferredIterator{contract: _MultiCommitStore.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreOwnershipTransferred)
				if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseOwnershipTransferred(log types.Log) (*MultiCommitStoreOwnershipTransferred, error) {
	event := new(MultiCommitStoreOwnershipTransferred)
	if err := _MultiCommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStorePausedIterator struct {
	Event *MultiCommitStorePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStorePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStorePausedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStorePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterPaused(opts *bind.FilterOpts) (*MultiCommitStorePausedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStorePausedIterator{contract: _MultiCommitStore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStorePaused) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStorePaused)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParsePaused(log types.Log) (*MultiCommitStorePaused, error) {
	event := new(MultiCommitStorePaused)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreReportAcceptedIterator struct {
	Event *MultiCommitStoreReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreReportAccepted struct {
	Report MultiCommitStoreCommitReport
	Raw    types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*MultiCommitStoreReportAcceptedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreReportAcceptedIterator{contract: _MultiCommitStore.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreReportAccepted) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreReportAccepted)
				if err := _MultiCommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseReportAccepted(log types.Log) (*MultiCommitStoreReportAccepted, error) {
	event := new(MultiCommitStoreReportAccepted)
	if err := _MultiCommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreRootRemovedIterator struct {
	Event *MultiCommitStoreRootRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreRootRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreRootRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreRootRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreRootRemovedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreRootRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreRootRemoved struct {
	Root [32]byte
	Raw  types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterRootRemoved(opts *bind.FilterOpts) (*MultiCommitStoreRootRemovedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreRootRemovedIterator{contract: _MultiCommitStore.contract, event: "RootRemoved", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreRootRemoved) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreRootRemoved)
				if err := _MultiCommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseRootRemoved(log types.Log) (*MultiCommitStoreRootRemoved, error) {
	event := new(MultiCommitStoreRootRemoved)
	if err := _MultiCommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreSourceConfigUpdatedIterator struct {
	Event *MultiCommitStoreSourceConfigUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreSourceConfigUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreSourceConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreSourceConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreSourceConfigUpdatedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreSourceConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreSourceConfigUpdated struct {
	SourceChainSelector uint64
	SrcConfig           IMultiCommitStoreSourceConfig
	Raw                 types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterSourceConfigUpdated(opts *bind.FilterOpts, sourceChainSelector []uint64) (*MultiCommitStoreSourceConfigUpdatedIterator, error) {

	var sourceChainSelectorRule []interface{}
	for _, sourceChainSelectorItem := range sourceChainSelector {
		sourceChainSelectorRule = append(sourceChainSelectorRule, sourceChainSelectorItem)
	}

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "SourceConfigUpdated", sourceChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreSourceConfigUpdatedIterator{contract: _MultiCommitStore.contract, event: "SourceConfigUpdated", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchSourceConfigUpdated(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreSourceConfigUpdated, sourceChainSelector []uint64) (event.Subscription, error) {

	var sourceChainSelectorRule []interface{}
	for _, sourceChainSelectorItem := range sourceChainSelector {
		sourceChainSelectorRule = append(sourceChainSelectorRule, sourceChainSelectorItem)
	}

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "SourceConfigUpdated", sourceChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreSourceConfigUpdated)
				if err := _MultiCommitStore.contract.UnpackLog(event, "SourceConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseSourceConfigUpdated(log types.Log) (*MultiCommitStoreSourceConfigUpdated, error) {
	event := new(MultiCommitStoreSourceConfigUpdated)
	if err := _MultiCommitStore.contract.UnpackLog(event, "SourceConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreTransmittedIterator struct {
	Event *MultiCommitStoreTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreTransmittedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterTransmitted(opts *bind.FilterOpts) (*MultiCommitStoreTransmittedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreTransmittedIterator{contract: _MultiCommitStore.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreTransmitted) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreTransmitted)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseTransmitted(log types.Log) (*MultiCommitStoreTransmitted, error) {
	event := new(MultiCommitStoreTransmitted)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MultiCommitStoreUnpausedIterator struct {
	Event *MultiCommitStoreUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MultiCommitStoreUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCommitStoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MultiCommitStoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MultiCommitStoreUnpausedIterator) Error() error {
	return it.fail
}

func (it *MultiCommitStoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MultiCommitStoreUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_MultiCommitStore *MultiCommitStoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MultiCommitStoreUnpausedIterator, error) {

	logs, sub, err := _MultiCommitStore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MultiCommitStoreUnpausedIterator{contract: _MultiCommitStore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _MultiCommitStore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MultiCommitStoreUnpaused)
				if err := _MultiCommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MultiCommitStore *MultiCommitStoreFilterer) ParseUnpaused(log types.Log) (*MultiCommitStoreUnpaused, error) {
	event := new(MultiCommitStoreUnpaused)
	if err := _MultiCommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_MultiCommitStore *MultiCommitStore) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MultiCommitStore.abi.Events["ConfigSet"].ID:
		return _MultiCommitStore.ParseConfigSet(log)
	case _MultiCommitStore.abi.Events["ConfigSet0"].ID:
		return _MultiCommitStore.ParseConfigSet0(log)
	case _MultiCommitStore.abi.Events["OwnershipTransferRequested"].ID:
		return _MultiCommitStore.ParseOwnershipTransferRequested(log)
	case _MultiCommitStore.abi.Events["OwnershipTransferred"].ID:
		return _MultiCommitStore.ParseOwnershipTransferred(log)
	case _MultiCommitStore.abi.Events["Paused"].ID:
		return _MultiCommitStore.ParsePaused(log)
	case _MultiCommitStore.abi.Events["ReportAccepted"].ID:
		return _MultiCommitStore.ParseReportAccepted(log)
	case _MultiCommitStore.abi.Events["RootRemoved"].ID:
		return _MultiCommitStore.ParseRootRemoved(log)
	case _MultiCommitStore.abi.Events["SourceConfigUpdated"].ID:
		return _MultiCommitStore.ParseSourceConfigUpdated(log)
	case _MultiCommitStore.abi.Events["Transmitted"].ID:
		return _MultiCommitStore.ParseTransmitted(log)
	case _MultiCommitStore.abi.Events["Unpaused"].ID:
		return _MultiCommitStore.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MultiCommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0x7882169f23bcc4c4bbd6f25544a5e4edaec9002828e752af06697c440f3516e1")
}

func (MultiCommitStoreConfigSet0) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (MultiCommitStoreOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MultiCommitStoreOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (MultiCommitStorePaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (MultiCommitStoreReportAccepted) Topic() common.Hash {
	return common.HexToHash("0xaaefc28340f1ee9610a1370eafda130d1b58f0523b62b8eba25fdfbd79b0eb6b")
}

func (MultiCommitStoreRootRemoved) Topic() common.Hash {
	return common.HexToHash("0x202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f12")
}

func (MultiCommitStoreSourceConfigUpdated) Topic() common.Hash {
	return common.HexToHash("0x1d9af807eb98a74c187b6399b8f2f06d3af8b4a4802543684ab582004f3c4b9f")
}

func (MultiCommitStoreTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (MultiCommitStoreUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_MultiCommitStore *MultiCommitStore) Address() common.Address {
	return _MultiCommitStore.address
}

type MultiCommitStoreInterface interface {
	GetDynamicConfig(opts *bind.CallOpts) (MultiCommitStoreDynamicConfig, error)

	GetLatestPriceEpochAndRound(opts *bind.CallOpts) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, sourceChainSelector uint64, root [32]byte) (*big.Int, error)

	GetOnRamp(opts *bind.CallOpts, sourceChainSelector uint64) (common.Address, error)

	GetSourceConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error)

	GetSrcConfig(opts *bind.CallOpts, sourceChainSelector uint64) (IMultiCommitStoreSourceConfig, error)

	GetStaticConfig(opts *bind.CallOpts) (MultiCommitStoreStaticConfig, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	IsARMHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	IsUnpausedAndARMHealthy(opts *bind.CallOpts) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, sourceChainSelector uint64, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplySourceConfigUpdates(opts *bind.TransactOpts, srcConfigs []MultiCommitStoreSourceConfigArgs) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset []MultiCommitStoreUblessedRoot) (*types.Transaction, error)

	SetLatestPriceEpochAndRound(opts *bind.TransactOpts, latestPriceEpochAndRound *big.Int) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*MultiCommitStoreConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*MultiCommitStoreConfigSet, error)

	FilterConfigSet0(opts *bind.FilterOpts) (*MultiCommitStoreConfigSet0Iterator, error)

	WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreConfigSet0) (event.Subscription, error)

	ParseConfigSet0(log types.Log) (*MultiCommitStoreConfigSet0, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MultiCommitStoreOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MultiCommitStoreOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MultiCommitStoreOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*MultiCommitStorePausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStorePaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*MultiCommitStorePaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*MultiCommitStoreReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*MultiCommitStoreReportAccepted, error)

	FilterRootRemoved(opts *bind.FilterOpts) (*MultiCommitStoreRootRemovedIterator, error)

	WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreRootRemoved) (event.Subscription, error)

	ParseRootRemoved(log types.Log) (*MultiCommitStoreRootRemoved, error)

	FilterSourceConfigUpdated(opts *bind.FilterOpts, sourceChainSelector []uint64) (*MultiCommitStoreSourceConfigUpdatedIterator, error)

	WatchSourceConfigUpdated(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreSourceConfigUpdated, sourceChainSelector []uint64) (event.Subscription, error)

	ParseSourceConfigUpdated(log types.Log) (*MultiCommitStoreSourceConfigUpdated, error)

	FilterTransmitted(opts *bind.FilterOpts) (*MultiCommitStoreTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*MultiCommitStoreTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*MultiCommitStoreUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MultiCommitStoreUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*MultiCommitStoreUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
