// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testonly_liquidity_manager

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type ILiquidityManagerCrossChainLiquidityManagerArgs struct {
	RemoteLiquidityManager common.Address
	LocalBridge            common.Address
	RemoteToken            common.Address
	RemoteChainSelector    uint64
	Enabled                bool
}

type ILiquidityManagerLiquidityInstructions struct {
	SendLiquidityParams    []ILiquidityManagerSendLiquidityParams
	ReceiveLiquidityParams []ILiquidityManagerReceiveLiquidityParams
}

type ILiquidityManagerReceiveLiquidityParams struct {
	Amount              *big.Int
	RemoteChainSelector uint64
	BridgeData          []byte
}

type ILiquidityManagerSendLiquidityParams struct {
	Amount              *big.Int
	RemoteChainSelector uint64
}

type LiquidityManagerCrossChainLiquidityManager struct {
	RemoteLiquidityManager common.Address
	LocalBridge            common.Address
	RemoteToken            common.Address
	Enabled                bool
}

var TestOnlyLiquidityManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"localChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidRemoteChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestSequenceNumber\",\"type\":\"uint64\"}],\"name\":\"NonIncreasingSequenceNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fromChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"toChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCrossChainLiquidityMangers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getCrossChainLiquidityManager\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structLiquidityManager.CrossChainLiquidityManager\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalLiquidityContainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_localToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"internalType\":\"structILiquidityManager.SendLiquidityParams[]\",\"name\":\"sendLiquidityParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"internalType\":\"structILiquidityManager.ReceiveLiquidityParams[]\",\"name\":\"receiveLiquidityParams\",\"type\":\"tuple[]\"}],\"internalType\":\"structILiquidityManager.LiquidityInstructions\",\"name\":\"liquidityInstructions\",\"type\":\"tuple\"}],\"name\":\"publicEncodeReport\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"}],\"name\":\"publicReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs\",\"name\":\"crossChainLiqManager\",\"type\":\"tuple\"}],\"name\":\"setCrossChainLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs[]\",\"name\":\"crossChainLiquidityManagers\",\"type\":\"tuple[]\"}],\"name\":\"setCrossChainLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"name\":\"setLocalLiquidityContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR3Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

var TestOnlyLiquidityManagerABI = TestOnlyLiquidityManagerMetaData.ABI

var TestOnlyLiquidityManagerBin = TestOnlyLiquidityManagerMetaData.Bin

func DeployTestOnlyLiquidityManager(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, localChainSelector uint64, localLiquidityContainer common.Address) (common.Address, *types.Transaction, *TestOnlyLiquidityManager, error) {
	parsed, err := TestOnlyLiquidityManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestOnlyLiquidityManagerBin), backend, token, localChainSelector, localLiquidityContainer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestOnlyLiquidityManager{address: address, abi: *parsed, TestOnlyLiquidityManagerCaller: TestOnlyLiquidityManagerCaller{contract: contract}, TestOnlyLiquidityManagerTransactor: TestOnlyLiquidityManagerTransactor{contract: contract}, TestOnlyLiquidityManagerFilterer: TestOnlyLiquidityManagerFilterer{contract: contract}}, nil
}

type TestOnlyLiquidityManager struct {
	address common.Address
	abi     abi.ABI
	TestOnlyLiquidityManagerCaller
	TestOnlyLiquidityManagerTransactor
	TestOnlyLiquidityManagerFilterer
}

type TestOnlyLiquidityManagerCaller struct {
	contract *bind.BoundContract
}

type TestOnlyLiquidityManagerTransactor struct {
	contract *bind.BoundContract
}

type TestOnlyLiquidityManagerFilterer struct {
	contract *bind.BoundContract
}

type TestOnlyLiquidityManagerSession struct {
	Contract     *TestOnlyLiquidityManager
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestOnlyLiquidityManagerCallerSession struct {
	Contract *TestOnlyLiquidityManagerCaller
	CallOpts bind.CallOpts
}

type TestOnlyLiquidityManagerTransactorSession struct {
	Contract     *TestOnlyLiquidityManagerTransactor
	TransactOpts bind.TransactOpts
}

type TestOnlyLiquidityManagerRaw struct {
	Contract *TestOnlyLiquidityManager
}

type TestOnlyLiquidityManagerCallerRaw struct {
	Contract *TestOnlyLiquidityManagerCaller
}

type TestOnlyLiquidityManagerTransactorRaw struct {
	Contract *TestOnlyLiquidityManagerTransactor
}

func NewTestOnlyLiquidityManager(address common.Address, backend bind.ContractBackend) (*TestOnlyLiquidityManager, error) {
	abi, err := abi.JSON(strings.NewReader(TestOnlyLiquidityManagerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestOnlyLiquidityManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManager{address: address, abi: abi, TestOnlyLiquidityManagerCaller: TestOnlyLiquidityManagerCaller{contract: contract}, TestOnlyLiquidityManagerTransactor: TestOnlyLiquidityManagerTransactor{contract: contract}, TestOnlyLiquidityManagerFilterer: TestOnlyLiquidityManagerFilterer{contract: contract}}, nil
}

func NewTestOnlyLiquidityManagerCaller(address common.Address, caller bind.ContractCaller) (*TestOnlyLiquidityManagerCaller, error) {
	contract, err := bindTestOnlyLiquidityManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerCaller{contract: contract}, nil
}

func NewTestOnlyLiquidityManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*TestOnlyLiquidityManagerTransactor, error) {
	contract, err := bindTestOnlyLiquidityManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerTransactor{contract: contract}, nil
}

func NewTestOnlyLiquidityManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*TestOnlyLiquidityManagerFilterer, error) {
	contract, err := bindTestOnlyLiquidityManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerFilterer{contract: contract}, nil
}

func bindTestOnlyLiquidityManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TestOnlyLiquidityManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestOnlyLiquidityManager.Contract.TestOnlyLiquidityManagerCaller.contract.Call(opts, result, method, params...)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.TestOnlyLiquidityManagerTransactor.contract.Transfer(opts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.TestOnlyLiquidityManagerTransactor.contract.Transact(opts, method, params...)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestOnlyLiquidityManager.Contract.contract.Call(opts, result, method, params...)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.contract.Transfer(opts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.contract.Transact(opts, method, params...)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) GetAllCrossChainLiquidityMangers(opts *bind.CallOpts) ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "getAllCrossChainLiquidityMangers")

	if err != nil {
		return *new([]ILiquidityManagerCrossChainLiquidityManagerArgs), err
	}

	out0 := *abi.ConvertType(out[0], new([]ILiquidityManagerCrossChainLiquidityManagerArgs)).(*[]ILiquidityManagerCrossChainLiquidityManagerArgs)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) GetAllCrossChainLiquidityMangers() ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	return _TestOnlyLiquidityManager.Contract.GetAllCrossChainLiquidityMangers(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) GetAllCrossChainLiquidityMangers() ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	return _TestOnlyLiquidityManager.Contract.GetAllCrossChainLiquidityMangers(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) GetCrossChainLiquidityManager(opts *bind.CallOpts, chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "getCrossChainLiquidityManager", chainSelector)

	if err != nil {
		return *new(LiquidityManagerCrossChainLiquidityManager), err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidityManagerCrossChainLiquidityManager)).(*LiquidityManagerCrossChainLiquidityManager)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) GetCrossChainLiquidityManager(chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	return _TestOnlyLiquidityManager.Contract.GetCrossChainLiquidityManager(&_TestOnlyLiquidityManager.CallOpts, chainSelector)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) GetCrossChainLiquidityManager(chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	return _TestOnlyLiquidityManager.Contract.GetCrossChainLiquidityManager(&_TestOnlyLiquidityManager.CallOpts, chainSelector)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) GetLiquidity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "getLiquidity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) GetLiquidity() (*big.Int, error) {
	return _TestOnlyLiquidityManager.Contract.GetLiquidity(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) GetLiquidity() (*big.Int, error) {
	return _TestOnlyLiquidityManager.Contract.GetLiquidity(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "getLocalLiquidityContainer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.GetLocalLiquidityContainer(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.GetLocalLiquidityContainer(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) GetTransmitters() ([]common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.GetTransmitters(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) GetTransmitters() ([]common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.GetTransmitters(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) ILocalToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "i_localToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) ILocalToken() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.ILocalToken(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) ILocalToken() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.ILocalToken(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestOnlyLiquidityManager.Contract.LatestConfigDetails(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestOnlyLiquidityManager.Contract.LatestConfigDetails(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SequenceNumber = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestOnlyLiquidityManager.Contract.LatestConfigDigestAndEpoch(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestOnlyLiquidityManager.Contract.LatestConfigDigestAndEpoch(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) Owner() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.Owner(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) Owner() (common.Address, error) {
	return _TestOnlyLiquidityManager.Contract.Owner(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) PublicEncodeReport(opts *bind.CallOpts, liquidityInstructions ILiquidityManagerLiquidityInstructions) ([]byte, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "publicEncodeReport", liquidityInstructions)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) PublicEncodeReport(liquidityInstructions ILiquidityManagerLiquidityInstructions) ([]byte, error) {
	return _TestOnlyLiquidityManager.Contract.PublicEncodeReport(&_TestOnlyLiquidityManager.CallOpts, liquidityInstructions)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) PublicEncodeReport(liquidityInstructions ILiquidityManagerLiquidityInstructions) ([]byte, error) {
	return _TestOnlyLiquidityManager.Contract.PublicEncodeReport(&_TestOnlyLiquidityManager.CallOpts, liquidityInstructions)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestOnlyLiquidityManager.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) TypeAndVersion() (string, error) {
	return _TestOnlyLiquidityManager.Contract.TypeAndVersion(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerCallerSession) TypeAndVersion() (string, error) {
	return _TestOnlyLiquidityManager.Contract.TypeAndVersion(&_TestOnlyLiquidityManager.CallOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "acceptOwnership")
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) AcceptOwnership() (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.AcceptOwnership(&_TestOnlyLiquidityManager.TransactOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.AcceptOwnership(&_TestOnlyLiquidityManager.TransactOpts)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "addLiquidity", amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.AddLiquidity(&_TestOnlyLiquidityManager.TransactOpts, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.AddLiquidity(&_TestOnlyLiquidityManager.TransactOpts, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) PublicReport(opts *bind.TransactOpts, report []byte, ocrSeqNum uint64) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "publicReport", report, ocrSeqNum)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) PublicReport(report []byte, ocrSeqNum uint64) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.PublicReport(&_TestOnlyLiquidityManager.TransactOpts, report, ocrSeqNum)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) PublicReport(report []byte, ocrSeqNum uint64) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.PublicReport(&_TestOnlyLiquidityManager.TransactOpts, report, ocrSeqNum)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "rebalanceLiquidity", chainSelector, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.RebalanceLiquidity(&_TestOnlyLiquidityManager.TransactOpts, chainSelector, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.RebalanceLiquidity(&_TestOnlyLiquidityManager.TransactOpts, chainSelector, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "removeLiquidity", amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.RemoveLiquidity(&_TestOnlyLiquidityManager.TransactOpts, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.RemoveLiquidity(&_TestOnlyLiquidityManager.TransactOpts, amount)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) SetCrossChainLiquidityManager(opts *bind.TransactOpts, crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "setCrossChainLiquidityManager", crossChainLiqManager)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) SetCrossChainLiquidityManager(crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetCrossChainLiquidityManager(&_TestOnlyLiquidityManager.TransactOpts, crossChainLiqManager)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) SetCrossChainLiquidityManager(crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetCrossChainLiquidityManager(&_TestOnlyLiquidityManager.TransactOpts, crossChainLiqManager)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) SetCrossChainLiquidityManager0(opts *bind.TransactOpts, crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "setCrossChainLiquidityManager0", crossChainLiquidityManagers)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) SetCrossChainLiquidityManager0(crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetCrossChainLiquidityManager0(&_TestOnlyLiquidityManager.TransactOpts, crossChainLiquidityManagers)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) SetCrossChainLiquidityManager0(crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetCrossChainLiquidityManager0(&_TestOnlyLiquidityManager.TransactOpts, crossChainLiquidityManagers)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "setLocalLiquidityContainer", localLiquidityContainer)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetLocalLiquidityContainer(&_TestOnlyLiquidityManager.TransactOpts, localLiquidityContainer)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetLocalLiquidityContainer(&_TestOnlyLiquidityManager.TransactOpts, localLiquidityContainer)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "setOCR3Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetOCR3Config(&_TestOnlyLiquidityManager.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.SetOCR3Config(&_TestOnlyLiquidityManager.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "transferOwnership", to)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.TransferOwnership(&_TestOnlyLiquidityManager.TransactOpts, to)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.TransferOwnership(&_TestOnlyLiquidityManager.TransactOpts, to)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.Transmit(&_TestOnlyLiquidityManager.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestOnlyLiquidityManager.Contract.Transmit(&_TestOnlyLiquidityManager.TransactOpts, reportContext, report, rs, ss, rawVs)
}

type TestOnlyLiquidityManagerConfigSetIterator struct {
	Event *TestOnlyLiquidityManagerConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerConfigSetIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterConfigSet(opts *bind.FilterOpts) (*TestOnlyLiquidityManagerConfigSetIterator, error) {

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerConfigSetIterator{contract: _TestOnlyLiquidityManager.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerConfigSet) (event.Subscription, error) {

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerConfigSet)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseConfigSet(log types.Log) (*TestOnlyLiquidityManagerConfigSet, error) {
	event := new(TestOnlyLiquidityManagerConfigSet)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerLiquidityAddedIterator struct {
	Event *TestOnlyLiquidityManagerLiquidityAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerLiquidityAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerLiquidityAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerLiquidityAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerLiquidityAddedIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerLiquidityAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerLiquidityAdded struct {
	Provider common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*TestOnlyLiquidityManagerLiquidityAddedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerLiquidityAddedIterator{contract: _TestOnlyLiquidityManager.contract, event: "LiquidityAdded", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerLiquidityAdded)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseLiquidityAdded(log types.Log) (*TestOnlyLiquidityManagerLiquidityAdded, error) {
	event := new(TestOnlyLiquidityManagerLiquidityAdded)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerLiquidityRemovedIterator struct {
	Event *TestOnlyLiquidityManagerLiquidityRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerLiquidityRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerLiquidityRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerLiquidityRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerLiquidityRemovedIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerLiquidityRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerLiquidityRemoved struct {
	Remover common.Address
	Amount  *big.Int
	Raw     types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*TestOnlyLiquidityManagerLiquidityRemovedIterator, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerLiquidityRemovedIterator{contract: _TestOnlyLiquidityManager.contract, event: "LiquidityRemoved", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerLiquidityRemoved)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseLiquidityRemoved(log types.Log) (*TestOnlyLiquidityManagerLiquidityRemoved, error) {
	event := new(TestOnlyLiquidityManagerLiquidityRemoved)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerLiquidityTransferredIterator struct {
	Event *TestOnlyLiquidityManagerLiquidityTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerLiquidityTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerLiquidityTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerLiquidityTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerLiquidityTransferredIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerLiquidityTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerLiquidityTransferred struct {
	OcrSeqNum         uint64
	FromChainSelector uint64
	ToChainSelector   uint64
	To                common.Address
	Amount            *big.Int
	Raw               types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*TestOnlyLiquidityManagerLiquidityTransferredIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerLiquidityTransferredIterator{contract: _TestOnlyLiquidityManager.contract, event: "LiquidityTransferred", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerLiquidityTransferred)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseLiquidityTransferred(log types.Log) (*TestOnlyLiquidityManagerLiquidityTransferred, error) {
	event := new(TestOnlyLiquidityManagerLiquidityTransferred)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerOwnershipTransferRequestedIterator struct {
	Event *TestOnlyLiquidityManagerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestOnlyLiquidityManagerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerOwnershipTransferRequestedIterator{contract: _TestOnlyLiquidityManager.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerOwnershipTransferRequested)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseOwnershipTransferRequested(log types.Log) (*TestOnlyLiquidityManagerOwnershipTransferRequested, error) {
	event := new(TestOnlyLiquidityManagerOwnershipTransferRequested)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerOwnershipTransferredIterator struct {
	Event *TestOnlyLiquidityManagerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestOnlyLiquidityManagerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerOwnershipTransferredIterator{contract: _TestOnlyLiquidityManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerOwnershipTransferred)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseOwnershipTransferred(log types.Log) (*TestOnlyLiquidityManagerOwnershipTransferred, error) {
	event := new(TestOnlyLiquidityManagerOwnershipTransferred)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestOnlyLiquidityManagerTransmittedIterator struct {
	Event *TestOnlyLiquidityManagerTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestOnlyLiquidityManagerTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOnlyLiquidityManagerTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestOnlyLiquidityManagerTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestOnlyLiquidityManagerTransmittedIterator) Error() error {
	return it.fail
}

func (it *TestOnlyLiquidityManagerTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestOnlyLiquidityManagerTransmitted struct {
	ConfigDigest   [32]byte
	SequenceNumber uint64
	Raw            types.Log
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) FilterTransmitted(opts *bind.FilterOpts) (*TestOnlyLiquidityManagerTransmittedIterator, error) {

	logs, sub, err := _TestOnlyLiquidityManager.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &TestOnlyLiquidityManagerTransmittedIterator{contract: _TestOnlyLiquidityManager.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerTransmitted) (event.Subscription, error) {

	logs, sub, err := _TestOnlyLiquidityManager.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestOnlyLiquidityManagerTransmitted)
				if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManagerFilterer) ParseTransmitted(log types.Log) (*TestOnlyLiquidityManagerTransmitted, error) {
	event := new(TestOnlyLiquidityManagerTransmitted)
	if err := _TestOnlyLiquidityManager.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs       bool
	ConfigDigest   [32]byte
	SequenceNumber uint64
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManager) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestOnlyLiquidityManager.abi.Events["ConfigSet"].ID:
		return _TestOnlyLiquidityManager.ParseConfigSet(log)
	case _TestOnlyLiquidityManager.abi.Events["LiquidityAdded"].ID:
		return _TestOnlyLiquidityManager.ParseLiquidityAdded(log)
	case _TestOnlyLiquidityManager.abi.Events["LiquidityRemoved"].ID:
		return _TestOnlyLiquidityManager.ParseLiquidityRemoved(log)
	case _TestOnlyLiquidityManager.abi.Events["LiquidityTransferred"].ID:
		return _TestOnlyLiquidityManager.ParseLiquidityTransferred(log)
	case _TestOnlyLiquidityManager.abi.Events["OwnershipTransferRequested"].ID:
		return _TestOnlyLiquidityManager.ParseOwnershipTransferRequested(log)
	case _TestOnlyLiquidityManager.abi.Events["OwnershipTransferred"].ID:
		return _TestOnlyLiquidityManager.ParseOwnershipTransferred(log)
	case _TestOnlyLiquidityManager.abi.Events["Transmitted"].ID:
		return _TestOnlyLiquidityManager.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestOnlyLiquidityManagerConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (TestOnlyLiquidityManagerLiquidityAdded) Topic() common.Hash {
	return common.HexToHash("0xc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb312088")
}

func (TestOnlyLiquidityManagerLiquidityRemoved) Topic() common.Hash {
	return common.HexToHash("0xc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719")
}

func (TestOnlyLiquidityManagerLiquidityTransferred) Topic() common.Hash {
	return common.HexToHash("0xc3699d6ab2762f468855d25ae224adfffe5b2bc4d57ca590cdfdbbbeefbee22f")
}

func (TestOnlyLiquidityManagerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (TestOnlyLiquidityManagerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestOnlyLiquidityManagerTransmitted) Topic() common.Hash {
	return common.HexToHash("0xe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2")
}

func (_TestOnlyLiquidityManager *TestOnlyLiquidityManager) Address() common.Address {
	return _TestOnlyLiquidityManager.address
}

type TestOnlyLiquidityManagerInterface interface {
	GetAllCrossChainLiquidityMangers(opts *bind.CallOpts) ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error)

	GetCrossChainLiquidityManager(opts *bind.CallOpts, chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error)

	GetLiquidity(opts *bind.CallOpts) (*big.Int, error)

	GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	ILocalToken(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PublicEncodeReport(opts *bind.CallOpts, liquidityInstructions ILiquidityManagerLiquidityInstructions) ([]byte, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	PublicReport(opts *bind.TransactOpts, report []byte, ocrSeqNum uint64) (*types.Transaction, error)

	RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int) (*types.Transaction, error)

	RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	SetCrossChainLiquidityManager(opts *bind.TransactOpts, crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error)

	SetCrossChainLiquidityManager0(opts *bind.TransactOpts, crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error)

	SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error)

	SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*TestOnlyLiquidityManagerConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*TestOnlyLiquidityManagerConfigSet, error)

	FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*TestOnlyLiquidityManagerLiquidityAddedIterator, error)

	WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityAdded(log types.Log) (*TestOnlyLiquidityManagerLiquidityAdded, error)

	FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*TestOnlyLiquidityManagerLiquidityRemovedIterator, error)

	WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityRemoved(log types.Log) (*TestOnlyLiquidityManagerLiquidityRemoved, error)

	FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*TestOnlyLiquidityManagerLiquidityTransferredIterator, error)

	WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error)

	ParseLiquidityTransferred(log types.Log) (*TestOnlyLiquidityManagerLiquidityTransferred, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestOnlyLiquidityManagerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*TestOnlyLiquidityManagerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestOnlyLiquidityManagerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestOnlyLiquidityManagerOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*TestOnlyLiquidityManagerTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *TestOnlyLiquidityManagerTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*TestOnlyLiquidityManagerTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
