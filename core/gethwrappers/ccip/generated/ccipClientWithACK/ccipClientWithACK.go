// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccipClientWithACK

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPBaseApprovedSenderUpdate struct {
	DestChainSelector uint64
	Sender            []byte
}

type CCIPBaseChainUpdate struct {
	ChainSelector  uint64
	Allowed        bool
	Recipient      []byte
	ExtraArgsBytes []byte
}

type ClientAny2EVMMessage struct {
	MessageId           [32]byte
	SourceChainSelector uint64
	Sender              []byte
	Data                []byte
	DestTokenAmounts    []ClientEVMTokenAmount
}

type ClientEVMTokenAmount struct {
	Token  common.Address
	Amount *big.Int
}

var CCIPClientWithACKMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usePreFunding\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CannotAcknowledgeUnsentMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAckMessageHeader\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAlreadyAcknowledged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageNotFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"CCIPRouterModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"removeChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"FeeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"MessageAbandoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ACKMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usePreFunding\",\"type\":\"bool\"}],\"name\":\"PreFundingStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawnByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACK_MESSAGE_HEADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"abandonFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ChainUpdate[]\",\"name\":\"chains\",\"type\":\"tuple[]\"}],\"name\":\"applyChainUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"getMessageContents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"senderAddr\",\"type\":\"bytes\"}],\"name\":\"isApprovedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"isFailedMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"retryFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"s_chainConfigs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_feeToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"s_messageStatus\",\"outputs\":[{\"internalType\":\"enumCCIPReceiverWithACK.MessageStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_shouldUsePreFunding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"}],\"name\":\"updateApprovedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"usePreFunding\",\"type\":\"bool\"}],\"name\":\"updatePreFundingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004a4a38038062004a4a833981016040819052620000349162000591565b8282818033806000816200008f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c257620000c28162000157565b5050506001600160a01b038116620000ed576040516342bcdf7f60e11b815260040160405180910390fd5b600280546001600160a01b039283166001600160a01b0319918216179091556007805492851692909116821790551590506200013b576200013b6001600160a01b0382168360001962000202565b50506009805460ff191691151591909117905550620006c09050565b336001600160a01b03821603620001b15760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000086565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801562000254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027a9190620005e0565b620002869190620005fa565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152919250620002e291869190620002e816565b50505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015260009062000337906001600160a01b038516908490620003be565b805190915015620003b9578080602001905181019062000358919062000622565b620003b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000086565b505050565b6060620003cf8484600085620003d7565b949350505050565b6060824710156200043a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000086565b600080866001600160a01b031685876040516200045891906200066d565b60006040518083038185875af1925050503d806000811462000497576040519150601f19603f3d011682016040523d82523d6000602084013e6200049c565b606091505b509092509050620004b087838387620004bb565b979650505050505050565b606083156200052f57825160000362000527576001600160a01b0385163b620005275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000086565b5081620003cf565b620003cf8383815115620005465781518083602001fd5b8060405162461bcd60e51b81526004016200008691906200068b565b6001600160a01b03811681146200057857600080fd5b50565b805180151581146200058c57600080fd5b919050565b600080600060608486031215620005a757600080fd5b8351620005b48162000562565b6020850151909350620005c78162000562565b9150620005d7604085016200057b565b90509250925092565b600060208284031215620005f357600080fd5b5051919050565b808201808211156200061c57634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200063557600080fd5b62000640826200057b565b9392505050565b60005b83811015620006645781810151838201526020016200064a565b50506000910152565b600082516200068181846020870162000647565b9190910192915050565b6020815260008251806020840152620006ac81604085016020870162000647565b601f01601f19169190910160400192915050565b61437a80620006d06000396000f3fe6080604052600436106101845760003560e01c80638da5cb5b116100d6578063cf6730f81161007f578063ec4a9a2611610059578063ec4a9a26146104a4578063f2fde38b146104be578063ff2deec3146104de57600080fd5b8063cf6730f814610451578063e4ca875414610471578063e89b44851461049157600080fd5b8063c25da3fe116100b0578063c25da3fe146103f1578063c851cc3214610411578063c89245d51461043157600080fd5b80638da5cb5b1461035a5780639fe74e26146103a6578063b0f479a1146103c657600080fd5b80636939cd971161013857806379ba50971161011257806379ba5097146103055780638462a2b91461031a57806385572ffb1461033a57600080fd5b80636939cd97146102765780636d62d633146102a35780636fef519e146102c357600080fd5b80630e958d6b116101695780630e958d6b1461020657806335f170ef146102265780635e35359e1461025457600080fd5b806305bfe982146101905780630a9094dc146101d657600080fd5b3661018b57005b600080fd5b34801561019c57600080fd5b506101c06101ab3660046130d3565b60086020526000908152604090205460ff1681565b6040516101cd919061311b565b60405180910390f35b3480156101e257600080fd5b506101f66101f13660046130d3565b61050b565b60405190151581526020016101cd565b34801561021257600080fd5b506101f6610221366004613172565b61051e565b34801561023257600080fd5b506102466102413660046131f7565b610569565b6040516101cd929190613282565b34801561026057600080fd5b5061027461026f3660046132d2565b610695565b005b34801561028257600080fd5b506102966102913660046130d3565b61076a565b6040516101cd9190613370565b3480156102af57600080fd5b506102746102be366004613404565b610975565b3480156102cf57600080fd5b506102f77f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b281565b6040519081526020016101cd565b34801561031157600080fd5b50610274610b8c565b34801561032657600080fd5b50610274610335366004613480565b610c89565b34801561034657600080fd5b506102746103553660046134ec565b610fca565b34801561036657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cd565b3480156103b257600080fd5b506102746103c1366004613527565b6111d3565b3480156103d257600080fd5b5060025473ffffffffffffffffffffffffffffffffffffffff16610381565b3480156103fd57600080fd5b5061027461040c366004613577565b611387565b34801561041d57600080fd5b5061027461042c366004613594565b6113f4565b34801561043d57600080fd5b5061027461044c366004613594565b6114c0565b34801561045d57600080fd5b5061027461046c3660046134ec565b611634565b34801561047d57600080fd5b5061027461048c3660046130d3565b611921565b6102f761049f366004613709565b611bef565b3480156104b057600080fd5b506009546101f69060ff1681565b3480156104ca57600080fd5b506102746104d9366004613594565b612111565b3480156104ea57600080fd5b506007546103819073ffffffffffffffffffffffffffffffffffffffff1681565b6000610518600583612125565b92915050565b67ffffffffffffffff8316600090815260036020526040808220905160029091019061054d9085908590613816565b9081526040519081900360200190205460ff1690509392505050565b60036020526000908152604090208054819061058490613826565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090613826565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b50505050509080600101805461061290613826565b80601f016020809104026020016040519081016040528092919081815260200182805461063e90613826565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b5050505050905082565b61069d612140565b73ffffffffffffffffffffffffffffffffffffffff83166106dd576106d873ffffffffffffffffffffffffffffffffffffffff8316826121c3565b6106fe565b6106fe73ffffffffffffffffffffffffffffffffffffffff8416838361231d565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e8360405161075d91815260200190565b60405180910390a3505050565b6040805160a08082018352600080835260208084018290526060848601819052808501819052608085015285825260048152908490208451928301855280548352600181015467ffffffffffffffff16918301919091526002810180549394929391928401916107d990613826565b80601f016020809104026020016040519081016040528092919081815260200182805461080590613826565b80156108525780601f1061082757610100808354040283529160200191610852565b820191906000526020600020905b81548152906001019060200180831161083557829003601f168201915b5050505050815260200160038201805461086b90613826565b80601f016020809104026020016040519081016040528092919081815260200182805461089790613826565b80156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156109675760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101610912565b505050915250909392505050565b61097d612140565b610988600583612125565b6109c6576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b600082815260046020818152604080842090920180548351818402810184019094528084529091849084015b82821015610a475760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001908101548284015290835290920191016109f2565b50505060008581526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690559293509050610a976002830182613021565b610aa5600383016000613021565b610ab360048301600061305b565b50610ac190506005846123f1565b5060005b8151811015610b3b57610b3383838381518110610ae457610ae4613879565b602002602001015160200151848481518110610b0257610b02613879565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1661231d9092919063ffffffff16565b600101610ac5565b5060405173ffffffffffffffffffffffffffffffffffffffff8316815283907fd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a9579060200160405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016109bd565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610c91612140565b60005b81811015610e245760036000848484818110610cb257610cb2613879565b9050602002810190610cc491906138a8565b610cd29060208101906131f7565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838383818110610d0957610d09613879565b9050602002810190610d1b91906138a8565b610d299060208101906138e6565b604051610d37929190613816565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055828282818110610d7e57610d7e613879565b9050602002810190610d9091906138a8565b610d9e9060208101906138e6565b604051610dac929190613816565b6040518091039020838383818110610dc657610dc6613879565b9050602002810190610dd891906138a8565b610de69060208101906131f7565b67ffffffffffffffff167f021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce960405160405180910390a3600101610c94565b5060005b83811015610fc357600160036000878785818110610e4857610e48613879565b9050602002810190610e5a91906138a8565b610e689060208101906131f7565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201868684818110610e9f57610e9f613879565b9050602002810190610eb191906138a8565b610ebf9060208101906138e6565b604051610ecd929190613816565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055848482818110610f1d57610f1d613879565b9050602002810190610f2f91906138a8565b610f3d9060208101906138e6565b604051610f4b929190613816565b6040518091039020858583818110610f6557610f65613879565b9050602002810190610f7791906138a8565b610f859060208101906131f7565b67ffffffffffffffff167f72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e760405160405180910390a3600101610e28565b5050505050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461101d576040517fd7f733340000000000000000000000000000000000000000000000000000000081523360048201526024016109bd565b61102d60408201602083016131f7565b67ffffffffffffffff811660009081526003602052604090208054819061105390613826565b905060000361109a576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016109bd565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f8906110d6908690600401613a4d565b600060405180830381600087803b1580156110f057600080fd5b505af1925050508015611101575060015b6111a1573d80801561112f576040519150601f19603f3d011682016040523d82523d6000602084013e611134565b606091505b50611141600585356123fd565b5083356000908152600460205260409020849061115e8282613e27565b50506040518435907f55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f90611193908490613f21565b60405180910390a250505050565b6040518335907fdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f90600090a25b505050565b6111db612140565b60005b818110156111ce5760008383838181106111fa576111fa613879565b905060200281019061120c9190613f34565b61121590613f68565b9050806020015161128057805167ffffffffffffffff16600090815260036020526040812061124391613021565b805160405167ffffffffffffffff909116907f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d85991690600090a261137e565b8060400151516000036112bf576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080820151825167ffffffffffffffff166000908152600360205291909120906112ea9082614019565b506060810151815167ffffffffffffffff166000908152600360205260409020600101906113189082614019565b50806040015160405161132b9190614133565b6040518091039020816000015167ffffffffffffffff167f1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a8721283606001516040516113759190613f21565b60405180910390a35b506001016111de565b61138f612140565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215159081179091556040519081527f4d54de233ba89f204d426874c47f1dc6afc1c2debc1a9eb0fc6ff9d149530d2b9060200160405180910390a150565b6113fc612140565b73ffffffffffffffffffffffffffffffffffffffff8116611449576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c890600090a35050565b6114c8612140565b60075473ffffffffffffffffffffffffffffffffffffffff16156115295761152961150860025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff16906000612409565b6007805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093551690156115d6576115d661159660025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff16907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61258b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e6760405160405180910390a35050565b33301461166d576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61167d60408201602083016131f7565b61168a60408301836138e6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525067ffffffffffffffff8616815260036020526040902080549093506116e192509050613826565b159050806117375750600360008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201816040516117229190614133565b9081526040519081900360200190205460ff16155b1561177057806040517f5075bb380000000000000000000000000000000000000000000000000000000081526004016109bd9190613f21565b600061177f60608501856138e6565b81019061178c9190614145565b90506000816040015160018111156117a6576117a66130ec565b036117ba576117b484612689565b50505050565b6001816040015160018111156117d2576117d26130ec565b036117b45760008082602001518060200190518101906117f291906141f1565b915091507f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b2821461184f576040517fae15168d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008281526008602052604090205460ff166002811115611874576118746130ec565b036118ae576040517f33704b28000000000000000000000000000000000000000000000000000000008152600481018290526024016109bd565b60008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600217905590518281527fef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79910160405180910390a1505050505050565b61192c600582612125565b611965576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018290526024016109bd565b6000818152600460209081526040808320815160a08101835281548152600182015467ffffffffffffffff169381019390935260028101805491928401916119ac90613826565b80601f01602080910402602001604051908101604052809291908181526020018280546119d890613826565b8015611a255780601f106119fa57610100808354040283529160200191611a25565b820191906000526020600020905b815481529060010190602001808311611a0857829003601f168201915b50505050508152602001600382018054611a3e90613826565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6a90613826565b8015611ab75780601f10611a8c57610100808354040283529160200191611ab7565b820191906000526020600020905b815481529060010190602001808311611a9a57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611b3a5760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101611ae5565b5050509152505060008381526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055919250611b8c6002830182613021565b611b9a600383016000613021565b611ba860048301600061305b565b50611bb690506005836123f1565b50611bc0816129ff565b60405182907fef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad90600090a25050565b67ffffffffffffffff8316600090815260036020526040812080548591908190611c1890613826565b9050600003611c5f576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016109bd565b6040805160a08101825267ffffffffffffffff8816600090815260036020529182208054829190611c8f90613826565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbb90613826565b8015611d085780601f10611cdd57610100808354040283529160200191611d08565b820191906000526020600020905b815481529060010190602001808311611ceb57829003601f168201915b5050509183525050602080820188905260408083018a905260075473ffffffffffffffffffffffffffffffffffffffff16606084015267ffffffffffffffff8b166000908152600390925290206001018054608090920191611d6990613826565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9590613826565b8015611de25780601f10611db757610100808354040283529160200191611de2565b820191906000526020600020905b815481529060010190602001808311611dc557829003601f168201915b5050505050815250905060005b8651811015611f3f57611e5f3330898481518110611e0f57611e0f613879565b6020026020010151602001518a8581518110611e2d57611e2d613879565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16612a71909392919063ffffffff16565b600754875173ffffffffffffffffffffffffffffffffffffffff90911690889083908110611e8f57611e8f613879565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614611f37576002548751611f379173ffffffffffffffffffffffffffffffffffffffff1690899084908110611ee857611ee8613879565b602002602001015160200151898481518110611f0657611f06613879565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166124099092919063ffffffff16565b600101611def565b506002546040517f20487ded00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906320487ded90611f99908b908690600401614215565b602060405180830381865afa158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda91906142e2565b60095490915060ff1661200c5760075461200c9073ffffffffffffffffffffffffffffffffffffffff16333084612a71565b60025460075473ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f991161561203e576000612040565b825b8a856040518463ffffffff1660e01b815260040161205f929190614215565b60206040518083038185885af115801561207d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120a291906142e2565b60008181526008602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055519196509086907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372908390a3505050509392505050565b612119612140565b61212281612acf565b50565b600081815260018301602052604081205415155b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016109bd565b565b8047101561222d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109bd565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612287576040519150601f19603f3d011682016040523d82523d6000602084013e61228c565b606091505b50509050806111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109bd565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ce9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612bc4565b60006121398383612cd0565b60006121398383612dc3565b8015806124a957506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a791906142e2565b155b612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016109bd565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ce9084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161236f565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262691906142e2565b61263091906142fb565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506117b49085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161236f565b60006040518060a001604052808380604001906126a691906138e6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060405160209182019161271e917f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b29187359101918252602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528152602001600060405190808252806020026020018201604052801561279857816020015b60408051808201909152600080825260208201528152602001906001900390816127715790505b50815260075473ffffffffffffffffffffffffffffffffffffffff166020808301919091526040918201916003916000916127d8919088019088016131f7565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101805461280890613826565b80601f016020809104026020016040519081016040528092919081815260200182805461283490613826565b80156128815780601f1061285657610100808354040283529160200191612881565b820191906000526020600020905b81548152906001019060200180831161286457829003601f168201915b50505091909252505060025490915060009073ffffffffffffffffffffffffffffffffffffffff166320487ded6128be60408601602087016131f7565b846040518363ffffffff1660e01b81526004016128dc929190614215565b602060405180830381865afa1580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d91906142e2565b60025460075491925060009173ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f9911615612955576000612957565b835b61296760408801602089016131f7565b866040518463ffffffff1660e01b8152600401612985929190614215565b60206040518083038185885af11580156129a3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906129c891906142e2565b60405190915081908535907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b237290600090a350505050565b612a07612140565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f890612a43908490600401613370565b600060405180830381600087803b158015612a5d57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526117b49085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161236f565b3373ffffffffffffffffffffffffffffffffffffffff821603612b4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016109bd565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612c26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e129092919063ffffffff16565b8051909150156111ce5780806020019051810190612c44919061430e565b6111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109bd565b60008181526001830160205260408120548015612db9576000612cf460018361432b565b8554909150600090612d089060019061432b565b9050818114612d6d576000866000018281548110612d2857612d28613879565b9060005260206000200154905080876000018481548110612d4b57612d4b613879565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d7e57612d7e61433e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610518565b6000915050610518565b6000818152600183016020526040812054612e0a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610518565b506000610518565b6060612e218484600085612e29565b949350505050565b606082471015612ebb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109bd565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612ee49190614133565b60006040518083038185875af1925050503d8060008114612f21576040519150601f19603f3d011682016040523d82523d6000602084013e612f26565b606091505b5091509150612f3787838387612f42565b979650505050505050565b60608315612fd8578251600003612fd15773ffffffffffffffffffffffffffffffffffffffff85163b612fd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109bd565b5081612e21565b612e218383815115612fed5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bd9190613f21565b50805461302d90613826565b6000825580601f1061303d575050565b601f016020900490600052602060002090810190612122919061307c565b50805460008255600202906000526020600020908101906121229190613095565b5b80821115613091576000815560010161307d565b5090565b5b808211156130915780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560006001820155600201613096565b6000602082840312156130e557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310613156577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b67ffffffffffffffff8116811461212257600080fd5b60008060006040848603121561318757600080fd5b83356131928161315c565b9250602084013567ffffffffffffffff808211156131af57600080fd5b818601915086601f8301126131c357600080fd5b8135818111156131d257600080fd5b8760208285010111156131e457600080fd5b6020830194508093505050509250925092565b60006020828403121561320957600080fd5b81356121398161315c565b60005b8381101561322f578181015183820152602001613217565b50506000910152565b60008151808452613250816020860160208601613214565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6040815260006132956040830185613238565b82810360208401526132a78185613238565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461212257600080fd5b6000806000606084860312156132e757600080fd5b83356132f2816132b0565b92506020840135613302816132b0565b929592945050506040919091013590565b60008151808452602080850194506020840160005b83811015613365578151805173ffffffffffffffffffffffffffffffffffffffff1688528301518388015260409096019590820190600101613328565b509495945050505050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a060608401526133aa60c0840182613238565b905060608401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808584030160808601526133e68383613238565b925060808601519150808584030160a0860152506132a78282613313565b6000806040838503121561341757600080fd5b823591506020830135613429816132b0565b809150509250929050565b60008083601f84011261344657600080fd5b50813567ffffffffffffffff81111561345e57600080fd5b6020830191508360208260051b850101111561347957600080fd5b9250929050565b6000806000806040858703121561349657600080fd5b843567ffffffffffffffff808211156134ae57600080fd5b6134ba88838901613434565b909650945060208701359150808211156134d357600080fd5b506134e087828801613434565b95989497509550505050565b6000602082840312156134fe57600080fd5b813567ffffffffffffffff81111561351557600080fd5b820160a0818503121561213957600080fd5b6000806020838503121561353a57600080fd5b823567ffffffffffffffff81111561355157600080fd5b61355d85828601613434565b90969095509350505050565b801515811461212257600080fd5b60006020828403121561358957600080fd5b813561213981613569565b6000602082840312156135a657600080fd5b8135612139816132b0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613603576136036135b1565b60405290565b6040516060810167ffffffffffffffff81118282101715613603576136036135b1565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613673576136736135b1565b604052919050565b600082601f83011261368c57600080fd5b813567ffffffffffffffff8111156136a6576136a66135b1565b6136d760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161362c565b8181528460208386010111156136ec57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561371e57600080fd5b83356137298161315c565b925060208481013567ffffffffffffffff8082111561374757600080fd5b818701915087601f83011261375b57600080fd5b81358181111561376d5761376d6135b1565b61377b848260051b0161362c565b81815260069190911b8301840190848101908a83111561379a57600080fd5b938501935b828510156137e6576040858c0312156137b85760008081fd5b6137c06135e0565b85356137cb816132b0565b8152858701358782015282526040909401939085019061379f565b9650505060408701359250808311156137fe57600080fd5b505061380c8682870161367b565b9150509250925092565b8183823760009101908152919050565b600181811c9082168061383a57607f821691505b602082108103613873577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126138dc57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261391b57600080fd5b83018035915067ffffffffffffffff82111561393657600080fd5b60200191503681900382131561347957600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261398057600080fd5b830160208101925035905067ffffffffffffffff8111156139a057600080fd5b80360382131561347957600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015613365578135613a1b816132b0565b73ffffffffffffffffffffffffffffffffffffffff168752818301358388015260409687019690910190600101613a08565b602081528135602082015260006020830135613a688161315c565b67ffffffffffffffff8082166040850152613a86604086018661394b565b925060a06060860152613a9d60c0860184836139af565b925050613aad606086018661394b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878603016080880152613ae38583856139af565b9450608088013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018312613b1c57600080fd5b60209288019283019235915083821115613b3557600080fd5b8160061b3603831315613b4757600080fd5b8685030160a0870152612f378482846139f8565b601f8211156111ce576000816000526020600020601f850160051c81016020861015613b845750805b601f850160051c820191505b81811015613ba357828155600101613b90565b505050505050565b67ffffffffffffffff831115613bc357613bc36135b1565b613bd783613bd18354613826565b83613b5b565b6000601f841160018114613c295760008515613bf35750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610fc3565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613c785786850135825560209485019460019092019101613c58565b5086821015613cb3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8135613cff816132b0565b73ffffffffffffffffffffffffffffffffffffffff81167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550602082013560018201555050565b68010000000000000000831115613d6557613d656135b1565b805483825580841015613df25760017f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083168314613da657613da6613cc5565b8086168614613db757613db7613cc5565b5060008360005260206000208360011b81018760011b820191505b80821015613ded578282558284830155600282019150613dd2565b505050505b5060008181526020812083915b85811015613ba357613e118383613cf4565b6040929092019160029190910190600101613dff565b81358155600181016020830135613e3d8161315c565b67ffffffffffffffff8082167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000845416178355613e7d60408601866138e6565b93509150613e8f838360028701613bab565b613e9c60608601866138e6565b93509150613eae838360038701613bab565b608085013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1853603018312613ee557600080fd5b918401918235915080821115613efa57600080fd5b506020820191508060061b3603821315613f1357600080fd5b6117b4818360048601613d4c565b6020815260006121396020830184613238565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126138dc57600080fd5b600060808236031215613f7a57600080fd5b6040516080810167ffffffffffffffff8282108183111715613f9e57613f9e6135b1565b8160405284359150613faf8261315c565b908252602084013590613fc182613569565b8160208401526040850135915080821115613fdb57600080fd5b613fe73683870161367b565b6040840152606085013591508082111561400057600080fd5b5061400d3682860161367b565b60608301525092915050565b815167ffffffffffffffff811115614033576140336135b1565b614047816140418454613826565b84613b5b565b602080601f83116001811461409a57600084156140645750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613ba3565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156140e7578886015182559484019460019091019084016140c8565b508582101561412357878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600082516138dc818460208701613214565b60006020828403121561415757600080fd5b813567ffffffffffffffff8082111561416f57600080fd5b908301906060828603121561418357600080fd5b61418b613609565b82358281111561419a57600080fd5b6141a68782860161367b565b8252506020830135828111156141bb57600080fd5b6141c78782860161367b565b60208301525060408301359250600283106141e157600080fd5b6040810192909252509392505050565b6000806040838503121561420457600080fd5b505080516020909101519092909150565b67ffffffffffffffff83168152604060208201526000825160a0604084015261424160e0840182613238565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08085840301606086015261427d8383613238565b9250604086015191508085840301608086015261429a8383613313565b925073ffffffffffffffffffffffffffffffffffffffff60608701511660a086015260808601519150808584030160c0860152506142d88282613238565b9695505050505050565b6000602082840312156142f457600080fd5b5051919050565b8082018082111561051857610518613cc5565b60006020828403121561432057600080fd5b815161213981613569565b8181038181111561051857610518613cc5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000818000a",
}

var CCIPClientWithACKABI = CCIPClientWithACKMetaData.ABI

var CCIPClientWithACKBin = CCIPClientWithACKMetaData.Bin

func DeployCCIPClientWithACK(auth *bind.TransactOpts, backend bind.ContractBackend, router common.Address, feeToken common.Address, usePreFunding bool) (common.Address, *types.Transaction, *CCIPClientWithACK, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPClientWithACKBin), backend, router, feeToken, usePreFunding)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPClientWithACK{address: address, abi: *parsed, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

type CCIPClientWithACK struct {
	address common.Address
	abi     abi.ABI
	CCIPClientWithACKCaller
	CCIPClientWithACKTransactor
	CCIPClientWithACKFilterer
}

type CCIPClientWithACKCaller struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKTransactor struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKFilterer struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKSession struct {
	Contract     *CCIPClientWithACK
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKCallerSession struct {
	Contract *CCIPClientWithACKCaller
	CallOpts bind.CallOpts
}

type CCIPClientWithACKTransactorSession struct {
	Contract     *CCIPClientWithACKTransactor
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKRaw struct {
	Contract *CCIPClientWithACK
}

type CCIPClientWithACKCallerRaw struct {
	Contract *CCIPClientWithACKCaller
}

type CCIPClientWithACKTransactorRaw struct {
	Contract *CCIPClientWithACKTransactor
}

func NewCCIPClientWithACK(address common.Address, backend bind.ContractBackend) (*CCIPClientWithACK, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPClientWithACKABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPClientWithACK(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACK{address: address, abi: abi, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

func NewCCIPClientWithACKCaller(address common.Address, caller bind.ContractCaller) (*CCIPClientWithACKCaller, error) {
	contract, err := bindCCIPClientWithACK(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCaller{contract: contract}, nil
}

func NewCCIPClientWithACKTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPClientWithACKTransactor, error) {
	contract, err := bindCCIPClientWithACK(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTransactor{contract: contract}, nil
}

func NewCCIPClientWithACKFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPClientWithACKFilterer, error) {
	contract, err := bindCCIPClientWithACK(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFilterer{contract: contract}, nil
}

func bindCCIPClientWithACK(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "ACK_MESSAGE_HEADER")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getMessageContents", messageId)

	if err != nil {
		return *new(ClientAny2EVMMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(ClientAny2EVMMessage)).(*ClientAny2EVMMessage)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "isApprovedSender", sourceChainSelector, senderAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "isFailedMessage", messageId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsFailedMessage(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsFailedMessage(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

	error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_chainConfigs", destChainSelector)

	outstruct := new(SChainConfigs)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.ExtraArgsBytes = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_feeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.SFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.SFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_messageStatus", messageId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SShouldUsePreFunding(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_shouldUsePreFunding")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SShouldUsePreFunding() (bool, error) {
	return _CCIPClientWithACK.Contract.SShouldUsePreFunding(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SShouldUsePreFunding() (bool, error) {
	return _CCIPClientWithACK.Contract.SShouldUsePreFunding(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "abandonFailedMessage", messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "applyChainUpdates", chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipReceive", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipSend", destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "processMessage", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "retryFailedMessage", messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateApprovedSenders", adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateFeeToken", token)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdatePreFundingStatus(opts *bind.TransactOpts, usePreFunding bool) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updatePreFundingStatus", usePreFunding)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdatePreFundingStatus(usePreFunding bool) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdatePreFundingStatus(&_CCIPClientWithACK.TransactOpts, usePreFunding)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdatePreFundingStatus(usePreFunding bool) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdatePreFundingStatus(&_CCIPClientWithACK.TransactOpts, usePreFunding)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateRouter", newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "withdrawTokens", token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.RawTransact(opts, nil)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

type CCIPClientWithACKApprovedSenderAddedIterator struct {
	Event *CCIPClientWithACKApprovedSenderAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderAdded struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderAddedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error) {
	event := new(CCIPClientWithACKApprovedSenderAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKApprovedSenderRemovedIterator struct {
	Event *CCIPClientWithACKApprovedSenderRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderRemoved struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error) {
	event := new(CCIPClientWithACKApprovedSenderRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKCCIPRouterModifiedIterator struct {
	Event *CCIPClientWithACKCCIPRouterModified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKCCIPRouterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKCCIPRouterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKCCIPRouterModified struct {
	OldRouter common.Address
	NewRouter common.Address
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCCIPRouterModifiedIterator{contract: _CCIPClientWithACK.contract, event: "CCIPRouterModified", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKCCIPRouterModified)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error) {
	event := new(CCIPClientWithACKCCIPRouterModified)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainAddedIterator struct {
	Event *CCIPClientWithACKChainAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainAdded struct {
	RemoteChainSelector uint64
	Recipient           common.Hash
	ExtraArgsBytes      []byte
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainAddedIterator{contract: _CCIPClientWithACK.contract, event: "ChainAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error) {
	event := new(CCIPClientWithACKChainAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainRemovedIterator struct {
	Event *CCIPClientWithACKChainRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainRemoved struct {
	RemoveChainSelector uint64
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ChainRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error) {
	event := new(CCIPClientWithACKChainRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKFeeTokenUpdatedIterator struct {
	Event *CCIPClientWithACKFeeTokenUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKFeeTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKFeeTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKFeeTokenUpdated struct {
	OldToken common.Address
	NewToken common.Address
	Raw      types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFeeTokenUpdatedIterator{contract: _CCIPClientWithACK.contract, event: "FeeTokenUpdated", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKFeeTokenUpdated)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error) {
	event := new(CCIPClientWithACKFeeTokenUpdated)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAbandonedIterator struct {
	Event *CCIPClientWithACKMessageAbandoned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAbandoned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAbandoned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAbandoned struct {
	MessageId     [32]byte
	TokenReceiver common.Address
	Raw           types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAbandonedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAbandoned", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAbandoned)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error) {
	event := new(CCIPClientWithACKMessageAbandoned)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckReceivedIterator struct {
	Event *CCIPClientWithACKMessageAckReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckReceived struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckReceivedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckReceived", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckReceived)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error) {
	event := new(CCIPClientWithACKMessageAckReceived)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckSentIterator struct {
	Event *CCIPClientWithACKMessageAckSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckSent struct {
	IncomingMessageId [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error) {
	event := new(CCIPClientWithACKMessageAckSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageFailedIterator struct {
	Event *CCIPClientWithACKMessageFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageFailedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageFailed struct {
	MessageId [32]byte
	Reason    []byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageFailedIterator{contract: _CCIPClientWithACK.contract, event: "MessageFailed", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageFailed)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error) {
	event := new(CCIPClientWithACKMessageFailed)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageRecoveredIterator struct {
	Event *CCIPClientWithACKMessageRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageRecovered struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageRecoveredIterator{contract: _CCIPClientWithACK.contract, event: "MessageRecovered", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageRecovered)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error) {
	event := new(CCIPClientWithACKMessageRecovered)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSentIterator struct {
	Event *CCIPClientWithACKMessageSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSent struct {
	IncomingMessageId [32]byte
	ACKMessageId      [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error) {
	event := new(CCIPClientWithACKMessageSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSucceededIterator struct {
	Event *CCIPClientWithACKMessageSucceeded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSucceededIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSucceededIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSucceeded struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSucceededIterator{contract: _CCIPClientWithACK.contract, event: "MessageSucceeded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSucceeded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error) {
	event := new(CCIPClientWithACKMessageSucceeded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferRequestedIterator struct {
	Event *CCIPClientWithACKOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferRequestedIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferRequested)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error) {
	event := new(CCIPClientWithACKOwnershipTransferRequested)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferredIterator struct {
	Event *CCIPClientWithACKOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferredIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferred)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error) {
	event := new(CCIPClientWithACKOwnershipTransferred)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKPreFundingStateUpdatedIterator struct {
	Event *CCIPClientWithACKPreFundingStateUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKPreFundingStateUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKPreFundingStateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKPreFundingStateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKPreFundingStateUpdatedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKPreFundingStateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKPreFundingStateUpdated struct {
	UsePreFunding bool
	Raw           types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterPreFundingStateUpdated(opts *bind.FilterOpts) (*CCIPClientWithACKPreFundingStateUpdatedIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "PreFundingStateUpdated")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKPreFundingStateUpdatedIterator{contract: _CCIPClientWithACK.contract, event: "PreFundingStateUpdated", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchPreFundingStateUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKPreFundingStateUpdated) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "PreFundingStateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKPreFundingStateUpdated)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "PreFundingStateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParsePreFundingStateUpdated(log types.Log) (*CCIPClientWithACKPreFundingStateUpdated, error) {
	event := new(CCIPClientWithACKPreFundingStateUpdated)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "PreFundingStateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKTokensWithdrawnByOwnerIterator struct {
	Event *CCIPClientWithACKTokensWithdrawnByOwner

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKTokensWithdrawnByOwner struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTokensWithdrawnByOwnerIterator{contract: _CCIPClientWithACK.contract, event: "TokensWithdrawnByOwner", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKTokensWithdrawnByOwner)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error) {
	event := new(CCIPClientWithACKTokensWithdrawnByOwner)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SChainConfigs struct {
	Recipient      []byte
	ExtraArgsBytes []byte
}

func (_CCIPClientWithACK *CCIPClientWithACK) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPClientWithACK.abi.Events["ApprovedSenderAdded"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderAdded(log)
	case _CCIPClientWithACK.abi.Events["ApprovedSenderRemoved"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderRemoved(log)
	case _CCIPClientWithACK.abi.Events["CCIPRouterModified"].ID:
		return _CCIPClientWithACK.ParseCCIPRouterModified(log)
	case _CCIPClientWithACK.abi.Events["ChainAdded"].ID:
		return _CCIPClientWithACK.ParseChainAdded(log)
	case _CCIPClientWithACK.abi.Events["ChainRemoved"].ID:
		return _CCIPClientWithACK.ParseChainRemoved(log)
	case _CCIPClientWithACK.abi.Events["FeeTokenUpdated"].ID:
		return _CCIPClientWithACK.ParseFeeTokenUpdated(log)
	case _CCIPClientWithACK.abi.Events["MessageAbandoned"].ID:
		return _CCIPClientWithACK.ParseMessageAbandoned(log)
	case _CCIPClientWithACK.abi.Events["MessageAckReceived"].ID:
		return _CCIPClientWithACK.ParseMessageAckReceived(log)
	case _CCIPClientWithACK.abi.Events["MessageAckSent"].ID:
		return _CCIPClientWithACK.ParseMessageAckSent(log)
	case _CCIPClientWithACK.abi.Events["MessageFailed"].ID:
		return _CCIPClientWithACK.ParseMessageFailed(log)
	case _CCIPClientWithACK.abi.Events["MessageRecovered"].ID:
		return _CCIPClientWithACK.ParseMessageRecovered(log)
	case _CCIPClientWithACK.abi.Events["MessageSent"].ID:
		return _CCIPClientWithACK.ParseMessageSent(log)
	case _CCIPClientWithACK.abi.Events["MessageSucceeded"].ID:
		return _CCIPClientWithACK.ParseMessageSucceeded(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferRequested(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferred"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferred(log)
	case _CCIPClientWithACK.abi.Events["PreFundingStateUpdated"].ID:
		return _CCIPClientWithACK.ParsePreFundingStateUpdated(log)
	case _CCIPClientWithACK.abi.Events["TokensWithdrawnByOwner"].ID:
		return _CCIPClientWithACK.ParseTokensWithdrawnByOwner(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPClientWithACKApprovedSenderAdded) Topic() common.Hash {
	return common.HexToHash("0x72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e7")
}

func (CCIPClientWithACKApprovedSenderRemoved) Topic() common.Hash {
	return common.HexToHash("0x021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce9")
}

func (CCIPClientWithACKCCIPRouterModified) Topic() common.Hash {
	return common.HexToHash("0x3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c8")
}

func (CCIPClientWithACKChainAdded) Topic() common.Hash {
	return common.HexToHash("0x1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a87212")
}

func (CCIPClientWithACKChainRemoved) Topic() common.Hash {
	return common.HexToHash("0x5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d859916")
}

func (CCIPClientWithACKFeeTokenUpdated) Topic() common.Hash {
	return common.HexToHash("0x91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e67")
}

func (CCIPClientWithACKMessageAbandoned) Topic() common.Hash {
	return common.HexToHash("0xd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957")
}

func (CCIPClientWithACKMessageAckReceived) Topic() common.Hash {
	return common.HexToHash("0xef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79")
}

func (CCIPClientWithACKMessageAckSent) Topic() common.Hash {
	return common.HexToHash("0x75944f95ba0be568cb30faeb0ef135cb73d07006939da29722d670a97f5c5b26")
}

func (CCIPClientWithACKMessageFailed) Topic() common.Hash {
	return common.HexToHash("0x55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f")
}

func (CCIPClientWithACKMessageRecovered) Topic() common.Hash {
	return common.HexToHash("0xef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad")
}

func (CCIPClientWithACKMessageSent) Topic() common.Hash {
	return common.HexToHash("0x9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372")
}

func (CCIPClientWithACKMessageSucceeded) Topic() common.Hash {
	return common.HexToHash("0xdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f")
}

func (CCIPClientWithACKOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPClientWithACKOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CCIPClientWithACKPreFundingStateUpdated) Topic() common.Hash {
	return common.HexToHash("0x4d54de233ba89f204d426874c47f1dc6afc1c2debc1a9eb0fc6ff9d149530d2b")
}

func (CCIPClientWithACKTokensWithdrawnByOwner) Topic() common.Hash {
	return common.HexToHash("0x6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e")
}

func (_CCIPClientWithACK *CCIPClientWithACK) Address() common.Address {
	return _CCIPClientWithACK.address
}

type CCIPClientWithACKInterface interface {
	ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error)

	GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error)

	IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

		error)

	SFeeToken(opts *bind.CallOpts) (common.Address, error)

	SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error)

	SShouldUsePreFunding(opts *bind.CallOpts) (bool, error)

	AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error)

	CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error)

	ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error)

	UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	UpdatePreFundingStatus(opts *bind.TransactOpts, usePreFunding bool) (*types.Transaction, error)

	UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error)

	WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error)

	WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error)

	FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error)

	WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error)

	FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error)

	WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error)

	ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error)

	FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error)

	WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error)

	FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error)

	WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error)

	ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error)

	FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error)

	WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error)

	ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error)

	FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error)

	WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error)

	ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error)

	FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error)

	WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error)

	ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error)

	FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error)

	WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error)

	ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error)

	FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error)

	WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error)

	ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error)

	FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error)

	WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error)

	ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error)

	FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error)

	WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error)

	ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error)

	FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error)

	WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error)

	ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error)

	FilterPreFundingStateUpdated(opts *bind.FilterOpts) (*CCIPClientWithACKPreFundingStateUpdatedIterator, error)

	WatchPreFundingStateUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKPreFundingStateUpdated) (event.Subscription, error)

	ParsePreFundingStateUpdated(log types.Log) (*CCIPClientWithACKPreFundingStateUpdated, error)

	FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error)

	WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error)

	ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
