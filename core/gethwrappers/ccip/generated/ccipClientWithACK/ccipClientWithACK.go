// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccipClientWithACK

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPBaseApprovedSenderUpdate struct {
	DestChainSelector uint64
	Sender            []byte
}

type CCIPBaseChainUpdate struct {
	ChainSelector  uint64
	Allowed        bool
	Recipient      []byte
	ExtraArgsBytes []byte
}

type ClientAny2EVMMessage struct {
	MessageId           [32]byte
	SourceChainSelector uint64
	Sender              []byte
	Data                []byte
	DestTokenAmounts    []ClientEVMTokenAmount
}

type ClientEVMTokenAmount struct {
	Token  common.Address
	Amount *big.Int
}

var CCIPClientWithACKMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usePreFunding\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CannotAcknowledgeUnsentMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAckMessageHeader\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAlreadyAcknowledged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageNotFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"CCIPRouterModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"removeChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"FeeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"MessageAbandoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ACKMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawnByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACK_MESSAGE_HEADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"abandonFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ChainUpdate[]\",\"name\":\"chains\",\"type\":\"tuple[]\"}],\"name\":\"applyChainUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"getMessageContents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"senderAddr\",\"type\":\"bytes\"}],\"name\":\"isApprovedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"isFailedMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"retryFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"s_chainConfigs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"s_messageStatus\",\"outputs\":[{\"internalType\":\"enumCCIPReceiverWithACK.MessageStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"}],\"name\":\"updateApprovedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usePreFundedFeeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPreFunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620049e4380380620049e4833981016040819052620000349162000585565b8282818033806000816200008f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c257620000c2816200014b565b5050506001600160a01b038116620000ed576040516342bcdf7f60e11b815260040160405180910390fd5b600280546001600160a01b039283166001600160a01b0319918216179091556007805492851692909116821790551590506200013b576200013b6001600160a01b03821683600019620001f6565b5050151560805250620006b49050565b336001600160a01b03821603620001a55760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000086565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801562000248573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200026e9190620005d4565b6200027a9190620005ee565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152919250620002d691869190620002dc16565b50505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526000906200032b906001600160a01b038516908490620003b2565b805190915015620003ad57808060200190518101906200034c919062000616565b620003ad5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000086565b505050565b6060620003c38484600085620003cb565b949350505050565b6060824710156200042e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000086565b600080866001600160a01b031685876040516200044c919062000661565b60006040518083038185875af1925050503d80600081146200048b576040519150601f19603f3d011682016040523d82523d6000602084013e62000490565b606091505b509092509050620004a487838387620004af565b979650505050505050565b60608315620005235782516000036200051b576001600160a01b0385163b6200051b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000086565b5081620003c3565b620003c383838151156200053a5781518083602001fd5b8060405162461bcd60e51b81526004016200008691906200067f565b6001600160a01b03811681146200056c57600080fd5b50565b805180151581146200058057600080fd5b919050565b6000806000606084860312156200059b57600080fd5b8351620005a88162000556565b6020850151909350620005bb8162000556565b9150620005cb604085016200056f565b90509250925092565b600060208284031215620005e757600080fd5b5051919050565b808201808211156200061057634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200062957600080fd5b62000634826200056f565b9392505050565b60005b83811015620006585781810151838201526020016200063e565b50506000910152565b60008251620006758184602087016200063b565b9190910192915050565b6020815260008251806020840152620006a08160408501602087016200063b565b601f01601f19169190910160400192915050565b60805161430d620006d7600039600081816103090152611f50015261430d6000f3fe6080604052600436106101795760003560e01c806385572ffb116100cb578063c89245d51161007f578063e4ca875411610059578063e4ca8754146104a4578063e89b4485146104c4578063f2fde38b146104d757600080fd5b8063c89245d514610439578063ca709a2514610459578063cf6730f81461048457600080fd5b80639fe74e26116100b05780639fe74e26146103ce578063b0f479a1146103ee578063c851cc321461041957600080fd5b806385572ffb146103625780638da5cb5b1461038257600080fd5b80636939cd971161012d57806372be9eb81161010757806372be9eb8146102fa57806379ba50971461032d5780638462a2b91461034257600080fd5b80636939cd971461026b5780636d62d633146102985780636fef519e146102b857600080fd5b80630e958d6b1161015e5780630e958d6b146101fb57806335f170ef1461021b5780635e35359e1461024957600080fd5b806305bfe982146101855780630a9094dc146101cb57600080fd5b3661018057005b600080fd5b34801561019157600080fd5b506101b56101a0366004613083565b60086020526000908152604090205460ff1681565b6040516101c291906130cb565b60405180910390f35b3480156101d757600080fd5b506101eb6101e6366004613083565b6104f7565b60405190151581526020016101c2565b34801561020757600080fd5b506101eb610216366004613122565b61050a565b34801561022757600080fd5b5061023b6102363660046131a7565b610555565b6040516101c2929190613232565b34801561025557600080fd5b50610269610264366004613282565b610681565b005b34801561027757600080fd5b5061028b610286366004613083565b610756565b6040516101c29190613320565b3480156102a457600080fd5b506102696102b33660046133b4565b610961565b3480156102c457600080fd5b506102ec7f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b281565b6040519081526020016101c2565b34801561030657600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101eb565b34801561033957600080fd5b50610269610b79565b34801561034e57600080fd5b5061026961035d366004613430565b610c76565b34801561036e57600080fd5b5061026961037d36600461349c565b610fb7565b34801561038e57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c2565b3480156103da57600080fd5b506102696103e93660046134d7565b6111ae565b3480156103fa57600080fd5b5060025473ffffffffffffffffffffffffffffffffffffffff166103a9565b34801561042557600080fd5b50610269610434366004613519565b611367565b34801561044557600080fd5b50610269610454366004613519565b611433565b34801561046557600080fd5b5060075473ffffffffffffffffffffffffffffffffffffffff166103a9565b34801561049057600080fd5b5061026961049f36600461349c565b6115a7565b3480156104b057600080fd5b506102696104bf366004613083565b611895565b6102ec6104d236600461368e565b611b63565b3480156104e357600080fd5b506102696104f2366004613519565b6120c1565b60006105046005836120d5565b92915050565b67ffffffffffffffff83166000908152600360205260408082209051600290910190610539908590859061379b565b9081526040519081900360200190205460ff1690509392505050565b600360205260009081526040902080548190610570906137ab565b80601f016020809104026020016040519081016040528092919081815260200182805461059c906137ab565b80156105e95780601f106105be576101008083540402835291602001916105e9565b820191906000526020600020905b8154815290600101906020018083116105cc57829003601f168201915b5050505050908060010180546105fe906137ab565b80601f016020809104026020016040519081016040528092919081815260200182805461062a906137ab565b80156106775780601f1061064c57610100808354040283529160200191610677565b820191906000526020600020905b81548152906001019060200180831161065a57829003601f168201915b5050505050905082565b6106896120f0565b73ffffffffffffffffffffffffffffffffffffffff83166106c9576106c473ffffffffffffffffffffffffffffffffffffffff831682612173565b6106ea565b6106ea73ffffffffffffffffffffffffffffffffffffffff841683836122cd565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e8360405161074991815260200190565b60405180910390a3505050565b6040805160a08082018352600080835260208084018290526060848601819052808501819052608085015285825260048152908490208451928301855280548352600181015467ffffffffffffffff16918301919091526002810180549394929391928401916107c5906137ab565b80601f01602080910402602001604051908101604052809291908181526020018280546107f1906137ab565b801561083e5780601f106108135761010080835404028352916020019161083e565b820191906000526020600020905b81548152906001019060200180831161082157829003601f168201915b50505050508152602001600382018054610857906137ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610883906137ab565b80156108d05780601f106108a5576101008083540402835291602001916108d0565b820191906000526020600020905b8154815290600101906020018083116108b357829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156109535760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001908101548284015290835290920191016108fe565b505050915250909392505050565b6109696120f0565b6109746005836120d5565b6109b2576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b600082815260046020818152604080842090920180548351818402810184019094528084529091849084015b82821015610a335760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001908101548284015290835290920191016109de565b50505060008581526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690559293509050610a836002830182612fd1565b610a91600383016000612fd1565b610a9f60048301600061300b565b50610aad90506005846123a1565b5060005b8151811015610b2757610b1f83838381518110610ad057610ad06137fe565b602002602001015160200151848481518110610aee57610aee6137fe565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166122cd9092919063ffffffff16565b600101610ab1565b5060405173ffffffffffffffffffffffffffffffffffffffff8316815283907fd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957906020015b60405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016109a9565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610c7e6120f0565b60005b81811015610e115760036000848484818110610c9f57610c9f6137fe565b9050602002810190610cb1919061382d565b610cbf9060208101906131a7565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838383818110610cf657610cf66137fe565b9050602002810190610d08919061382d565b610d1690602081019061386b565b604051610d2492919061379b565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055828282818110610d6b57610d6b6137fe565b9050602002810190610d7d919061382d565b610d8b90602081019061386b565b604051610d9992919061379b565b6040518091039020838383818110610db357610db36137fe565b9050602002810190610dc5919061382d565b610dd39060208101906131a7565b67ffffffffffffffff167f021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce960405160405180910390a3600101610c81565b5060005b83811015610fb057600160036000878785818110610e3557610e356137fe565b9050602002810190610e47919061382d565b610e559060208101906131a7565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201868684818110610e8c57610e8c6137fe565b9050602002810190610e9e919061382d565b610eac90602081019061386b565b604051610eba92919061379b565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055848482818110610f0a57610f0a6137fe565b9050602002810190610f1c919061382d565b610f2a90602081019061386b565b604051610f3892919061379b565b6040518091039020858583818110610f5257610f526137fe565b9050602002810190610f64919061382d565b610f729060208101906131a7565b67ffffffffffffffff167f72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e760405160405180910390a3600101610e15565b5050505050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461100a576040517fd7f733340000000000000000000000000000000000000000000000000000000081523360048201526024016109a9565b61101a60408201602083016131a7565b67ffffffffffffffff81166000908152600360205260409020805461103e906137ab565b9050600003611085576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526024016109a9565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f8906110c19085906004016139d2565b600060405180830381600087803b1580156110db57600080fd5b505af19250505080156110ec575060015b61117e573d80801561111a576040519150601f19603f3d011682016040523d82523d6000602084013e61111f565b606091505b5061112c600584356123ad565b508235600090815260046020526040902083906111498282613dac565b50506040518335907f55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f90610b6c908490613ea6565b6040518235907fdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f90600090a25050565b6111b66120f0565b60005b818110156113625760008383838181106111d5576111d56137fe565b90506020028101906111e79190613eb9565b6111f090613efb565b9050806020015161125b57805167ffffffffffffffff16600090815260036020526040812061121e91612fd1565b805160405167ffffffffffffffff909116907f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d85991690600090a2611359565b80604001515160000361129a576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080820151825167ffffffffffffffff166000908152600360205291909120906112c59082613fac565b506060810151815167ffffffffffffffff166000908152600360205260409020600101906112f39082613fac565b50806040015160405161130691906140c6565b6040518091039020816000015167ffffffffffffffff167f1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a8721283606001516040516113509190613ea6565b60405180910390a35b506001016111b9565b505050565b61136f6120f0565b73ffffffffffffffffffffffffffffffffffffffff81166113bc576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c890600090a35050565b61143b6120f0565b60075473ffffffffffffffffffffffffffffffffffffffff161561149c5761149c61147b60025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff169060006123b9565b6007805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093551690156115495761154961150960025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff16907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61253b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e6760405160405180910390a35050565b3330146115e0576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115f060408201602083016131a7565b6115fd604083018361386b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525067ffffffffffffffff861681526003602052604090208054909350611654925090506137ab565b159050806116aa5750600360008367ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206002018160405161169591906140c6565b9081526040519081900360200190205460ff16155b156116e357806040517f5075bb380000000000000000000000000000000000000000000000000000000081526004016109a99190613ea6565b60006116f2606085018561386b565b8101906116ff91906140d8565b90506000816040015160018111156117195761171961309c565b0361172d5761172784612639565b50505050565b6001816040015160018111156117455761174561309c565b036117275760008082602001518060200190518101906117659190614184565b90925090507f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b282146117c3576040517fae15168d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008281526008602052604090205460ff1660028111156117e8576117e861309c565b03611822576040517f33704b28000000000000000000000000000000000000000000000000000000008152600481018290526024016109a9565b60008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600217905590518281527fef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79910160405180910390a1505050505050565b6118a06005826120d5565b6118d9576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018290526024016109a9565b6000818152600460209081526040808320815160a08101835281548152600182015467ffffffffffffffff16938101939093526002810180549192840191611920906137ab565b80601f016020809104026020016040519081016040528092919081815260200182805461194c906137ab565b80156119995780601f1061196e57610100808354040283529160200191611999565b820191906000526020600020905b81548152906001019060200180831161197c57829003601f168201915b505050505081526020016003820180546119b2906137ab565b80601f01602080910402602001604051908101604052809291908181526020018280546119de906137ab565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611aae5760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101611a59565b5050509152505060008381526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055919250611b006002830182612fd1565b611b0e600383016000612fd1565b611b1c60048301600061300b565b50611b2a90506005836123a1565b50611b34816129af565b60405182907fef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad90600090a25050565b67ffffffffffffffff831660009081526003602052604081208054859190611b8a906137ab565b9050600003611bd1576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526024016109a9565b6040805160a08101825267ffffffffffffffff8716600090815260036020529182208054829190611c01906137ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2d906137ab565b8015611c7a5780601f10611c4f57610100808354040283529160200191611c7a565b820191906000526020600020905b815481529060010190602001808311611c5d57829003601f168201915b50505091835250506020808201879052604080830189905260075473ffffffffffffffffffffffffffffffffffffffff16606084015267ffffffffffffffff8a166000908152600390925290206001018054608090920191611cdb906137ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611d07906137ab565b8015611d545780601f10611d2957610100808354040283529160200191611d54565b820191906000526020600020905b815481529060010190602001808311611d3757829003601f168201915b5050505050815250905060005b8551811015611eb157611dd13330888481518110611d8157611d816137fe565b602002602001015160200151898581518110611d9f57611d9f6137fe565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16612a21909392919063ffffffff16565b600754865173ffffffffffffffffffffffffffffffffffffffff90911690879083908110611e0157611e016137fe565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614611ea9576002548651611ea99173ffffffffffffffffffffffffffffffffffffffff1690889084908110611e5a57611e5a6137fe565b602002602001015160200151888481518110611e7857611e786137fe565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166123b99092919063ffffffff16565b600101611d61565b506002546040517f20487ded00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906320487ded90611f0b908a9086906004016141a8565b602060405180830381865afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190614275565b90507f0000000000000000000000000000000000000000000000000000000000000000158015611f93575060075473ffffffffffffffffffffffffffffffffffffffff1615155b15611fbd57600754611fbd9073ffffffffffffffffffffffffffffffffffffffff16333084612a21565b60025460075473ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f9911615611fef576000611ff1565b825b89856040518463ffffffff1660e01b81526004016120109291906141a8565b60206040518083038185885af115801561202e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120539190614275565b60008181526008602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055519195509085907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372908390a35050509392505050565b6120c96120f0565b6120d281612a7f565b50565b600081815260018301602052604081205415155b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016109a9565b565b804710156121dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109a9565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612237576040519150601f19603f3d011682016040523d82523d6000602084013e61223c565b606091505b5050905080611362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109a9565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113629084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612b74565b60006120e98383612c80565b60006120e98383612d73565b80158061245957506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124579190614275565b155b6124e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016109a9565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113629084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161231f565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d69190614275565b6125e0919061428e565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506117279085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161231f565b60006040518060a00160405280838060400190612656919061386b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506040516020918201916126ce917f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b29187359101918252602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528152602001600060405190808252806020026020018201604052801561274857816020015b60408051808201909152600080825260208201528152602001906001900390816127215790505b50815260075473ffffffffffffffffffffffffffffffffffffffff16602080830191909152604091820191600391600091612788919088019088016131a7565b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010180546127b8906137ab565b80601f01602080910402602001604051908101604052809291908181526020018280546127e4906137ab565b80156128315780601f1061280657610100808354040283529160200191612831565b820191906000526020600020905b81548152906001019060200180831161281457829003601f168201915b50505091909252505060025490915060009073ffffffffffffffffffffffffffffffffffffffff166320487ded61286e60408601602087016131a7565b846040518363ffffffff1660e01b815260040161288c9291906141a8565b602060405180830381865afa1580156128a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cd9190614275565b60025460075491925060009173ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f9911615612905576000612907565b835b61291760408801602089016131a7565b866040518463ffffffff1660e01b81526004016129359291906141a8565b60206040518083038185885af1158015612953573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906129789190614275565b60405190915081908535907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b237290600090a350505050565b6129b76120f0565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f8906129f3908490600401613320565b600060405180830381600087803b158015612a0d57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526117279085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161231f565b3373ffffffffffffffffffffffffffffffffffffffff821603612afe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016109a9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612bd6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dc29092919063ffffffff16565b8051909150156113625780806020019051810190612bf491906142a1565b611362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109a9565b60008181526001830160205260408120548015612d69576000612ca46001836142be565b8554909150600090612cb8906001906142be565b9050818114612d1d576000866000018281548110612cd857612cd86137fe565b9060005260206000200154905080876000018481548110612cfb57612cfb6137fe565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d2e57612d2e6142d1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610504565b6000915050610504565b6000818152600183016020526040812054612dba57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610504565b506000610504565b6060612dd18484600085612dd9565b949350505050565b606082471015612e6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109a9565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e9491906140c6565b60006040518083038185875af1925050503d8060008114612ed1576040519150601f19603f3d011682016040523d82523d6000602084013e612ed6565b606091505b5091509150612ee787838387612ef2565b979650505050505050565b60608315612f88578251600003612f815773ffffffffffffffffffffffffffffffffffffffff85163b612f81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109a9565b5081612dd1565b612dd18383815115612f9d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a99190613ea6565b508054612fdd906137ab565b6000825580601f10612fed575050565b601f0160209004906000526020600020908101906120d2919061302c565b50805460008255600202906000526020600020908101906120d29190613045565b5b80821115613041576000815560010161302d565b5090565b5b808211156130415780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560006001820155600201613046565b60006020828403121561309557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310613106577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b67ffffffffffffffff811681146120d257600080fd5b60008060006040848603121561313757600080fd5b83356131428161310c565b9250602084013567ffffffffffffffff8082111561315f57600080fd5b818601915086601f83011261317357600080fd5b81358181111561318257600080fd5b87602082850101111561319457600080fd5b6020830194508093505050509250925092565b6000602082840312156131b957600080fd5b81356120e98161310c565b60005b838110156131df5781810151838201526020016131c7565b50506000910152565b600081518084526132008160208601602086016131c4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061324560408301856131e8565b828103602084015261325781856131e8565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146120d257600080fd5b60008060006060848603121561329757600080fd5b83356132a281613260565b925060208401356132b281613260565b929592945050506040919091013590565b60008151808452602080850194506020840160005b83811015613315578151805173ffffffffffffffffffffffffffffffffffffffff16885283015183880152604090960195908201906001016132d8565b509495945050505050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a0606084015261335a60c08401826131e8565b905060608401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08085840301608086015261339683836131e8565b925060808601519150808584030160a08601525061325782826132c3565b600080604083850312156133c757600080fd5b8235915060208301356133d981613260565b809150509250929050565b60008083601f8401126133f657600080fd5b50813567ffffffffffffffff81111561340e57600080fd5b6020830191508360208260051b850101111561342957600080fd5b9250929050565b6000806000806040858703121561344657600080fd5b843567ffffffffffffffff8082111561345e57600080fd5b61346a888389016133e4565b9096509450602087013591508082111561348357600080fd5b50613490878288016133e4565b95989497509550505050565b6000602082840312156134ae57600080fd5b813567ffffffffffffffff8111156134c557600080fd5b820160a081850312156120e957600080fd5b600080602083850312156134ea57600080fd5b823567ffffffffffffffff81111561350157600080fd5b61350d858286016133e4565b90969095509350505050565b60006020828403121561352b57600080fd5b81356120e981613260565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561358857613588613536565b60405290565b6040516060810167ffffffffffffffff8111828210171561358857613588613536565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135f8576135f8613536565b604052919050565b600082601f83011261361157600080fd5b813567ffffffffffffffff81111561362b5761362b613536565b61365c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016135b1565b81815284602083860101111561367157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156136a357600080fd5b83356136ae8161310c565b925060208481013567ffffffffffffffff808211156136cc57600080fd5b818701915087601f8301126136e057600080fd5b8135818111156136f2576136f2613536565b613700848260051b016135b1565b81815260069190911b8301840190848101908a83111561371f57600080fd5b938501935b8285101561376b576040858c03121561373d5760008081fd5b613745613565565b853561375081613260565b81528587013587820152825260409094019390850190613724565b96505050604087013592508083111561378357600080fd5b505061379186828701613600565b9150509250925092565b8183823760009101908152919050565b600181811c908216806137bf57607f821691505b6020821081036137f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261386157600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126138a057600080fd5b83018035915067ffffffffffffffff8211156138bb57600080fd5b60200191503681900382131561342957600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261390557600080fd5b830160208101925035905067ffffffffffffffff81111561392557600080fd5b80360382131561342957600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b858110156133155781356139a081613260565b73ffffffffffffffffffffffffffffffffffffffff16875281830135838801526040968701969091019060010161398d565b6020815281356020820152600060208301356139ed8161310c565b67ffffffffffffffff8082166040850152613a0b60408601866138d0565b925060a06060860152613a2260c086018483613934565b925050613a3260608601866138d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878603016080880152613a68858385613934565b9450608088013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018312613aa157600080fd5b60209288019283019235915083821115613aba57600080fd5b8160061b3603831315613acc57600080fd5b8685030160a0870152612ee784828461397d565b601f821115611362576000816000526020600020601f850160051c81016020861015613b095750805b601f850160051c820191505b81811015613b2857828155600101613b15565b505050505050565b67ffffffffffffffff831115613b4857613b48613536565b613b5c83613b5683546137ab565b83613ae0565b6000601f841160018114613bae5760008515613b785750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610fb0565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613bfd5786850135825560209485019460019092019101613bdd565b5086821015613c38577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8135613c8481613260565b73ffffffffffffffffffffffffffffffffffffffff81167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550602082013560018201555050565b68010000000000000000831115613cea57613cea613536565b805483825580841015613d775760017f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083168314613d2b57613d2b613c4a565b8086168614613d3c57613d3c613c4a565b5060008360005260206000208360011b81018760011b820191505b80821015613d72578282558284830155600282019150613d57565b505050505b5060008181526020812083915b85811015613b2857613d968383613c79565b6040929092019160029190910190600101613d84565b81358155600181016020830135613dc28161310c565b67ffffffffffffffff8082167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000845416178355613e02604086018661386b565b93509150613e14838360028701613b30565b613e21606086018661386b565b93509150613e33838360038701613b30565b608085013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1853603018312613e6a57600080fd5b918401918235915080821115613e7f57600080fd5b506020820191508060061b3603821315613e9857600080fd5b611727818360048601613cd1565b6020815260006120e960208301846131e8565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261386157600080fd5b80151581146120d257600080fd5b600060808236031215613f0d57600080fd5b6040516080810167ffffffffffffffff8282108183111715613f3157613f31613536565b8160405284359150613f428261310c565b908252602084013590613f5482613eed565b8160208401526040850135915080821115613f6e57600080fd5b613f7a36838701613600565b60408401526060850135915080821115613f9357600080fd5b50613fa036828601613600565b60608301525092915050565b815167ffffffffffffffff811115613fc657613fc6613536565b613fda81613fd484546137ab565b84613ae0565b602080601f83116001811461402d5760008415613ff75750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613b28565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561407a5788860151825594840194600190910190840161405b565b50858210156140b657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600082516138618184602087016131c4565b6000602082840312156140ea57600080fd5b813567ffffffffffffffff8082111561410257600080fd5b908301906060828603121561411657600080fd5b61411e61358e565b82358281111561412d57600080fd5b61413987828601613600565b82525060208301358281111561414e57600080fd5b61415a87828601613600565b602083015250604083013592506002831061417457600080fd5b6040810192909252509392505050565b6000806040838503121561419757600080fd5b505080516020909101519092909150565b67ffffffffffffffff83168152604060208201526000825160a060408401526141d460e08401826131e8565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08085840301606086015261421083836131e8565b9250604086015191508085840301608086015261422d83836132c3565b925073ffffffffffffffffffffffffffffffffffffffff60608701511660a086015260808601519150808584030160c08601525061426b82826131e8565b9695505050505050565b60006020828403121561428757600080fd5b5051919050565b8082018082111561050457610504613c4a565b6000602082840312156142b357600080fd5b81516120e981613eed565b8181038181111561050457610504613c4a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000818000a",
}

var CCIPClientWithACKABI = CCIPClientWithACKMetaData.ABI

var CCIPClientWithACKBin = CCIPClientWithACKMetaData.Bin

func DeployCCIPClientWithACK(auth *bind.TransactOpts, backend bind.ContractBackend, router common.Address, feeToken common.Address, usePreFunding bool) (common.Address, *types.Transaction, *CCIPClientWithACK, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPClientWithACKBin), backend, router, feeToken, usePreFunding)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPClientWithACK{address: address, abi: *parsed, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

type CCIPClientWithACK struct {
	address common.Address
	abi     abi.ABI
	CCIPClientWithACKCaller
	CCIPClientWithACKTransactor
	CCIPClientWithACKFilterer
}

type CCIPClientWithACKCaller struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKTransactor struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKFilterer struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKSession struct {
	Contract     *CCIPClientWithACK
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKCallerSession struct {
	Contract *CCIPClientWithACKCaller
	CallOpts bind.CallOpts
}

type CCIPClientWithACKTransactorSession struct {
	Contract     *CCIPClientWithACKTransactor
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKRaw struct {
	Contract *CCIPClientWithACK
}

type CCIPClientWithACKCallerRaw struct {
	Contract *CCIPClientWithACKCaller
}

type CCIPClientWithACKTransactorRaw struct {
	Contract *CCIPClientWithACKTransactor
}

func NewCCIPClientWithACK(address common.Address, backend bind.ContractBackend) (*CCIPClientWithACK, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPClientWithACKABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPClientWithACK(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACK{address: address, abi: abi, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

func NewCCIPClientWithACKCaller(address common.Address, caller bind.ContractCaller) (*CCIPClientWithACKCaller, error) {
	contract, err := bindCCIPClientWithACK(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCaller{contract: contract}, nil
}

func NewCCIPClientWithACKTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPClientWithACKTransactor, error) {
	contract, err := bindCCIPClientWithACK(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTransactor{contract: contract}, nil
}

func NewCCIPClientWithACKFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPClientWithACKFilterer, error) {
	contract, err := bindCCIPClientWithACK(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFilterer{contract: contract}, nil
}

func bindCCIPClientWithACK(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "ACK_MESSAGE_HEADER")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getFeeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getMessageContents", messageId)

	if err != nil {
		return *new(ClientAny2EVMMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(ClientAny2EVMMessage)).(*ClientAny2EVMMessage)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "isApprovedSender", sourceChainSelector, senderAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "isFailedMessage", messageId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsFailedMessage(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsFailedMessage(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

	error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_chainConfigs", destChainSelector)

	outstruct := new(SChainConfigs)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.ExtraArgsBytes = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_messageStatus", messageId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) UsePreFundedFeeTokens(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "usePreFundedFeeTokens")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UsePreFundedFeeTokens() (bool, error) {
	return _CCIPClientWithACK.Contract.UsePreFundedFeeTokens(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) UsePreFundedFeeTokens() (bool, error) {
	return _CCIPClientWithACK.Contract.UsePreFundedFeeTokens(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "abandonFailedMessage", messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "applyChainUpdates", chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipReceive", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipSend", destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "processMessage", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "retryFailedMessage", messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateApprovedSenders", adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateFeeToken", token)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateRouter", newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "withdrawTokens", token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.RawTransact(opts, nil)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

type CCIPClientWithACKApprovedSenderAddedIterator struct {
	Event *CCIPClientWithACKApprovedSenderAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderAdded struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderAddedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error) {
	event := new(CCIPClientWithACKApprovedSenderAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKApprovedSenderRemovedIterator struct {
	Event *CCIPClientWithACKApprovedSenderRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderRemoved struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error) {
	event := new(CCIPClientWithACKApprovedSenderRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKCCIPRouterModifiedIterator struct {
	Event *CCIPClientWithACKCCIPRouterModified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKCCIPRouterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKCCIPRouterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKCCIPRouterModified struct {
	OldRouter common.Address
	NewRouter common.Address
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCCIPRouterModifiedIterator{contract: _CCIPClientWithACK.contract, event: "CCIPRouterModified", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKCCIPRouterModified)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error) {
	event := new(CCIPClientWithACKCCIPRouterModified)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainAddedIterator struct {
	Event *CCIPClientWithACKChainAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainAdded struct {
	RemoteChainSelector uint64
	Recipient           common.Hash
	ExtraArgsBytes      []byte
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainAddedIterator{contract: _CCIPClientWithACK.contract, event: "ChainAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error) {
	event := new(CCIPClientWithACKChainAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainRemovedIterator struct {
	Event *CCIPClientWithACKChainRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainRemoved struct {
	RemoveChainSelector uint64
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ChainRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error) {
	event := new(CCIPClientWithACKChainRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKFeeTokenUpdatedIterator struct {
	Event *CCIPClientWithACKFeeTokenUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKFeeTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKFeeTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKFeeTokenUpdated struct {
	OldToken common.Address
	NewToken common.Address
	Raw      types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFeeTokenUpdatedIterator{contract: _CCIPClientWithACK.contract, event: "FeeTokenUpdated", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKFeeTokenUpdated)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error) {
	event := new(CCIPClientWithACKFeeTokenUpdated)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAbandonedIterator struct {
	Event *CCIPClientWithACKMessageAbandoned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAbandoned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAbandoned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAbandoned struct {
	MessageId     [32]byte
	TokenReceiver common.Address
	Raw           types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAbandonedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAbandoned", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAbandoned)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error) {
	event := new(CCIPClientWithACKMessageAbandoned)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckReceivedIterator struct {
	Event *CCIPClientWithACKMessageAckReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckReceived struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckReceivedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckReceived", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckReceived)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error) {
	event := new(CCIPClientWithACKMessageAckReceived)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckSentIterator struct {
	Event *CCIPClientWithACKMessageAckSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckSent struct {
	IncomingMessageId [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error) {
	event := new(CCIPClientWithACKMessageAckSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageFailedIterator struct {
	Event *CCIPClientWithACKMessageFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageFailedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageFailed struct {
	MessageId [32]byte
	Reason    []byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageFailedIterator{contract: _CCIPClientWithACK.contract, event: "MessageFailed", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageFailed)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error) {
	event := new(CCIPClientWithACKMessageFailed)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageRecoveredIterator struct {
	Event *CCIPClientWithACKMessageRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageRecovered struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageRecoveredIterator{contract: _CCIPClientWithACK.contract, event: "MessageRecovered", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageRecovered)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error) {
	event := new(CCIPClientWithACKMessageRecovered)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSentIterator struct {
	Event *CCIPClientWithACKMessageSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSent struct {
	IncomingMessageId [32]byte
	ACKMessageId      [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error) {
	event := new(CCIPClientWithACKMessageSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSucceededIterator struct {
	Event *CCIPClientWithACKMessageSucceeded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSucceededIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSucceededIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSucceeded struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSucceededIterator{contract: _CCIPClientWithACK.contract, event: "MessageSucceeded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSucceeded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error) {
	event := new(CCIPClientWithACKMessageSucceeded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferRequestedIterator struct {
	Event *CCIPClientWithACKOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferRequestedIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferRequested)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error) {
	event := new(CCIPClientWithACKOwnershipTransferRequested)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferredIterator struct {
	Event *CCIPClientWithACKOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferredIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferred)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error) {
	event := new(CCIPClientWithACKOwnershipTransferred)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKTokensWithdrawnByOwnerIterator struct {
	Event *CCIPClientWithACKTokensWithdrawnByOwner

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKTokensWithdrawnByOwner struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTokensWithdrawnByOwnerIterator{contract: _CCIPClientWithACK.contract, event: "TokensWithdrawnByOwner", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKTokensWithdrawnByOwner)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error) {
	event := new(CCIPClientWithACKTokensWithdrawnByOwner)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SChainConfigs struct {
	Recipient      []byte
	ExtraArgsBytes []byte
}

func (_CCIPClientWithACK *CCIPClientWithACK) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPClientWithACK.abi.Events["ApprovedSenderAdded"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderAdded(log)
	case _CCIPClientWithACK.abi.Events["ApprovedSenderRemoved"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderRemoved(log)
	case _CCIPClientWithACK.abi.Events["CCIPRouterModified"].ID:
		return _CCIPClientWithACK.ParseCCIPRouterModified(log)
	case _CCIPClientWithACK.abi.Events["ChainAdded"].ID:
		return _CCIPClientWithACK.ParseChainAdded(log)
	case _CCIPClientWithACK.abi.Events["ChainRemoved"].ID:
		return _CCIPClientWithACK.ParseChainRemoved(log)
	case _CCIPClientWithACK.abi.Events["FeeTokenUpdated"].ID:
		return _CCIPClientWithACK.ParseFeeTokenUpdated(log)
	case _CCIPClientWithACK.abi.Events["MessageAbandoned"].ID:
		return _CCIPClientWithACK.ParseMessageAbandoned(log)
	case _CCIPClientWithACK.abi.Events["MessageAckReceived"].ID:
		return _CCIPClientWithACK.ParseMessageAckReceived(log)
	case _CCIPClientWithACK.abi.Events["MessageAckSent"].ID:
		return _CCIPClientWithACK.ParseMessageAckSent(log)
	case _CCIPClientWithACK.abi.Events["MessageFailed"].ID:
		return _CCIPClientWithACK.ParseMessageFailed(log)
	case _CCIPClientWithACK.abi.Events["MessageRecovered"].ID:
		return _CCIPClientWithACK.ParseMessageRecovered(log)
	case _CCIPClientWithACK.abi.Events["MessageSent"].ID:
		return _CCIPClientWithACK.ParseMessageSent(log)
	case _CCIPClientWithACK.abi.Events["MessageSucceeded"].ID:
		return _CCIPClientWithACK.ParseMessageSucceeded(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferRequested(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferred"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferred(log)
	case _CCIPClientWithACK.abi.Events["TokensWithdrawnByOwner"].ID:
		return _CCIPClientWithACK.ParseTokensWithdrawnByOwner(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPClientWithACKApprovedSenderAdded) Topic() common.Hash {
	return common.HexToHash("0x72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e7")
}

func (CCIPClientWithACKApprovedSenderRemoved) Topic() common.Hash {
	return common.HexToHash("0x021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce9")
}

func (CCIPClientWithACKCCIPRouterModified) Topic() common.Hash {
	return common.HexToHash("0x3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c8")
}

func (CCIPClientWithACKChainAdded) Topic() common.Hash {
	return common.HexToHash("0x1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a87212")
}

func (CCIPClientWithACKChainRemoved) Topic() common.Hash {
	return common.HexToHash("0x5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d859916")
}

func (CCIPClientWithACKFeeTokenUpdated) Topic() common.Hash {
	return common.HexToHash("0x91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e67")
}

func (CCIPClientWithACKMessageAbandoned) Topic() common.Hash {
	return common.HexToHash("0xd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957")
}

func (CCIPClientWithACKMessageAckReceived) Topic() common.Hash {
	return common.HexToHash("0xef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79")
}

func (CCIPClientWithACKMessageAckSent) Topic() common.Hash {
	return common.HexToHash("0x75944f95ba0be568cb30faeb0ef135cb73d07006939da29722d670a97f5c5b26")
}

func (CCIPClientWithACKMessageFailed) Topic() common.Hash {
	return common.HexToHash("0x55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f")
}

func (CCIPClientWithACKMessageRecovered) Topic() common.Hash {
	return common.HexToHash("0xef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad")
}

func (CCIPClientWithACKMessageSent) Topic() common.Hash {
	return common.HexToHash("0x9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372")
}

func (CCIPClientWithACKMessageSucceeded) Topic() common.Hash {
	return common.HexToHash("0xdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f")
}

func (CCIPClientWithACKOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPClientWithACKOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CCIPClientWithACKTokensWithdrawnByOwner) Topic() common.Hash {
	return common.HexToHash("0x6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e")
}

func (_CCIPClientWithACK *CCIPClientWithACK) Address() common.Address {
	return _CCIPClientWithACK.address
}

type CCIPClientWithACKInterface interface {
	ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error)

	GetFeeToken(opts *bind.CallOpts) (common.Address, error)

	GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error)

	IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

		error)

	SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error)

	UsePreFundedFeeTokens(opts *bind.CallOpts) (bool, error)

	AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error)

	CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error)

	ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error)

	UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error)

	WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error)

	WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error)

	FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error)

	WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error)

	FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error)

	WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error)

	ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error)

	FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error)

	WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error)

	FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error)

	WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error)

	ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error)

	FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error)

	WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error)

	ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error)

	FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error)

	WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error)

	ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error)

	FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error)

	WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error)

	ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error)

	FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error)

	WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error)

	ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error)

	FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error)

	WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error)

	ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error)

	FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error)

	WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error)

	ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error)

	FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error)

	WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error)

	ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error)

	FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error)

	WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error)

	ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error)

	FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error)

	WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error)

	ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
