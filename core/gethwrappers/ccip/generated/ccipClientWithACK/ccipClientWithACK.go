// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccipClientWithACK

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPBaseApprovedSenderUpdate struct {
	DestChainSelector uint64
	Sender            []byte
}

type CCIPBaseChainUpdate struct {
	ChainSelector  uint64
	Allowed        bool
	Recipient      []byte
	ExtraArgsBytes []byte
}

type ClientAny2EVMMessage struct {
	MessageId           [32]byte
	SourceChainSelector uint64
	Sender              []byte
	Data                []byte
	DestTokenAmounts    []ClientEVMTokenAmount
}

type ClientEVMTokenAmount struct {
	Token  common.Address
	Amount *big.Int
}

var CCIPClientWithACKMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CannotAcknowledgeUnsentMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAckMessageHeader\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAlreadyAcknowledged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageNotFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"CCIPRouterModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"removeChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"FeeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"MessageAbandoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ACKMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawnByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACK_MESSAGE_HEADER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"abandonFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ChainUpdate[]\",\"name\":\"chains\",\"type\":\"tuple[]\"}],\"name\":\"applyChainUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"getMessageContents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"getMessageStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"senderAddr\",\"type\":\"bytes\"}],\"name\":\"isApprovedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"retryFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"s_chainConfigs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_feeToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"s_messageStatus\",\"outputs\":[{\"internalType\":\"enumCCIPReceiverWithACK.MessageStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"}],\"name\":\"updateApprovedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004aea38038062004aea833981016040819052620000349162000569565b8181818033806000816200008f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c257620000c28162000145565b5050506001600160a01b038116620000ed576040516342bcdf7f60e11b815260040160405180910390fd5b600280546001600160a01b039283166001600160a01b0319918216179091556008805492851692909116821790551590506200013b576200013b6001600160a01b03821683600019620001f0565b505050506200068e565b336001600160a01b038216036200019f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000086565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801562000242573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002689190620005a8565b620002749190620005c2565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152919250620002d091869190620002d616565b50505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015260009062000325906001600160a01b038516908490620003ac565b805190915015620003a75780806020019051810190620003469190620005ea565b620003a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000086565b505050565b6060620003bd8484600085620003c5565b949350505050565b606082471015620004285760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000086565b600080866001600160a01b031685876040516200044691906200063b565b60006040518083038185875af1925050503d806000811462000485576040519150601f19603f3d011682016040523d82523d6000602084013e6200048a565b606091505b5090925090506200049e87838387620004a9565b979650505050505050565b606083156200051d57825160000362000515576001600160a01b0385163b620005155760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000086565b5081620003bd565b620003bd8383815115620005345781518083602001fd5b8060405162461bcd60e51b815260040162000086919062000659565b6001600160a01b03811681146200056657600080fd5b50565b600080604083850312156200057d57600080fd5b82516200058a8162000550565b60208401519092506200059d8162000550565b809150509250929050565b600060208284031215620005bb57600080fd5b5051919050565b80820180821115620005e457634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215620005fd57600080fd5b815180151581146200060e57600080fd5b9392505050565b60005b838110156200063257818101518382015260200162000618565b50506000910152565b600082516200064f81846020870162000615565b9190910192915050565b60208152600082518060208401526200067a81604085016020870162000615565b601f01601f19169190910160400192915050565b61444c806200069e6000396000f3fe6080604052600436106101795760003560e01c806385572ffb116100cb578063c89245d51161007f578063e89b448511610059578063e89b4485146104a8578063f2fde38b146104bb578063ff2deec3146104db57600080fd5b8063c89245d514610448578063cf6730f814610468578063e4ca87541461048857600080fd5b80639fe74e26116100b05780639fe74e26146103dd578063b0f479a1146103fd578063c851cc321461042857600080fd5b806385572ffb146103715780638da5cb5b1461039157600080fd5b80635e35359e1161012d5780636fef519e116101075780636fef519e146102e657806379ba50971461033c5780638462a2b91461035157600080fd5b80635e35359e146102795780636939cd97146102995780636d62d633146102c657600080fd5b806335f170ef1161015e57806335f170ef146101fb5780635075a9d414610229578063536c6bfa1461025757600080fd5b806305bfe982146101855780630e958d6b146101cb57600080fd5b3661018057005b600080fd5b34801561019157600080fd5b506101b56101a03660046132e5565b60096020526000908152604090205460ff1681565b6040516101c2919061332d565b60405180910390f35b3480156101d757600080fd5b506101eb6101e6366004613384565b610508565b60405190151581526020016101c2565b34801561020757600080fd5b5061021b610216366004613409565b610553565b6040516101c2929190613494565b34801561023557600080fd5b506102496102443660046132e5565b61067f565b6040519081526020016101c2565b34801561026357600080fd5b506102776102723660046134e4565b610692565b005b34801561028557600080fd5b50610277610294366004613510565b6106f6565b3480156102a557600080fd5b506102b96102b43660046132e5565b61078b565b6040516101c291906135ae565b3480156102d257600080fd5b506102776102e1366004613642565b610996565b3480156102f257600080fd5b5061032f6040518060400160405280601581526020017f4d4553534147455f41434b4e4f574c45444745445f000000000000000000000081525081565b6040516101c29190613672565b34801561034857600080fd5b50610277610cb0565b34801561035d57600080fd5b5061027761036c3660046136d1565b610dad565b34801561037d57600080fd5b5061027761038c36600461373d565b6110ee565b34801561039d57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c2565b3480156103e957600080fd5b506102776103f8366004613778565b6112f7565b34801561040957600080fd5b5060025473ffffffffffffffffffffffffffffffffffffffff166103b8565b34801561043457600080fd5b506102776104433660046137ba565b611688565b34801561045457600080fd5b506102776104633660046137ba565b611754565b34801561047457600080fd5b5061027761048336600461373d565b6118c8565b34801561049457600080fd5b506102776104a33660046132e5565b611c16565b6102496104b636600461393d565b611e80565b3480156104c757600080fd5b506102776104d63660046137ba565b6123b6565b3480156104e757600080fd5b506008546103b89073ffffffffffffffffffffffffffffffffffffffff1681565b67ffffffffffffffff831660009081526003602052604080822090516002909101906105379085908590613a4a565b9081526040519081900360200190205460ff1690509392505050565b60036020526000908152604090208054819061056e90613a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461059a90613a5a565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b5050505050908060010180546105fc90613a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461062890613a5a565b80156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b5050505050905082565b600061068c6005836123ca565b92915050565b61069a6123dd565b6106a48282612460565b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907f6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e9060200160405180910390a35050565b6106fe6123dd565b61071f73ffffffffffffffffffffffffffffffffffffffff841683836125ba565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e8360405161077e91815260200190565b60405180910390a3505050565b6040805160a08082018352600080835260208084018290526060848601819052808501819052608085015285825260048152908490208451928301855280548352600181015467ffffffffffffffff16918301919091526002810180549394929391928401916107fa90613a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461082690613a5a565b80156108735780601f1061084857610100808354040283529160200191610873565b820191906000526020600020905b81548152906001019060200180831161085657829003601f168201915b5050505050815260200160038201805461088c90613a5a565b80601f01602080910402602001604051908101604052809291908181526020018280546108b890613a5a565b80156109055780601f106108da57610100808354040283529160200191610905565b820191906000526020600020905b8154815290600101906020018083116108e857829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156109885760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101610933565b505050915250909392505050565b61099e6123dd565b60016109ab6005846123ca565b146109ea576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6109fa8260025b6005919061268e565b506000828152600460209081526040808320815160a08101835281548152600182015467ffffffffffffffff16938101939093526002810180549192840191610a4290613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6e90613a5a565b8015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b50505050508152602001600382018054610ad490613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0090613a5a565b8015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610bd05760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101610b7b565b5050505081525050905060005b816080015151811015610c5f57610c578383608001518381518110610c0457610c04613aad565b60200260200101516020015184608001518481518110610c2657610c26613aad565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166125ba9092919063ffffffff16565b600101610bdd565b5060405173ffffffffffffffffffffffffffffffffffffffff8316815283907fd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a9579060200160405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016109e1565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610db56123dd565b60005b81811015610f485760036000848484818110610dd657610dd6613aad565b9050602002810190610de89190613adc565b610df6906020810190613409565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838383818110610e2d57610e2d613aad565b9050602002810190610e3f9190613adc565b610e4d906020810190613b1a565b604051610e5b929190613a4a565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055828282818110610ea257610ea2613aad565b9050602002810190610eb49190613adc565b610ec2906020810190613b1a565b604051610ed0929190613a4a565b6040518091039020838383818110610eea57610eea613aad565b9050602002810190610efc9190613adc565b610f0a906020810190613409565b67ffffffffffffffff167f021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce960405160405180910390a3600101610db8565b5060005b838110156110e757600160036000878785818110610f6c57610f6c613aad565b9050602002810190610f7e9190613adc565b610f8c906020810190613409565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201868684818110610fc357610fc3613aad565b9050602002810190610fd59190613adc565b610fe3906020810190613b1a565b604051610ff1929190613a4a565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921691909117905584848281811061104157611041613aad565b90506020028101906110539190613adc565b611061906020810190613b1a565b60405161106f929190613a4a565b604051809103902085858381811061108957611089613aad565b905060200281019061109b9190613adc565b6110a9906020810190613409565b67ffffffffffffffff167f72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e760405160405180910390a3600101610f4c565b5050505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314611141576040517fd7f733340000000000000000000000000000000000000000000000000000000081523360048201526024016109e1565b6111516040820160208301613409565b67ffffffffffffffff811660009081526003602052604090208054819061117790613a5a565b90506000036111be576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016109e1565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f8906111fa908690600401613c81565b600060405180830381600087803b15801561121457600080fd5b505af1925050508015611225575060015b6112c5573d808015611253576040519150601f19603f3d011682016040523d82523d6000602084013e611258565b606091505b50611265843560016109f1565b50833560009081526004602052604090208490611282828261405b565b50506040518435907f55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f906112b7908490613672565b60405180910390a250505050565b6040518335907fdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f90600090a25b505050565b6112ff6123dd565b60005b818110156112f25782828281811061131c5761131c613aad565b905060200281019061132e9190614155565b61133f906040810190602001614197565b61140b576003600084848481811061135957611359613aad565b905060200281019061136b9190614155565b611379906020810190613409565b67ffffffffffffffff1681526020810191909152604001600090812061139e91613297565b8282828181106113b0576113b0613aad565b90506020028101906113c29190614155565b6113d0906020810190613409565b67ffffffffffffffff167f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d85991660405160405180910390a2611680565b82828281811061141d5761141d613aad565b905060200281019061142f9190614155565b61143d906040810190613b1a565b9050600003611478576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085858581811061149057611490613aad565b90506020028101906114a29190614155565b6114b0906020810190613409565b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508383838181106114e6576114e6613aad565b90506020028101906114f89190614155565b611506906040810190613b1a565b8291611513919083613ddf565b5083838381811061152657611526613aad565b90506020028101906115389190614155565b611546906060810190613b1a565b1590506115915783838381811061155f5761155f613aad565b90506020028101906115719190614155565b61157f906060810190613b1a565b600183019161158f919083613ddf565b505b8383838181106115a3576115a3613aad565b90506020028101906115b59190614155565b6115c3906040810190613b1a565b6040516115d1929190613a4a565b60405180910390208484848181106115eb576115eb613aad565b90506020028101906115fd9190614155565b61160b906020810190613409565b67ffffffffffffffff167f1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a8721286868681811061164857611648613aad565b905060200281019061165a9190614155565b611668906060810190613b1a565b6040516116769291906141b4565b60405180910390a3505b600101611302565b6116906123dd565b73ffffffffffffffffffffffffffffffffffffffff81166116dd576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c890600090a35050565b61175c6123dd565b60085473ffffffffffffffffffffffffffffffffffffffff16156117bd576117bd61179c60025473ffffffffffffffffffffffffffffffffffffffff1690565b60085473ffffffffffffffffffffffffffffffffffffffff169060006126a3565b6008805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935516901561186a5761186a61182a60025473ffffffffffffffffffffffffffffffffffffffff1690565b60085473ffffffffffffffffffffffffffffffffffffffff16907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612825565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e6760405160405180910390a35050565b333014611901576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119116040820160208301613409565b61191e6040830183613b1a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525067ffffffffffffffff86168152600360205260409020805490935061197592509050613a5a565b159050806119cb5750600360008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201816040516119b691906141c8565b9081526040519081900360200190205460ff16155b15611a0457806040517f5075bb380000000000000000000000000000000000000000000000000000000081526004016109e19190613672565b6000611a136060850185613b1a565b810190611a2091906141da565b9050600081604001516001811115611a3a57611a3a6132fe565b03611a4d57611a4884612923565b611c10565b600181604001516001811115611a6557611a656132fe565b03611c10576000808260200151806020019051810190611a859190614286565b915091506040518060400160405280601581526020017f4d4553534147455f41434b4e4f574c45444745445f0000000000000000000000815250604051602001611acf9190613672565b6040516020818303038152906040528051906020012082604051602001611af69190613672565b6040516020818303038152906040528051906020012014611b43576040517fae15168d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008281526009602052604090205460ff166002811115611b6857611b686132fe565b14611ba2576040517f3ec87700000000000000000000000000000000000000000000000000000000008152600481018290526024016109e1565b60008181526009602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600217905590518281527fef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79910160405180910390a150505b50505050565b6001611c236005836123ca565b14611c5d576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018290526024016109e1565b611c688160006109f1565b506000818152600460209081526040808320815160a08101835281548152600182015467ffffffffffffffff16938101939093526002810180549192840191611cb090613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdc90613a5a565b8015611d295780601f10611cfe57610100808354040283529160200191611d29565b820191906000526020600020905b815481529060010190602001808311611d0c57829003601f168201915b50505050508152602001600382018054611d4290613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6e90613a5a565b8015611dbb5780601f10611d9057610100808354040283529160200191611dbb565b820191906000526020600020905b815481529060010190602001808311611d9e57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611e3e5760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101611de9565b50505050815250509050611e5181612c99565b60405182907fef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad90600090a25050565b67ffffffffffffffff8316600090815260036020526040812080548591908190611ea990613a5a565b9050600003611ef0576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016109e1565b6040805160a08101825267ffffffffffffffff8816600090815260036020529182208054829190611f2090613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4c90613a5a565b8015611f995780601f10611f6e57610100808354040283529160200191611f99565b820191906000526020600020905b815481529060010190602001808311611f7c57829003601f168201915b5050509183525050602080820188905260408083018a905260085473ffffffffffffffffffffffffffffffffffffffff16606084015267ffffffffffffffff8b166000908152600390925290206001018054608090920191611ffa90613a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461202690613a5a565b80156120735780601f1061204857610100808354040283529160200191612073565b820191906000526020600020905b81548152906001019060200180831161205657829003601f168201915b5050505050815250905060005b86518110156121d0576120f033308984815181106120a0576120a0613aad565b6020026020010151602001518a85815181106120be576120be613aad565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16612d0b909392919063ffffffff16565b600854875173ffffffffffffffffffffffffffffffffffffffff9091169088908390811061212057612120613aad565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16146121c85760025487516121c89173ffffffffffffffffffffffffffffffffffffffff169089908490811061217957612179613aad565b60200260200101516020015189848151811061219757612197613aad565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166126a39092919063ffffffff16565b600101612080565b506002546040517f20487ded00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906320487ded9061222a908b908690600401614307565b602060405180830381865afa158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b91906143d4565b60085490915073ffffffffffffffffffffffffffffffffffffffff16156122b1576008546122b19073ffffffffffffffffffffffffffffffffffffffff16333084612d0b565b60025460085473ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f99116156122e35760006122e5565b825b8a856040518463ffffffff1660e01b8152600401612304929190614307565b60206040518083038185885af1158015612322573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061234791906143d4565b60008181526009602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055519196509086907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372908390a3505050509392505050565b6123be6123dd565b6123c781612d69565b50565b60006123d68383612e5e565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016109e1565b565b804710156124ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109e1565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612524576040519150601f19603f3d011682016040523d82523d6000602084013e612529565b606091505b50509050806112f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109e1565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112f29084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ee8565b600061269b848484612ff4565b949350505050565b80158061274357506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561271d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274191906143d4565b155b6127cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016109e1565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112f29084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161260c565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561289c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c091906143d4565b6128ca91906143ed565b60405173ffffffffffffffffffffffffffffffffffffffff8516602482015260448101829052909150611c109085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161260c565b6040805160008082526020820190925281612960565b60408051808201909152600080825260208201528152602001906001900390816129395790505b50905060006040518060a001604052808480604001906129809190613b1a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080518082018252601581527f4d4553534147455f41434b4e4f574c45444745445f0000000000000000000000602082810191909152915192820192612a019288359101614400565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152908252602082810186905260085473ffffffffffffffffffffffffffffffffffffffff1683830152606090920191600391600091612a71918901908901613409565b67ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018054612aa190613a5a565b80601f0160208091040260200160405190810160405280929190818152602001828054612acd90613a5a565b8015612b1a5780601f10612aef57610100808354040283529160200191612b1a565b820191906000526020600020905b815481529060010190602001808311612afd57829003601f168201915b50505091909252505060025490915060009073ffffffffffffffffffffffffffffffffffffffff166320487ded612b576040870160208801613409565b846040518363ffffffff1660e01b8152600401612b75929190614307565b602060405180830381865afa158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb691906143d4565b60025460085491925060009173ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f9911615612bee576000612bf0565b835b612c006040890160208a01613409565b866040518463ffffffff1660e01b8152600401612c1e929190614307565b60206040518083038185885af1158015612c3c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612c6191906143d4565b60405190915081908635907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b237290600090a35050505050565b612ca16123dd565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f890612cdd9084906004016135ae565b600060405180830381600087803b158015612cf757600080fd5b505af11580156110e7573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611c109085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161260c565b3373ffffffffffffffffffffffffffffffffffffffff821603612de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016109e1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600081815260028301602052604081205480151580612e825750612e828484613011565b6123d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000060448201526064016109e1565b6000612f4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661301d9092919063ffffffff16565b8051909150156112f25780806020019051810190612f689190614422565b6112f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109e1565b6000828152600284016020526040812082905561269b848461302c565b60006123d68383613038565b606061269b8484600085613050565b60006123d68383613169565b600081815260018301602052604081205415156123d6565b6060824710156130e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109e1565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161310b91906141c8565b60006040518083038185875af1925050503d8060008114613148576040519150601f19603f3d011682016040523d82523d6000602084013e61314d565b606091505b509150915061315e878383876131b8565b979650505050505050565b60008181526001830160205260408120546131b05750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561068c565b50600061068c565b6060831561324e5782516000036132475773ffffffffffffffffffffffffffffffffffffffff85163b613247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109e1565b508161269b565b61269b83838151156132635781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e19190613672565b5080546132a390613a5a565b6000825580601f106132b3575050565b601f0160209004906000526020600020908101906123c791905b808211156132e157600081556001016132cd565b5090565b6000602082840312156132f757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310613368577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b67ffffffffffffffff811681146123c757600080fd5b60008060006040848603121561339957600080fd5b83356133a48161336e565b9250602084013567ffffffffffffffff808211156133c157600080fd5b818601915086601f8301126133d557600080fd5b8135818111156133e457600080fd5b8760208285010111156133f657600080fd5b6020830194508093505050509250925092565b60006020828403121561341b57600080fd5b81356123d68161336e565b60005b83811015613441578181015183820152602001613429565b50506000910152565b60008151808452613462816020860160208601613426565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6040815260006134a7604083018561344a565b82810360208401526134b9818561344a565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146123c757600080fd5b600080604083850312156134f757600080fd5b8235613502816134c2565b946020939093013593505050565b60008060006060848603121561352557600080fd5b8335613530816134c2565b92506020840135613540816134c2565b929592945050506040919091013590565b60008151808452602080850194506020840160005b838110156135a3578151805173ffffffffffffffffffffffffffffffffffffffff1688528301518388015260409096019590820190600101613566565b509495945050505050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a060608401526135e860c084018261344a565b905060608401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403016080860152613624838361344a565b925060808601519150808584030160a0860152506134b98282613551565b6000806040838503121561365557600080fd5b823591506020830135613667816134c2565b809150509250929050565b6020815260006123d6602083018461344a565b60008083601f84011261369757600080fd5b50813567ffffffffffffffff8111156136af57600080fd5b6020830191508360208260051b85010111156136ca57600080fd5b9250929050565b600080600080604085870312156136e757600080fd5b843567ffffffffffffffff808211156136ff57600080fd5b61370b88838901613685565b9096509450602087013591508082111561372457600080fd5b5061373187828801613685565b95989497509550505050565b60006020828403121561374f57600080fd5b813567ffffffffffffffff81111561376657600080fd5b820160a081850312156123d657600080fd5b6000806020838503121561378b57600080fd5b823567ffffffffffffffff8111156137a257600080fd5b6137ae85828601613685565b90969095509350505050565b6000602082840312156137cc57600080fd5b81356123d6816134c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613829576138296137d7565b60405290565b6040516060810167ffffffffffffffff81118282101715613829576138296137d7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613899576138996137d7565b604052919050565b600067ffffffffffffffff8211156138bb576138bb6137d7565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126138f857600080fd5b813561390b613906826138a1565b613852565b81815284602083860101111561392057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561395257600080fd5b833561395d8161336e565b925060208481013567ffffffffffffffff8082111561397b57600080fd5b818701915087601f83011261398f57600080fd5b8135818111156139a1576139a16137d7565b6139af848260051b01613852565b81815260069190911b8301840190848101908a8311156139ce57600080fd5b938501935b82851015613a1a576040858c0312156139ec5760008081fd5b6139f4613806565b85356139ff816134c2565b815285870135878201528252604090940193908501906139d3565b965050506040870135925080831115613a3257600080fd5b5050613a40868287016138e7565b9150509250925092565b8183823760009101908152919050565b600181811c90821680613a6e57607f821691505b602082108103613aa7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613b1057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613b4f57600080fd5b83018035915067ffffffffffffffff821115613b6a57600080fd5b6020019150368190038213156136ca57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613bb457600080fd5b830160208101925035905067ffffffffffffffff811115613bd457600080fd5b8036038213156136ca57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b858110156135a3578135613c4f816134c2565b73ffffffffffffffffffffffffffffffffffffffff168752818301358388015260409687019690910190600101613c3c565b602081528135602082015260006020830135613c9c8161336e565b67ffffffffffffffff8082166040850152613cba6040860186613b7f565b925060a06060860152613cd160c086018483613be3565b925050613ce16060860186613b7f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878603016080880152613d17858385613be3565b9450608088013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018312613d5057600080fd5b60209288019283019235915083821115613d6957600080fd5b8160061b3603831315613d7b57600080fd5b8685030160a087015261315e848284613c2c565b601f8211156112f2576000816000526020600020601f850160051c81016020861015613db85750805b601f850160051c820191505b81811015613dd757828155600101613dc4565b505050505050565b67ffffffffffffffff831115613df757613df76137d7565b613e0b83613e058354613a5a565b83613d8f565b6000601f841160018114613e5d5760008515613e275750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556110e7565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613eac5786850135825560209485019460019092019101613e8c565b5086821015613ee7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8135613f33816134c2565b73ffffffffffffffffffffffffffffffffffffffff81167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550602082013560018201555050565b68010000000000000000831115613f9957613f996137d7565b8054838255808410156140265760017f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083168314613fda57613fda613ef9565b8086168614613feb57613feb613ef9565b5060008360005260206000208360011b81018760011b820191505b80821015614021578282558284830155600282019150614006565b505050505b5060008181526020812083915b85811015613dd7576140458383613f28565b6040929092019160029190910190600101614033565b813581556001810160208301356140718161336e565b67ffffffffffffffff8082167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008454161783556140b16040860186613b1a565b935091506140c3838360028701613ddf565b6140d06060860186613b1a565b935091506140e2838360038701613ddf565b608085013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe185360301831261411957600080fd5b91840191823591508082111561412e57600080fd5b506020820191508060061b360382131561414757600080fd5b611c10818360048601613f80565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112613b1057600080fd5b80151581146123c757600080fd5b6000602082840312156141a957600080fd5b81356123d681614189565b60208152600061269b602083018486613be3565b60008251613b10818460208701613426565b6000602082840312156141ec57600080fd5b813567ffffffffffffffff8082111561420457600080fd5b908301906060828603121561421857600080fd5b61422061382f565b82358281111561422f57600080fd5b61423b878286016138e7565b82525060208301358281111561425057600080fd5b61425c878286016138e7565b602083015250604083013592506002831061427657600080fd5b6040810192909252509392505050565b6000806040838503121561429957600080fd5b825167ffffffffffffffff8111156142b057600080fd5b8301601f810185136142c157600080fd5b80516142cf613906826138a1565b8181528660208385010111156142e457600080fd5b6142f5826020830160208601613426565b60209590950151949694955050505050565b67ffffffffffffffff83168152604060208201526000825160a0604084015261433360e084018261344a565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08085840301606086015261436f838361344a565b9250604086015191508085840301608086015261438c8383613551565b925073ffffffffffffffffffffffffffffffffffffffff60608701511660a086015260808601519150808584030160c0860152506143ca828261344a565b9695505050505050565b6000602082840312156143e657600080fd5b5051919050565b8082018082111561068c5761068c613ef9565b604081526000614413604083018561344a565b90508260208301529392505050565b60006020828403121561443457600080fd5b81516123d68161418956fea164736f6c6343000818000a",
}

var CCIPClientWithACKABI = CCIPClientWithACKMetaData.ABI

var CCIPClientWithACKBin = CCIPClientWithACKMetaData.Bin

func DeployCCIPClientWithACK(auth *bind.TransactOpts, backend bind.ContractBackend, router common.Address, feeToken common.Address) (common.Address, *types.Transaction, *CCIPClientWithACK, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPClientWithACKBin), backend, router, feeToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPClientWithACK{address: address, abi: *parsed, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

type CCIPClientWithACK struct {
	address common.Address
	abi     abi.ABI
	CCIPClientWithACKCaller
	CCIPClientWithACKTransactor
	CCIPClientWithACKFilterer
}

type CCIPClientWithACKCaller struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKTransactor struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKFilterer struct {
	contract *bind.BoundContract
}

type CCIPClientWithACKSession struct {
	Contract     *CCIPClientWithACK
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKCallerSession struct {
	Contract *CCIPClientWithACKCaller
	CallOpts bind.CallOpts
}

type CCIPClientWithACKTransactorSession struct {
	Contract     *CCIPClientWithACKTransactor
	TransactOpts bind.TransactOpts
}

type CCIPClientWithACKRaw struct {
	Contract *CCIPClientWithACK
}

type CCIPClientWithACKCallerRaw struct {
	Contract *CCIPClientWithACKCaller
}

type CCIPClientWithACKTransactorRaw struct {
	Contract *CCIPClientWithACKTransactor
}

func NewCCIPClientWithACK(address common.Address, backend bind.ContractBackend) (*CCIPClientWithACK, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPClientWithACKABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPClientWithACK(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACK{address: address, abi: abi, CCIPClientWithACKCaller: CCIPClientWithACKCaller{contract: contract}, CCIPClientWithACKTransactor: CCIPClientWithACKTransactor{contract: contract}, CCIPClientWithACKFilterer: CCIPClientWithACKFilterer{contract: contract}}, nil
}

func NewCCIPClientWithACKCaller(address common.Address, caller bind.ContractCaller) (*CCIPClientWithACKCaller, error) {
	contract, err := bindCCIPClientWithACK(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCaller{contract: contract}, nil
}

func NewCCIPClientWithACKTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPClientWithACKTransactor, error) {
	contract, err := bindCCIPClientWithACK(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTransactor{contract: contract}, nil
}

func NewCCIPClientWithACKFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPClientWithACKFilterer, error) {
	contract, err := bindCCIPClientWithACK(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFilterer{contract: contract}, nil
}

func bindCCIPClientWithACK(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPClientWithACKMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CCIPClientWithACKTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPClientWithACK.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transfer(opts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) ACKMESSAGEHEADER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "ACK_MESSAGE_HEADER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ACKMESSAGEHEADER() (string, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) ACKMESSAGEHEADER() (string, error) {
	return _CCIPClientWithACK.Contract.ACKMESSAGEHEADER(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getMessageContents", messageId)

	if err != nil {
		return *new(ClientAny2EVMMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(ClientAny2EVMMessage)).(*ClientAny2EVMMessage)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPClientWithACK.Contract.GetMessageContents(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetMessageStatus(opts *bind.CallOpts, messageId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getMessageStatus", messageId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetMessageStatus(messageId [32]byte) (*big.Int, error) {
	return _CCIPClientWithACK.Contract.GetMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetMessageStatus(messageId [32]byte) (*big.Int, error) {
	return _CCIPClientWithACK.Contract.GetMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) GetRouter() (common.Address, error) {
	return _CCIPClientWithACK.Contract.GetRouter(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "isApprovedSender", sourceChainSelector, senderAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPClientWithACK.Contract.IsApprovedSender(&_CCIPClientWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) Owner() (common.Address, error) {
	return _CCIPClientWithACK.Contract.Owner(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

	error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_chainConfigs", destChainSelector)

	outstruct := new(SChainConfigs)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.ExtraArgsBytes = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPClientWithACK.Contract.SChainConfigs(&_CCIPClientWithACK.CallOpts, destChainSelector)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_feeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.SFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SFeeToken() (common.Address, error) {
	return _CCIPClientWithACK.Contract.SFeeToken(&_CCIPClientWithACK.CallOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKCaller) SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error) {
	var out []interface{}
	err := _CCIPClientWithACK.contract.Call(opts, &out, "s_messageStatus", messageId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_CCIPClientWithACK *CCIPClientWithACKSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKCallerSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPClientWithACK.Contract.SMessageStatus(&_CCIPClientWithACK.CallOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "abandonFailedMessage", messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AbandonFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.AcceptOwnership(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "applyChainUpdates", chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ApplyChainUpdates(&_CCIPClientWithACK.TransactOpts, chains)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipReceive", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipReceive(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "ccipSend", destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) CcipSend(destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.CcipSend(&_CCIPClientWithACK.TransactOpts, destChainSelector, tokenAmounts, data)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "processMessage", message)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.ProcessMessage(&_CCIPClientWithACK.TransactOpts, message)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "retryFailedMessage", messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.RetryFailedMessage(&_CCIPClientWithACK.TransactOpts, messageId)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.TransferOwnership(&_CCIPClientWithACK.TransactOpts, to)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateApprovedSenders", adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateApprovedSenders(&_CCIPClientWithACK.TransactOpts, adds, removes)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateFeeToken", token)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateFeeToken(&_CCIPClientWithACK.TransactOpts, token)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "updateRouter", newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.UpdateRouter(&_CCIPClientWithACK.TransactOpts, newRouter)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) WithdrawNativeToken(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "withdrawNativeToken", to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) WithdrawNativeToken(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawNativeToken(&_CCIPClientWithACK.TransactOpts, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) WithdrawNativeToken(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawNativeToken(&_CCIPClientWithACK.TransactOpts, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.Transact(opts, "withdrawTokens", token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.WithdrawTokens(&_CCIPClientWithACK.TransactOpts, token, to, amount)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPClientWithACK.contract.RawTransact(opts, nil)
}

func (_CCIPClientWithACK *CCIPClientWithACKSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

func (_CCIPClientWithACK *CCIPClientWithACKTransactorSession) Receive() (*types.Transaction, error) {
	return _CCIPClientWithACK.Contract.Receive(&_CCIPClientWithACK.TransactOpts)
}

type CCIPClientWithACKApprovedSenderAddedIterator struct {
	Event *CCIPClientWithACKApprovedSenderAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderAdded struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderAddedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error) {
	event := new(CCIPClientWithACKApprovedSenderAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKApprovedSenderRemovedIterator struct {
	Event *CCIPClientWithACKApprovedSenderRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKApprovedSenderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKApprovedSenderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKApprovedSenderRemoved struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKApprovedSenderRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ApprovedSenderRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKApprovedSenderRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error) {
	event := new(CCIPClientWithACKApprovedSenderRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKCCIPRouterModifiedIterator struct {
	Event *CCIPClientWithACKCCIPRouterModified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKCCIPRouterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKCCIPRouterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKCCIPRouterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKCCIPRouterModified struct {
	OldRouter common.Address
	NewRouter common.Address
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKCCIPRouterModifiedIterator{contract: _CCIPClientWithACK.contract, event: "CCIPRouterModified", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKCCIPRouterModified)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error) {
	event := new(CCIPClientWithACKCCIPRouterModified)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainAddedIterator struct {
	Event *CCIPClientWithACKChainAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainAdded struct {
	RemoteChainSelector uint64
	Recipient           common.Hash
	ExtraArgsBytes      []byte
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainAddedIterator{contract: _CCIPClientWithACK.contract, event: "ChainAdded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainAdded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error) {
	event := new(CCIPClientWithACKChainAdded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKChainRemovedIterator struct {
	Event *CCIPClientWithACKChainRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKChainRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKChainRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKChainRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKChainRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKChainRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKChainRemoved struct {
	RemoveChainSelector uint64
	Raw                 types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKChainRemovedIterator{contract: _CCIPClientWithACK.contract, event: "ChainRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKChainRemoved)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error) {
	event := new(CCIPClientWithACKChainRemoved)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKFeeTokenUpdatedIterator struct {
	Event *CCIPClientWithACKFeeTokenUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKFeeTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKFeeTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKFeeTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKFeeTokenUpdated struct {
	OldToken common.Address
	NewToken common.Address
	Raw      types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKFeeTokenUpdatedIterator{contract: _CCIPClientWithACK.contract, event: "FeeTokenUpdated", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKFeeTokenUpdated)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error) {
	event := new(CCIPClientWithACKFeeTokenUpdated)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAbandonedIterator struct {
	Event *CCIPClientWithACKMessageAbandoned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAbandoned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAbandoned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAbandonedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAbandoned struct {
	MessageId     [32]byte
	TokenReceiver common.Address
	Raw           types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAbandonedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAbandoned", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAbandoned)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error) {
	event := new(CCIPClientWithACKMessageAbandoned)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckReceivedIterator struct {
	Event *CCIPClientWithACKMessageAckReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckReceived struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckReceivedIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckReceived", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckReceived)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error) {
	event := new(CCIPClientWithACKMessageAckReceived)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageAckSentIterator struct {
	Event *CCIPClientWithACKMessageAckSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageAckSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageAckSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageAckSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageAckSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageAckSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageAckSent struct {
	IncomingMessageId [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error) {

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageAckSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageAckSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error) {

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageAckSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error) {
	event := new(CCIPClientWithACKMessageAckSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageFailedIterator struct {
	Event *CCIPClientWithACKMessageFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageFailedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageFailed struct {
	MessageId [32]byte
	Reason    []byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageFailedIterator{contract: _CCIPClientWithACK.contract, event: "MessageFailed", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageFailed)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error) {
	event := new(CCIPClientWithACKMessageFailed)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageRecoveredIterator struct {
	Event *CCIPClientWithACKMessageRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageRecovered struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageRecoveredIterator{contract: _CCIPClientWithACK.contract, event: "MessageRecovered", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageRecovered)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error) {
	event := new(CCIPClientWithACKMessageRecovered)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSentIterator struct {
	Event *CCIPClientWithACKMessageSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSentIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSent struct {
	IncomingMessageId [32]byte
	ACKMessageId      [32]byte
	Raw               types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSentIterator{contract: _CCIPClientWithACK.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSent)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error) {
	event := new(CCIPClientWithACKMessageSent)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKMessageSucceededIterator struct {
	Event *CCIPClientWithACKMessageSucceeded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKMessageSucceededIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKMessageSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKMessageSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKMessageSucceededIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKMessageSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKMessageSucceeded struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKMessageSucceededIterator{contract: _CCIPClientWithACK.contract, event: "MessageSucceeded", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKMessageSucceeded)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error) {
	event := new(CCIPClientWithACKMessageSucceeded)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferRequestedIterator struct {
	Event *CCIPClientWithACKOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferRequestedIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferRequested)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error) {
	event := new(CCIPClientWithACKOwnershipTransferRequested)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKOwnershipTransferredIterator struct {
	Event *CCIPClientWithACKOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKOwnershipTransferredIterator{contract: _CCIPClientWithACK.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKOwnershipTransferred)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error) {
	event := new(CCIPClientWithACKOwnershipTransferred)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPClientWithACKTokensWithdrawnByOwnerIterator struct {
	Event *CCIPClientWithACKTokensWithdrawnByOwner

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPClientWithACKTokensWithdrawnByOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Error() error {
	return it.fail
}

func (it *CCIPClientWithACKTokensWithdrawnByOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPClientWithACKTokensWithdrawnByOwner struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.FilterLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPClientWithACKTokensWithdrawnByOwnerIterator{contract: _CCIPClientWithACK.contract, event: "TokensWithdrawnByOwner", logs: logs, sub: sub}, nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPClientWithACK.contract.WatchLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPClientWithACKTokensWithdrawnByOwner)
				if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPClientWithACK *CCIPClientWithACKFilterer) ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error) {
	event := new(CCIPClientWithACKTokensWithdrawnByOwner)
	if err := _CCIPClientWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SChainConfigs struct {
	Recipient      []byte
	ExtraArgsBytes []byte
}

func (_CCIPClientWithACK *CCIPClientWithACK) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPClientWithACK.abi.Events["ApprovedSenderAdded"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderAdded(log)
	case _CCIPClientWithACK.abi.Events["ApprovedSenderRemoved"].ID:
		return _CCIPClientWithACK.ParseApprovedSenderRemoved(log)
	case _CCIPClientWithACK.abi.Events["CCIPRouterModified"].ID:
		return _CCIPClientWithACK.ParseCCIPRouterModified(log)
	case _CCIPClientWithACK.abi.Events["ChainAdded"].ID:
		return _CCIPClientWithACK.ParseChainAdded(log)
	case _CCIPClientWithACK.abi.Events["ChainRemoved"].ID:
		return _CCIPClientWithACK.ParseChainRemoved(log)
	case _CCIPClientWithACK.abi.Events["FeeTokenUpdated"].ID:
		return _CCIPClientWithACK.ParseFeeTokenUpdated(log)
	case _CCIPClientWithACK.abi.Events["MessageAbandoned"].ID:
		return _CCIPClientWithACK.ParseMessageAbandoned(log)
	case _CCIPClientWithACK.abi.Events["MessageAckReceived"].ID:
		return _CCIPClientWithACK.ParseMessageAckReceived(log)
	case _CCIPClientWithACK.abi.Events["MessageAckSent"].ID:
		return _CCIPClientWithACK.ParseMessageAckSent(log)
	case _CCIPClientWithACK.abi.Events["MessageFailed"].ID:
		return _CCIPClientWithACK.ParseMessageFailed(log)
	case _CCIPClientWithACK.abi.Events["MessageRecovered"].ID:
		return _CCIPClientWithACK.ParseMessageRecovered(log)
	case _CCIPClientWithACK.abi.Events["MessageSent"].ID:
		return _CCIPClientWithACK.ParseMessageSent(log)
	case _CCIPClientWithACK.abi.Events["MessageSucceeded"].ID:
		return _CCIPClientWithACK.ParseMessageSucceeded(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferRequested(log)
	case _CCIPClientWithACK.abi.Events["OwnershipTransferred"].ID:
		return _CCIPClientWithACK.ParseOwnershipTransferred(log)
	case _CCIPClientWithACK.abi.Events["TokensWithdrawnByOwner"].ID:
		return _CCIPClientWithACK.ParseTokensWithdrawnByOwner(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPClientWithACKApprovedSenderAdded) Topic() common.Hash {
	return common.HexToHash("0x72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e7")
}

func (CCIPClientWithACKApprovedSenderRemoved) Topic() common.Hash {
	return common.HexToHash("0x021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce9")
}

func (CCIPClientWithACKCCIPRouterModified) Topic() common.Hash {
	return common.HexToHash("0x3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c8")
}

func (CCIPClientWithACKChainAdded) Topic() common.Hash {
	return common.HexToHash("0x1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a87212")
}

func (CCIPClientWithACKChainRemoved) Topic() common.Hash {
	return common.HexToHash("0x5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d859916")
}

func (CCIPClientWithACKFeeTokenUpdated) Topic() common.Hash {
	return common.HexToHash("0x91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e67")
}

func (CCIPClientWithACKMessageAbandoned) Topic() common.Hash {
	return common.HexToHash("0xd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957")
}

func (CCIPClientWithACKMessageAckReceived) Topic() common.Hash {
	return common.HexToHash("0xef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79")
}

func (CCIPClientWithACKMessageAckSent) Topic() common.Hash {
	return common.HexToHash("0x75944f95ba0be568cb30faeb0ef135cb73d07006939da29722d670a97f5c5b26")
}

func (CCIPClientWithACKMessageFailed) Topic() common.Hash {
	return common.HexToHash("0x55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f")
}

func (CCIPClientWithACKMessageRecovered) Topic() common.Hash {
	return common.HexToHash("0xef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad")
}

func (CCIPClientWithACKMessageSent) Topic() common.Hash {
	return common.HexToHash("0x9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372")
}

func (CCIPClientWithACKMessageSucceeded) Topic() common.Hash {
	return common.HexToHash("0xdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f")
}

func (CCIPClientWithACKOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPClientWithACKOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CCIPClientWithACKTokensWithdrawnByOwner) Topic() common.Hash {
	return common.HexToHash("0x6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e")
}

func (_CCIPClientWithACK *CCIPClientWithACK) Address() common.Address {
	return _CCIPClientWithACK.address
}

type CCIPClientWithACKInterface interface {
	ACKMESSAGEHEADER(opts *bind.CallOpts) (string, error)

	GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error)

	GetMessageStatus(opts *bind.CallOpts, messageId [32]byte) (*big.Int, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

		error)

	SFeeToken(opts *bind.CallOpts) (common.Address, error)

	SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error)

	AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error)

	CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	CcipSend(opts *bind.TransactOpts, destChainSelector uint64, tokenAmounts []ClientEVMTokenAmount, data []byte) (*types.Transaction, error)

	ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error)

	UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error)

	WithdrawNativeToken(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderAddedIterator, error)

	WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderAdded(log types.Log) (*CCIPClientWithACKApprovedSenderAdded, error)

	FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKApprovedSenderRemovedIterator, error)

	WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderRemoved(log types.Log) (*CCIPClientWithACKApprovedSenderRemoved, error)

	FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPClientWithACKCCIPRouterModifiedIterator, error)

	WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error)

	ParseCCIPRouterModified(log types.Log) (*CCIPClientWithACKCCIPRouterModified, error)

	FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPClientWithACKChainAddedIterator, error)

	WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseChainAdded(log types.Log) (*CCIPClientWithACKChainAdded, error)

	FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPClientWithACKChainRemovedIterator, error)

	WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error)

	ParseChainRemoved(log types.Log) (*CCIPClientWithACKChainRemoved, error)

	FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPClientWithACKFeeTokenUpdatedIterator, error)

	WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error)

	ParseFeeTokenUpdated(log types.Log) (*CCIPClientWithACKFeeTokenUpdated, error)

	FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageAbandonedIterator, error)

	WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error)

	ParseMessageAbandoned(log types.Log) (*CCIPClientWithACKMessageAbandoned, error)

	FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckReceivedIterator, error)

	WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckReceived) (event.Subscription, error)

	ParseMessageAckReceived(log types.Log) (*CCIPClientWithACKMessageAckReceived, error)

	FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPClientWithACKMessageAckSentIterator, error)

	WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageAckSent) (event.Subscription, error)

	ParseMessageAckSent(log types.Log) (*CCIPClientWithACKMessageAckSent, error)

	FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageFailedIterator, error)

	WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error)

	ParseMessageFailed(log types.Log) (*CCIPClientWithACKMessageFailed, error)

	FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageRecoveredIterator, error)

	WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error)

	ParseMessageRecovered(log types.Log) (*CCIPClientWithACKMessageRecovered, error)

	FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPClientWithACKMessageSentIterator, error)

	WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error)

	ParseMessageSent(log types.Log) (*CCIPClientWithACKMessageSent, error)

	FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPClientWithACKMessageSucceededIterator, error)

	WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error)

	ParseMessageSucceeded(log types.Log) (*CCIPClientWithACKMessageSucceeded, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPClientWithACKOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPClientWithACKOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPClientWithACKOwnershipTransferred, error)

	FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPClientWithACKTokensWithdrawnByOwnerIterator, error)

	WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPClientWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error)

	ParseTokensWithdrawnByOwner(log types.Log) (*CCIPClientWithACKTokensWithdrawnByOwner, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
