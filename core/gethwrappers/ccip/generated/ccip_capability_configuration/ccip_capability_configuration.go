// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_capability_configuration

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPCapabilityConfigurationChainConfig struct {
	Readers [][32]byte
	Config  []byte
}

type CCIPCapabilityConfigurationChainConfigUpdate struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
}

var CCIPCapabilityConfigurationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"NoCapabilityConfigurationSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilityRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotLength\",\"type\":\"uint256\"}],\"name\":\"SignerP2PIdPairMustBeLengthTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620034903803806200349083398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b6080516132bd620001d3600039600081816107b8015261093f01526132bd6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e9578063ddc042a814610111578063f2fde38b14610126578063fba64a7c1461013957600080fd5b8063181f5a771461008d5780635bc6cf88146100ab57806379ba5097146100c0578063884efe61146100c8575b600080fd5b61009561014c565b6040516100a2919061245a565b60405180910390f35b6100be6100b93660046124b9565b610168565b005b6100be6104ce565b6100956100d6366004612525565b5060408051602081019091526000815290565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6101196105cb565b6040516100a2919061259f565b6100be610134366004612643565b61078c565b6100be61014736600461269a565b6107a0565b60405180606001604052806025815260200161328c6025913981565b610170610861565b60005b83811015610368576101c285858381811061019057610190612757565b90506020028101906101a29190612786565b6101b09060208101906127c4565b60039067ffffffffffffffff166108e4565b61023c578484828181106101d8576101d8612757565b90506020028101906101ea9190612786565b6101f89060208101906127c4565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024015b60405180910390fd5b6002600086868481811061025257610252612757565b90506020028101906102649190612786565b6102729060208101906127c4565b67ffffffffffffffff1681526020810191909152604001600090812090610299828261213b565b6102a7600183016000612159565b50506102f08585838181106102be576102be612757565b90506020028101906102d09190612786565b6102de9060208101906127c4565b60039067ffffffffffffffff16610901565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f085858381811061032457610324612757565b90506020028101906103369190612786565b6103449060208101906127c4565b60405167ffffffffffffffff909116815260200160405180910390a1600101610173565b5060005b818110156104c757600083838381811061038857610388612757565b905060200281019061039a9190612786565b6103a8906020810190612786565b6103b19061297e565b805190915060008585858181106103ca576103ca612757565b90506020028101906103dc9190612786565b6103ea9060208101906127c4565b905060005b82518110156104225761041a83828151811061040d5761040d612757565b602002602001015161090d565b6001016103ef565b5067ffffffffffffffff81166000908152600260209081526040909120845180518693610453928492910190612193565b50602082015160018201906104689082612ae3565b5061048291506003905067ffffffffffffffff8316610a28565b507f0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a5081846040516104b4929190612bfd565b60405180910390a150505060010161036c565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610233565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006105d96003610a34565b67ffffffffffffffff8111156105f1576105f16127df565b60405190808252806020026020018201604052801561063657816020015b604080518082019091526060808252602082015281526020019060019003908161060f5790505b50905060005b6106466003610a34565b811015610786576002600061065c600384610a3e565b67ffffffffffffffff16815260208082019290925260409081016000208151815460609481028201850184529281018381529093919284928491908401828280156106c657602002820191906000526020600020905b8154815260200190600101908083116106b2575b505050505081526020016001820180546106df90612a45565b80601f016020809104026020016040519081016040528092919081815260200182805461070b90612a45565b80156107585780601f1061072d57610100808354040283529160200191610758565b820191906000526020600020905b81548152906001019060200180831161073b57829003601f168201915b50505050508152505082828151811061077357610773612757565b602090810291909101015260010161063c565b50919050565b610794610861565b61079d81610a4a565b50565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461080f576040517f7b2485a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061081d84860186612d46565b905060008061082b83610b3f565b81519193509150156108435761084384600084610d36565b8051156108565761085684600183610d36565b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610233565b565b600081815260018301602052604081205415155b90505b92915050565b60006108f883836113df565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa15801561099b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109e19190810190612eec565b50905081816040015114610a24576040517f8907a4fa00000000000000000000000000000000000000000000000000000000815260048101839052602401610233565b5050565b60006108f883836114d9565b60006108fb825490565b60006108f88383611528565b3373ffffffffffffffffffffffffffffffffffffffff821603610ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610233565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b606080600460ff1683511115610b81576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c0810191909152815260200190600190039081610b9757505060408051600280825260608201909252919350602082015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c0810191909152815260200190600190039081610bf957905050905060008060005b8551811015610d29576000868281518110610c6957610c69612757565b6020026020010151600001516001811115610c8657610c86612ff4565b03610cd857858181518110610c9d57610c9d612757565b6020026020010151858460ff1681518110610cba57610cba612757565b60200260200101819052508280610cd090613052565b935050610d21565b858181518110610cea57610cea612757565b6020026020010151848360ff1681518110610d0757610d07612757565b60200260200101819052508180610d1d90613052565b9250505b600101610c4c565b5090835281529092909150565b63ffffffff8316600090815260056020526040812081846001811115610d5e57610d5e612ff4565b6001811115610d6f57610d6f612ff4565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561113957600084815260209020604080516101408101909152600784029091018054829060608201908390829060ff166001811115610de257610de2612ff4565b6001811115610df357610df3612ff4565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b82821015610f2257838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610f0f578382906000526020600020018054610e8290612a45565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae90612a45565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b505050505081526020019060010190610e63565b5050505081526020019060010190610e2f565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561104257838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561102f578382906000526020600020018054610fa290612a45565b80601f0160208091040260200160405190810160405280929190818152602001828054610fce90612a45565b801561101b5780601f10610ff05761010080835404028352916020019161101b565b820191906000526020600020905b815481529060010190602001808311610ffe57829003601f168201915b505050505081526020019060010190610f83565b5050505081526020019060010190610f4f565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff16604082015260048201805460609092019161108090612a45565b80601f01602080910402602001604051908101604052809291908181526020018280546110ac90612a45565b80156110f95780601f106110ce576101008083540402835291602001916110f9565b820191906000526020600020905b8154815290600101906020018083116110dc57829003601f168201915b505050919092525050508152600582015467ffffffffffffffff166020808301919091526006909201546040909101529082526001929092019101610d9d565b505050509050600061114b8251611552565b905060006111598451611552565b905061116582826115b6565b600061117487858786866116aa565b90506111808482611a7e565b63ffffffff87166000908152600560205260408120908760018111156111a8576111a8612ff4565b60018111156111b9576111b9612ff4565b815260200190815260200160002060006111d391906121de565b60005b81518110156113d55763ffffffff881660009081526005602052604081209088600181111561120757611207612ff4565b600181111561121857611218612ff4565b815260200190815260200160002082828151811061123857611238612757565b6020908102919091018101518254600181810185556000948552929093208151805160079095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169083818111156112a2576112a2612ff4565b0217905550602082810151825467ffffffffffffffff909116610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff909116178255604083015180516112fd92600185019201906121ff565b50606082015180516113199160028401916020909101906121ff565b50608082015160038201805460a085015167ffffffffffffffff16610100027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911660ff9093169290921791909117905560c0820151600482019061137f9082612ae3565b50505060208201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9092169190911790556040909101516006909101556001016111d6565b5050505050505050565b600081815260018301602052604081205480156114c8576000611403600183613071565b855490915060009061141790600190613071565b905081811461147c57600086600001828154811061143757611437612757565b906000526020600020015490508087600001848154811061145a5761145a612757565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061148d5761148d613084565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108fb565b60009150506108fb565b5092915050565b6000818152600183016020526040812054611520575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108fb565b5060006108fb565b600082600001828154811061153f5761153f612757565b9060005260206000200154905092915050565b60008160000361156457506000919050565b8160010361157457506001919050565b8160020361158457506002919050565b6040517f4a44867700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808360028111156115cb576115cb612ff4565b1480156115e9575060018260028111156115e7576115e7612ff4565b145b90506000600184600281111561160157611601612ff4565b14801561161f5750600283600281111561161d5761161d612ff4565b145b90506000600285600281111561163757611637612ff4565b1480156116555750600184600281111561165357611653612ff4565b145b905082806116605750815b806116685750805b15611674575050505050565b84846040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016102339291906130c7565b60606000845167ffffffffffffffff8111156116c8576116c86127df565b6040519080825280602002602001820160405280156116f1578160200160208202803683370190505b509050600084600281111561170857611708612ff4565b1480156117265750600183600281111561172457611724612ff4565b145b156117675760018160008151811061174057611740612757565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250506118cf565b600184600281111561177b5761177b612ff4565b1480156117995750600283600281111561179757611797612ff4565b145b1561183057856000815181106117b1576117b1612757565b602002602001015160200151816000815181106117d0576117d0612757565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250508560008151811061180557611805612757565b602002602001015160200151600161181d91906130e2565b8160018151811061174057611740612757565b600284600281111561184457611844612ff4565b1480156118625750600183600281111561186057611860612ff4565b145b15611899578560018151811061187a5761187a612757565b6020026020010151602001518160008151811061174057611740612757565b83836040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016102339291906130c7565b6000855167ffffffffffffffff8111156118eb576118eb6127df565b60405190808252806020026020018201604052801561198957816020015b6040805161014081018252600060608083018281526080840183905260a0840182905260c0840182905260e084018390526101008401839052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816119095790505b50905060005b8251811015611a72576119ba8782815181106119ad576119ad612757565b6020026020010151611e02565b60405180606001604052808883815181106119d7576119d7612757565b602002602001015181526020018483815181106119f6576119f6612757565b602002602001015167ffffffffffffffff168152602001611a4a8b868581518110611a2357611a23612757565b60200260200101518b8681518110611a3d57611a3d612757565b60200260200101516120dc565b815250828281518110611a5f57611a5f612757565b602090810291909101015260010161198f565b50979650505050505050565b8151815181158015611a905750806001145b15611b315782600081518110611aa857611aa8612757565b60200260200101516020015167ffffffffffffffff16600114611b2c5782600081518110611ad857611ad8612757565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260016024820152604401610233565b611dfc565b816001148015611b415750806002145b15611cf75783600081518110611b5957611b59612757565b60200260200101516040015183600081518110611b7857611b78612757565b60200260200101516040015114611c045782600081518110611b9c57611b9c612757565b60200260200101516040015184600081518110611bbb57611bbb612757565b6020026020010151604001516040517fc7ccdd7f000000000000000000000000000000000000000000000000000000008152600401610233929190918252602082015260400190565b83600081518110611c1757611c17612757565b6020026020010151602001516001611c2f91906130e2565b67ffffffffffffffff1683600181518110611c4c57611c4c612757565b60200260200101516020015167ffffffffffffffff1614611b2c5782600181518110611c7a57611c7a612757565b60200260200101516020015184600081518110611c9957611c99612757565b6020026020010151602001516001611cb191906130e2565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610233565b816002148015611d075750806001145b15611dca5783600181518110611d1f57611d1f612757565b60200260200101516040015183600081518110611d3e57611d3e612757565b60200260200101516040015114611b2c5782600081518110611d6257611d62612757565b60200260200101516040015184600181518110611d8157611d81612757565b6020026020010151604001516040517f9e975670000000000000000000000000000000000000000000000000000000008152600401610233929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b806020015167ffffffffffffffff16600003611e4a576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081516001811115611e5f57611e5f612ff4565b14158015611e805750600181516001811115611e7d57611e7d612ff4565b14155b15611eb7576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151611ed29060039067ffffffffffffffff166108e4565b611f1a5760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602401610233565b604081015151601f1015611f5a576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015151601f1015611f9a576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806080015160ff16600003611fdb576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6080810151611feb906003613103565b60ff168160400151511161202b576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b816040015151811015610a245760008260400151828151811061205357612053612757565b60200260200101519050805160021461209d5780516040517f2928b16800000000000000000000000000000000000000000000000000000000815260040161023391815260200190565b6120d3816000815181106120b3576120b3612757565b60200260200101518060200190518101906120ce919061311f565b61090d565b5060010161202e565b60008160200151848360000151858560400151866060015187608001518860a001518960c0015160405160200161211b999897969594939291906131f2565b6040516020818303038152906040528051906020012090505b9392505050565b508054600082559060005260206000209081019061079d9190612258565b50805461216590612a45565b6000825580601f10612175575050565b601f01602090049060005260206000209081019061079d9190612258565b8280548282559060005260206000209081019282156121ce579160200282015b828111156121ce5782518255916020019190600101906121b3565b506121da929150612258565b5090565b508054600082556007029060005260206000209081019061079d919061226d565b82805482825590600052602060002090810192821561224c579160200282015b8281111561224c578251805161223c91849160209091019061232e565b509160200191906001019061221f565b506121da929150612380565b5b808211156121da5760008155600101612259565b808211156121da5780547fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000168155600081816122ac600183018261239d565b6122ba60028301600061239d565b6003820180547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000001690556122f2600483016000612159565b5050506005810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690556000600682015560070161226d565b828054828255906000526020600020908101928215612374579160200282015b8281111561237457825182906123649082612ae3565b509160200191906001019061234e565b506121da9291506123bb565b808211156121da57600061239482826123d8565b50600101612380565b508054600082559060005260206000209081019061079d9190612380565b808211156121da5760006123cf8282612159565b506001016123bb565b508054600082559060005260206000209081019061079d91906123bb565b6000815180845260005b8181101561241c57602081850181015186830182015201612400565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006108f860208301846123f6565b60008083601f84011261247f57600080fd5b50813567ffffffffffffffff81111561249757600080fd5b6020830191508360208260051b85010111156124b257600080fd5b9250929050565b600080600080604085870312156124cf57600080fd5b843567ffffffffffffffff808211156124e757600080fd5b6124f38883890161246d565b9096509450602087013591508082111561250c57600080fd5b506125198782880161246d565b95989497509550505050565b60006020828403121561253757600080fd5b5035919050565b805160408084528151908401819052600091602091908201906060860190845b8181101561257a5783518352928401929184019160010161255e565b505060208501519250858103602087015261259581846123f6565b9695505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612614577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261260285835161253e565b945092850192908501906001016125c8565b5092979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461079d57600080fd5b60006020828403121561265557600080fd5b813561213481612621565b803567ffffffffffffffff8116811461267857600080fd5b919050565b63ffffffff8116811461079d57600080fd5b80356126788161267d565b600080600080600080608087890312156126b357600080fd5b863567ffffffffffffffff808211156126cb57600080fd5b6126d78a838b0161246d565b909850965060208901359150808211156126f057600080fd5b818901915089601f83011261270457600080fd5b81358181111561271357600080fd5b8a602082850101111561272557600080fd5b60208301965080955050505061273d60408801612660565b915061274b6060880161268f565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126127ba57600080fd5b9190910192915050565b6000602082840312156127d657600080fd5b6108f882612660565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612831576128316127df565b60405290565b60405160e0810167ffffffffffffffff81118282101715612831576128316127df565b6040516080810167ffffffffffffffff81118282101715612831576128316127df565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128c4576128c46127df565b604052919050565b600067ffffffffffffffff8211156128e6576128e66127df565b5060051b60200190565b600082601f83011261290157600080fd5b813567ffffffffffffffff81111561291b5761291b6127df565b61294c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161287d565b81815284602083860101111561296157600080fd5b816020850160208301376000918101602001919091529392505050565b60006040823603121561299057600080fd5b61299861280e565b823567ffffffffffffffff808211156129b057600080fd5b9084019036601f8301126129c357600080fd5b813560206129d86129d3836128cc565b61287d565b82815260059290921b840181019181810190368411156129f757600080fd5b948201945b83861015612a15578535825294820194908201906129fc565b86525086810135935082841115612a2b57600080fd5b612a37368589016128f0565b908501525091949350505050565b600181811c90821680612a5957607f821691505b602082108103610786577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115612ade576000816000526020600020601f850160051c81016020861015612abb5750805b601f850160051c820191505b81811015612ada57828155600101612ac7565b5050505b505050565b815167ffffffffffffffff811115612afd57612afd6127df565b612b1181612b0b8454612a45565b84612a92565b602080601f831160018114612b645760008415612b2e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612ada565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612bb157888601518255948401946001909101908401612b92565b5085821015612bed57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83168152604060208201526000612c20604083018461253e565b949350505050565b80356002811061267857600080fd5b600082601f830112612c4857600080fd5b81356020612c586129d3836128cc565b82815260059290921b84018101918181019086841115612c7757600080fd5b8286015b84811015612d2a57803567ffffffffffffffff80821115612c9b57600080fd5b818901915089603f830112612caf57600080fd5b85820135612cbf6129d3826128cc565b81815260059190911b830160400190878101908c831115612cdf57600080fd5b604085015b83811015612d1857803585811115612cfb57600080fd5b612d0a8f6040838a01016128f0565b845250918901918901612ce4565b50875250505092840192508301612c7b565b509695505050505050565b803560ff8116811461267857600080fd5b60006020808385031215612d5957600080fd5b823567ffffffffffffffff80821115612d7157600080fd5b818501915085601f830112612d8557600080fd5b8135612d936129d3826128cc565b81815260059190911b83018401908481019088831115612db257600080fd5b8585015b83811015612ed457803585811115612dcd57600080fd5b860160e0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215612e025760008081fd5b612e0a612837565b612e15898301612c28565b81526040612e24818401612660565b8a83015260608084013589811115612e3c5760008081fd5b612e4a8f8d83880101612c37565b8385015250608091508184013589811115612e655760008081fd5b612e738f8d83880101612c37565b82850152505060a0612e86818501612d35565b8284015260c09150612e99828501612660565b9083015260e083013588811115612eb05760008081fd5b612ebe8e8c838701016128f0565b9183019190915250845250918601918601612db6565b5098975050505050505050565b80516126788161267d565b60008060408385031215612eff57600080fd5b825167ffffffffffffffff80821115612f1757600080fd5b9084019060808287031215612f2b57600080fd5b612f3361285a565b8251612f3e8161267d565b8152602083810151612f4f81612621565b8282015260408481015190830152606084015183811115612f6f57600080fd5b80850194505087601f850112612f8457600080fd5b83519250612f946129d3846128cc565b83815260059390931b84018101928181019089851115612fb357600080fd5b948201945b84861015612fd157855182529482019490820190612fb8565b8060608501525050819550612fe7818801612ee1565b9450505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff810361306857613068613023565b60010192915050565b818103818111156108fb576108fb613023565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600381106130c3576130c3612ff4565b9052565b604081016130d582856130b3565b61213460208301846130b3565b67ffffffffffffffff8181168382160190808211156114d2576114d2613023565b60ff81811683821602908116908181146114d2576114d2613023565b60006020828403121561313157600080fd5b5051919050565b6000828251808552602080860195506005818360051b8501018287016000805b868110156131e3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088850381018c5283518051808752908801908887019080891b88018a01865b828110156131cc57858a83030184526131ba8286516123f6565b948c0194938c019391506001016131a0565b509e8a019e97505050938701935050600101613158565b50919998505050505050505050565b600061012067ffffffffffffffff808d16845263ffffffff8c16602085015260028b1061322157613221612ff4565b8a6040850152808a1660608501528160808501526132418285018a613138565b915083820360a08501526132558289613138565b60ff881660c086015290861660e0850152838103610100850152905061327b81856123f6565b9c9b50505050505050505050505056fe434349504361706162696c697479436f6e66696775726174696f6e20312e302e302d646576a164736f6c6343000818000a",
}

var CCIPCapabilityConfigurationABI = CCIPCapabilityConfigurationMetaData.ABI

var CCIPCapabilityConfigurationBin = CCIPCapabilityConfigurationMetaData.Bin

func DeployCCIPCapabilityConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend, capabilityRegistry common.Address) (common.Address, *types.Transaction, *CCIPCapabilityConfiguration, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPCapabilityConfigurationBin), backend, capabilityRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPCapabilityConfiguration{address: address, abi: *parsed, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

type CCIPCapabilityConfiguration struct {
	address common.Address
	abi     abi.ABI
	CCIPCapabilityConfigurationCaller
	CCIPCapabilityConfigurationTransactor
	CCIPCapabilityConfigurationFilterer
}

type CCIPCapabilityConfigurationCaller struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationTransactor struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationFilterer struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationSession struct {
	Contract     *CCIPCapabilityConfiguration
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationCallerSession struct {
	Contract *CCIPCapabilityConfigurationCaller
	CallOpts bind.CallOpts
}

type CCIPCapabilityConfigurationTransactorSession struct {
	Contract     *CCIPCapabilityConfigurationTransactor
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationRaw struct {
	Contract *CCIPCapabilityConfiguration
}

type CCIPCapabilityConfigurationCallerRaw struct {
	Contract *CCIPCapabilityConfigurationCaller
}

type CCIPCapabilityConfigurationTransactorRaw struct {
	Contract *CCIPCapabilityConfigurationTransactor
}

func NewCCIPCapabilityConfiguration(address common.Address, backend bind.ContractBackend) (*CCIPCapabilityConfiguration, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPCapabilityConfigurationABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPCapabilityConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfiguration{address: address, abi: abi, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

func NewCCIPCapabilityConfigurationCaller(address common.Address, caller bind.ContractCaller) (*CCIPCapabilityConfigurationCaller, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCaller{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPCapabilityConfigurationTransactor, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationTransactor{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPCapabilityConfigurationFilterer, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationFilterer{contract: contract}, nil
}

func bindCCIPCapabilityConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPCapabilityConfigurationChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPCapabilityConfigurationChainConfig)).(*[]CCIPCapabilityConfigurationChainConfig)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "applyChainConfigUpdates", removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

type CCIPCapabilityConfigurationCapabilityConfigurationSetIterator struct {
	Event *CCIPCapabilityConfigurationCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCapabilityConfigurationSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error) {
	event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigRemovedIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigRemovedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigRemoved)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error) {
	event := new(CCIPCapabilityConfigurationChainConfigRemoved)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigSetIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error) {
	event := new(CCIPCapabilityConfigurationChainConfigSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequestedIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferRequestedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferredIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferredIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferred)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferred)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPCapabilityConfiguration.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPCapabilityConfiguration.ParseCapabilityConfigurationSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigRemoved(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigSet"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferRequested(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferred"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPCapabilityConfigurationCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPCapabilityConfigurationChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPCapabilityConfigurationChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a50")
}

func (CCIPCapabilityConfigurationOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPCapabilityConfigurationOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) Address() common.Address {
	return _CCIPCapabilityConfiguration.address
}

type CCIPCapabilityConfigurationInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
