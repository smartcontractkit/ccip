// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_capability_configuration

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPCapabilityConfigurationChainConfig struct {
	Readers [][32]byte
	FChain  uint8
	Config  []byte
}

type CCIPCapabilityConfigurationChainConfigUpdate struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
}

var CCIPCapabilityConfigurationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigNotSetForChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FChainMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTransmitters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilityRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotLength\",\"type\":\"uint256\"}],\"name\":\"SignerP2PIdPairMustBeLengthTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainSelectorRemoves\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620034003803806200340083398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b60805161322d620001d3600039600081816108770152610afa015261322d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ddc042a81161005b578063ddc042a8146100fe578063f2fde38b14610113578063f442c89a14610126578063fba64a7c1461013957600080fd5b8063181f5a771461008d57806379ba5097146100ab578063884efe61146100b55780638da5cb5b146100d6575b600080fd5b61009561014c565b6040516100a29190612417565b60405180910390f35b6100b3610168565b005b6100956100c336600461242a565b5060408051602081019091526000815290565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b61010661026a565b6040516100a291906124b1565b6100b3610121366004612533565b61046c565b6100b36101343660046125b5565b610480565b6100b361014736600461265b565b61085f565b6040518060600160405280602581526020016131fc6025913981565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006102786003610920565b905060006102866003610934565b67ffffffffffffffff81111561029e5761029e612718565b6040519080825280602002602001820160405280156102eb57816020015b604080516060808201835280825260006020830152918101919091528152602001906001900390816102bc5790505b50905060005b8251811015610465576002600084838151811061031057610310612747565b602002602001015167ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561039457602002820191906000526020600020905b815481526020019060010190808311610380575b5050509183525050600182015460ff1660208201526002820180546040909201916103be90612776565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90612776565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b50505050508152505082828151811061045257610452612747565b60209081029190910101526001016102f1565b5092915050565b610474610944565b61047d816109c7565b50565b610488610944565b60005b838110156106805760006104dd8686848181106104aa576104aa612747565b90506020020160208101906104bf91906127c9565b67ffffffffffffffff16600090815260046020526040902054151590565b90508061054a578585838181106104f6576104f6612747565b905060200201602081019061050b91906127c9565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016101e5565b6002600087878581811061056057610560612747565b905060200201602081019061057591906127c9565b67ffffffffffffffff168152602081019190915260400160009081209061059c8282612185565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556105d46002830160006121a3565b50506106128686848181106105eb576105eb612747565b905060200201602081019061060091906127c9565b60039067ffffffffffffffff16610abc565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f086868481811061064657610646612747565b905060200201602081019061065b91906127c9565b60405167ffffffffffffffff909116815260200160405180910390a15060010161048b565b5060005b818110156108585760008383838181106106a0576106a0612747565b90506020028101906106b291906127e4565b6106c0906020810190612822565b6106c9906129fa565b805190915060008585858181106106e2576106e2612747565b90506020028101906106f491906127e4565b6107029060208101906127c9565b905060005b825181101561073a5761073283828151811061072557610725612747565b6020026020010151610ac8565b600101610707565b50826020015160ff1660000361077c576040517fa9b3766e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff811660009081526002602090815260409091208451805186936107ac9284929101906121dd565b5060208201516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055604082015160028201906107f99082612b21565b5061081391506003905067ffffffffffffffff8316610be2565b507f05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e08184604051610845929190612c3b565b60405180910390a1505050600101610684565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ce576040517f7b2485a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108dc84860186612d17565b90506000806108ea83610bee565b81519193509150156109025761090284600084610e21565b8051156109155761091584600183610e21565b505050505050505050565b6060600061092d836113b9565b9392505050565b600061093e825490565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016101e5565b565b3373ffffffffffffffffffffffffffffffffffffffff821603610a46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016101e5565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600061092d8383611415565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b9c9190810190612ebd565b506040810151909150610bde576040517f8907a4fa000000000000000000000000000000000000000000000000000000008152600481018390526024016101e5565b5050565b600061092d8383611508565b606080600460ff1683511115610c30576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b610c9e6040805160e081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b815260200190600190039081610c4657505060408051600280825260608201909252919350602082015b610d206040805160e081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b815260200190600190039081610cc857905050905060008060005b8551811015610e14576000868281518110610d5857610d58612747565b6020026020010151600001516001811115610d7557610d75612fbc565b03610dc557858181518110610d8c57610d8c612747565b6020026020010151858460ff1681518110610da957610da9612747565b602002602001018190525082610dbe9061301a565b9250610e0c565b858181518110610dd757610dd7612747565b6020026020010151848360ff1681518110610df457610df4612747565b602002602001018190525081610e099061301a565b91505b600101610d3b565b5090835281529092909150565b63ffffffff8316600090815260056020526040812081846001811115610e4957610e49612fbc565b6001811115610e5a57610e5a612fbc565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156110ec57600084815260209020604080516101408101909152600684029091018054829060608201908390829060ff166001811115610ecd57610ecd612fbc565b6001811115610ede57610ede612fbc565b8152815467ffffffffffffffff6101008204811660208085019190915260ff69010000000000000000008404166040808601919091526a01000000000000000000009093049091166060840152600184018054835181840281018401909452808452608090940193909160009084015b82821015610f9e5760008481526020902060408051808201918290529160028581029091019182845b815481526020019060010190808311610f7757505050505081526020019060010190610f4e565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561101b5760008481526020902060408051808201918290529160028581029091019182845b815481526020019060010190808311610ff457505050505081526020019060010190610fcb565b50505050815260200160038201805461103390612776565b80601f016020809104026020016040519081016040528092919081815260200182805461105f90612776565b80156110ac5780601f10611081576101008083540402835291602001916110ac565b820191906000526020600020905b81548152906001019060200180831161108f57829003601f168201915b505050919092525050508152600482015467ffffffffffffffff166020808301919091526005909201546040909101529082526001929092019101610e88565b50505050905060006110fe8251611557565b9050600061110c8451611557565b905061111882826115be565b600061112787858786866116b2565b90506111338482611a86565b63ffffffff871660009081526005602052604081209087600181111561115b5761115b612fbc565b600181111561116c5761116c612fbc565b815260200190815260200160002060006111869190612228565b60005b81518110156113af5763ffffffff88166000908152600560205260408120908860018111156111ba576111ba612fbc565b60018111156111cb576111cb612fbc565b81526020019081526020016000208282815181106111eb576111eb612747565b6020908102919091018101518254600181810185556000948552929093208151805160069095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690838181111561125557611255612fbc565b02179055506020828101518254604085015160608601517fffffffffffffffffffffffffffffffffffffffffffff000000000000000000ff90921661010067ffffffffffffffff948516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff1617690100000000000000000060ff90921691909102177fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a01000000000000000000009290911691909102178255608083015180516113289260018501920190612249565b5060a08201518051611344916002840191602090910190612249565b5060c082015160038201906113599082612b21565b50505060208201516004820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055604090910151600590910155600101611189565b5050505050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561140957602002820191906000526020600020905b8154815260200190600101908083116113f5575b50505050509050919050565b600081815260018301602052604081205480156114fe576000611439600183613039565b855490915060009061144d90600190613039565b90508181146114b257600086600001828154811061146d5761146d612747565b906000526020600020015490508087600001848154811061149057611490612747565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114c3576114c361304c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061093e565b600091505061093e565b600081815260018301602052604081205461154f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561093e565b50600061093e565b60008160000361156957506000919050565b8160010361157957506001919050565b8160020361158957506002919050565b6040517f3e478526000000000000000000000000000000000000000000000000000000008152600481018390526024016101e5565b6000808360028111156115d3576115d3612fbc565b1480156115f1575060018260028111156115ef576115ef612fbc565b145b90506000600184600281111561160957611609612fbc565b1480156116275750600283600281111561162557611625612fbc565b145b90506000600285600281111561163f5761163f612fbc565b14801561165d5750600184600281111561165b5761165b612fbc565b145b905082806116685750815b806116705750805b1561167c575050505050565b84846040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016101e592919061308f565b60606000845167ffffffffffffffff8111156116d0576116d0612718565b6040519080825280602002602001820160405280156116f9578160200160208202803683370190505b509050600084600281111561171057611710612fbc565b14801561172e5750600183600281111561172c5761172c612fbc565b145b1561176f5760018160008151811061174857611748612747565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250506118d7565b600184600281111561178357611783612fbc565b1480156117a15750600283600281111561179f5761179f612fbc565b145b1561183857856000815181106117b9576117b9612747565b602002602001015160200151816000815181106117d8576117d8612747565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250508560008151811061180d5761180d612747565b602002602001015160200151600161182591906130aa565b8160018151811061174857611748612747565b600284600281111561184c5761184c612fbc565b14801561186a5750600183600281111561186857611868612fbc565b145b156118a1578560018151811061188257611882612747565b6020026020010151602001518160008151811061174857611748612747565b83836040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016101e592919061308f565b6000855167ffffffffffffffff8111156118f3576118f3612718565b60405190808252806020026020018201604052801561199157816020015b6040805161014081018252600060608083018281526080840183905260a0840183905260c0840183905260e084018290526101008401829052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816119115790505b50905060005b8251811015611a7a576119c28782815181106119b5576119b5612747565b6020026020010151611e0a565b60405180606001604052808883815181106119df576119df612747565b602002602001015181526020018483815181106119fe576119fe612747565b602002602001015167ffffffffffffffff168152602001611a528b868581518110611a2b57611a2b612747565b60200260200101518b8681518110611a4557611a45612747565b6020026020010151612127565b815250828281518110611a6757611a67612747565b6020908102919091010152600101611997565b50979650505050505050565b8151815181158015611a985750806001145b15611b395782600081518110611ab057611ab0612747565b60200260200101516020015167ffffffffffffffff16600114611b345782600081518110611ae057611ae0612747565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152600160248201526044016101e5565b611e04565b816001148015611b495750806002145b15611cff5783600081518110611b6157611b61612747565b60200260200101516040015183600081518110611b8057611b80612747565b60200260200101516040015114611c0c5782600081518110611ba457611ba4612747565b60200260200101516040015184600081518110611bc357611bc3612747565b6020026020010151604001516040517fc7ccdd7f0000000000000000000000000000000000000000000000000000000081526004016101e5929190918252602082015260400190565b83600081518110611c1f57611c1f612747565b6020026020010151602001516001611c3791906130aa565b67ffffffffffffffff1683600181518110611c5457611c54612747565b60200260200101516020015167ffffffffffffffff1614611b345782600181518110611c8257611c82612747565b60200260200101516020015184600081518110611ca157611ca1612747565b6020026020010151602001516001611cb991906130aa565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9283166004820152911660248201526044016101e5565b816002148015611d0f5750806001145b15611dd25783600181518110611d2757611d27612747565b60200260200101516040015183600081518110611d4657611d46612747565b60200260200101516040015114611b345782600081518110611d6a57611d6a612747565b60200260200101516040015184600181518110611d8957611d89612747565b6020026020010151604001516040517f9e9756700000000000000000000000000000000000000000000000000000000081526004016101e5929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b806020015167ffffffffffffffff16600003611e52576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081516001811115611e6757611e67612fbc565b14158015611e885750600181516001811115611e8557611e85612fbc565b14155b15611ebf576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208181015167ffffffffffffffff16600090815260049091526040902054611f265760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016101e5565b608081015151601f1015611f66576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a081015151601f1015611fa6576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015167ffffffffffffffff16600090815260029091526040812060010154611fd69060ff1660036130cb565b611fe19060016130e7565b60ff169050808260a001515110156120365760a0820151516040517f548dd21f0000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044016101e5565b816040015160ff16600003612077576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201516120879060036130cb565b60ff16826080015151116120c7576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b826080015151811015612122576000836080015182815181106120ef576120ef612747565b602002602001015190506121198160006002811061210f5761210f612747565b6020020151610ac8565b506001016120ca565b505050565b600081602001518483600001518585608001518660a00151876040015188606001518960c0015160405160200161216699989796959493929190613162565b6040516020818303038152906040528051906020012090509392505050565b508054600082559060005260206000209081019061047d919061229f565b5080546121af90612776565b6000825580601f106121bf575050565b601f01602090049060005260206000209081019061047d919061229f565b828054828255906000526020600020908101928215612218579160200282015b828111156122185782518255916020019190600101906121fd565b5061222492915061229f565b5090565b508054600082556006029060005260206000209081019061047d91906122b4565b828054828255906000526020600020906002028101928215612293579160200282015b82811115612293578251612283908390600261234b565b509160200191906002019061226c565b50612224929150612378565b5b8082111561222457600081556001016122a0565b808211156122245780547fffffffffffffffffffffffffffff000000000000000000000000000000000000168155600081816122f36001830182612392565b612301600283016000612392565b61230f6003830160006121a3565b5050506004810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055600060058201556006016122b4565b826002810192821561221857916020028201828111156122185782518255916020019190600101906121fd565b808211156122245760008082556001820155600201612378565b508054600082556002029060005260206000209081019061047d9190612378565b6000815180845260005b818110156123d9576020818501810151868301820152016123bd565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061092d60208301846123b3565b60006020828403121561243c57600080fd5b5035919050565b805160608084528151908401819052600091602091908201906080860190845b8181101561247f57835183529284019291840191600101612463565b505060ff60208601511660208701526040850151925085810360408701526124a781846123b3565b9695505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612526577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612514858351612443565b945092850192908501906001016124da565b5092979650505050505050565b60006020828403121561254557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461092d57600080fd5b60008083601f84011261257b57600080fd5b50813567ffffffffffffffff81111561259357600080fd5b6020830191508360208260051b85010111156125ae57600080fd5b9250929050565b600080600080604085870312156125cb57600080fd5b843567ffffffffffffffff808211156125e357600080fd5b6125ef88838901612569565b9096509450602087013591508082111561260857600080fd5b5061261587828801612569565b95989497509550505050565b803567ffffffffffffffff8116811461263957600080fd5b919050565b63ffffffff8116811461047d57600080fd5b80356126398161263e565b6000806000806000806080878903121561267457600080fd5b863567ffffffffffffffff8082111561268c57600080fd5b6126988a838b01612569565b909850965060208901359150808211156126b157600080fd5b818901915089601f8301126126c557600080fd5b8135818111156126d457600080fd5b8a60208285010111156126e657600080fd5b6020830196508095505050506126fe60408801612621565b915061270c60608801612650565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061278a57607f821691505b6020821081036127c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156127db57600080fd5b61092d82612621565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261281857600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261281857600080fd5b6040516060810167ffffffffffffffff8111828210171561287957612879612718565b60405290565b6040805190810167ffffffffffffffff8111828210171561287957612879612718565b60405160e0810167ffffffffffffffff8111828210171561287957612879612718565b6040516080810167ffffffffffffffff8111828210171561287957612879612718565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561292f5761292f612718565b604052919050565b600067ffffffffffffffff82111561295157612951612718565b5060051b60200190565b803560ff8116811461263957600080fd5b600082601f83011261297d57600080fd5b813567ffffffffffffffff81111561299757612997612718565b6129c860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016128e8565b8181528460208386010111156129dd57600080fd5b816020850160208301376000918101602001919091529392505050565b600060608236031215612a0c57600080fd5b612a14612856565b823567ffffffffffffffff80821115612a2c57600080fd5b9084019036601f830112612a3f57600080fd5b81356020612a54612a4f83612937565b6128e8565b82815260059290921b84018101918181019036841115612a7357600080fd5b948201945b83861015612a9157853582529482019490820190612a78565b865250612a9f87820161295b565b90850152506040850135915080821115612ab857600080fd5b50612ac53682860161296c565b60408301525092915050565b601f821115612122576000816000526020600020601f850160051c81016020861015612afa5750805b601f850160051c820191505b81811015612b1957828155600101612b06565b505050505050565b815167ffffffffffffffff811115612b3b57612b3b612718565b612b4f81612b498454612776565b84612ad1565b602080601f831160018114612ba25760008415612b6c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612b19565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612bef57888601518255948401946001909101908401612bd0565b5085821015612c2b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83168152604060208201526000612c5e6040830184612443565b949350505050565b80356002811061263957600080fd5b6000601f83601f840112612c8857600080fd5b82356020612c98612a4f83612937565b82815260069290921b85018101918181019087841115612cb757600080fd5b8287015b84811015611a7a578886820112612cd25760008081fd5b612cda61287f565b80604083018b811115612ced5760008081fd5b835b81811015612d065780358452928701928701612cef565b505084525091830191604001612cbb565b60006020808385031215612d2a57600080fd5b823567ffffffffffffffff80821115612d4257600080fd5b818501915085601f830112612d5657600080fd5b8135612d64612a4f82612937565b81815260059190911b83018401908481019088831115612d8357600080fd5b8585015b83811015612ea557803585811115612d9e57600080fd5b860160e0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215612dd35760008081fd5b612ddb6128a2565b612de6898301612c66565b81526040612df5818401612621565b8a8301526060612e0681850161295b565b8284015260809150612e19828501612621565b9083015260a08381013589811115612e315760008081fd5b612e3f8f8d83880101612c75565b838501525060c091508184013589811115612e5a5760008081fd5b612e688f8d83880101612c75565b82850152505060e083013588811115612e815760008081fd5b612e8f8e8c8387010161296c565b9183019190915250845250918601918601612d87565b5098975050505050505050565b80516126398161263e565b60008060408385031215612ed057600080fd5b825167ffffffffffffffff80821115612ee857600080fd5b9084019060808287031215612efc57600080fd5b612f046128c5565b8251612f0f8161263e565b81526020838101518183015260408085015190830152606084015183811115612f3757600080fd5b80850194505087601f850112612f4c57600080fd5b83519250612f5c612a4f84612937565b83815260059390931b84018101928181019089851115612f7b57600080fd5b948201945b84861015612f9957855182529482019490820190612f80565b8060608501525050819550612faf818801612eb2565b9450505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff810361303057613030612feb565b60010192915050565b8181038181111561093e5761093e612feb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6003811061308b5761308b612fbc565b9052565b6040810161309d828561307b565b61092d602083018461307b565b67ffffffffffffffff81811683821601908082111561046557610465612feb565b60ff818116838216029081169081811461046557610465612feb565b60ff818116838216019081111561093e5761093e612feb565b6000815180845260208085019450602084016000805b8481101561315657825188835b600281101561314057825182529186019190860190600101613123565b5050506040979097019691830191600101613116565b50959695505050505050565b600061012067ffffffffffffffff808d16845263ffffffff8c16602085015260028b1061319157613191612fbc565b8a6040850152808a1660608501528160808501526131b18285018a613100565b915083820360a08501526131c58289613100565b60ff881660c086015290861660e085015283810361010085015290506131eb81856123b3565b9c9b50505050505050505050505056fe434349504361706162696c697479436f6e66696775726174696f6e20312e302e302d646576a164736f6c6343000818000a",
}

var CCIPCapabilityConfigurationABI = CCIPCapabilityConfigurationMetaData.ABI

var CCIPCapabilityConfigurationBin = CCIPCapabilityConfigurationMetaData.Bin

func DeployCCIPCapabilityConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend, capabilityRegistry common.Address) (common.Address, *types.Transaction, *CCIPCapabilityConfiguration, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPCapabilityConfigurationBin), backend, capabilityRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPCapabilityConfiguration{address: address, abi: *parsed, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

type CCIPCapabilityConfiguration struct {
	address common.Address
	abi     abi.ABI
	CCIPCapabilityConfigurationCaller
	CCIPCapabilityConfigurationTransactor
	CCIPCapabilityConfigurationFilterer
}

type CCIPCapabilityConfigurationCaller struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationTransactor struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationFilterer struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationSession struct {
	Contract     *CCIPCapabilityConfiguration
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationCallerSession struct {
	Contract *CCIPCapabilityConfigurationCaller
	CallOpts bind.CallOpts
}

type CCIPCapabilityConfigurationTransactorSession struct {
	Contract     *CCIPCapabilityConfigurationTransactor
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationRaw struct {
	Contract *CCIPCapabilityConfiguration
}

type CCIPCapabilityConfigurationCallerRaw struct {
	Contract *CCIPCapabilityConfigurationCaller
}

type CCIPCapabilityConfigurationTransactorRaw struct {
	Contract *CCIPCapabilityConfigurationTransactor
}

func NewCCIPCapabilityConfiguration(address common.Address, backend bind.ContractBackend) (*CCIPCapabilityConfiguration, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPCapabilityConfigurationABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPCapabilityConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfiguration{address: address, abi: abi, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

func NewCCIPCapabilityConfigurationCaller(address common.Address, caller bind.ContractCaller) (*CCIPCapabilityConfigurationCaller, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCaller{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPCapabilityConfigurationTransactor, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationTransactor{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPCapabilityConfigurationFilterer, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationFilterer{contract: contract}, nil
}

func bindCCIPCapabilityConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPCapabilityConfigurationChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPCapabilityConfigurationChainConfig)).(*[]CCIPCapabilityConfigurationChainConfig)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "applyChainConfigUpdates", chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

type CCIPCapabilityConfigurationCapabilityConfigurationSetIterator struct {
	Event *CCIPCapabilityConfigurationCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCapabilityConfigurationSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error) {
	event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigRemovedIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigRemovedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigRemoved)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error) {
	event := new(CCIPCapabilityConfigurationChainConfigRemoved)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigSetIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error) {
	event := new(CCIPCapabilityConfigurationChainConfigSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequestedIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferRequestedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferredIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferredIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferred)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferred)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPCapabilityConfiguration.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPCapabilityConfiguration.ParseCapabilityConfigurationSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigRemoved(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigSet"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferRequested(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferred"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPCapabilityConfigurationCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPCapabilityConfigurationChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPCapabilityConfigurationChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e0")
}

func (CCIPCapabilityConfigurationOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPCapabilityConfigurationOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) Address() common.Address {
	return _CCIPCapabilityConfiguration.address
}

type CCIPCapabilityConfigurationInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
