// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_capability_configuration

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPCapabilityConfigurationChainConfig struct {
	Readers [][32]byte
	Config  []byte
}

type CCIPCapabilityConfigurationChainConfigUpdate struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
}

type CCIPCapabilityConfigurationOCR3Config struct {
	PluginType            uint8
	ChainSelector         uint64
	Signers               [][][]byte
	Transmitters          [][][]byte
	F                     uint8
	OffchainConfigVersion uint64
	OffchainConfig        []byte
}

type CCIPCapabilityConfigurationOCR3ConfigWithMeta struct {
	Config       CCIPCapabilityConfigurationOCR3Config
	ConfigCount  uint64
	ConfigDigest [32]byte
}

var CCIPCapabilityConfigurationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"NoCapabilityConfigurationSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilityRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotLength\",\"type\":\"uint256\"}],\"name\":\"SignerP2PIdPairMustBeLengthTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOCRConfigs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.PluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes[][]\",\"name\":\"signers\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes[][]\",\"name\":\"transmitters\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIPCapabilityConfiguration.OCR3ConfigWithMeta[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b506040516200410f3803806200410f83398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b608051613f3c620001d36000396000818161121b01526113930152613f3c6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c97b8f551161005b578063c97b8f5514610109578063ddc042a81461011e578063f2fde38b14610133578063fba64a7c1461014657600080fd5b80635bc6cf881461008d57806379ba5097146100a2578063884efe61146100aa5780638da5cb5b146100e1575b600080fd5b6100a061009b366004612b0a565b610159565b005b6100a0610537565b6100cb6100b8366004612b76565b5060408051602081019091526000815290565b6040516100d89190612bf3565b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d8565b610111610634565b6040516100d89190612d03565b610126611034565b6040516100d89190612ed2565b6100a0610141366004612fb5565b6111ef565b6100a061015436600461300c565b611203565b6101616112b5565b60005b83811015610359576101b3858583818110610181576101816130c9565b905060200281019061019391906130f8565b6101a1906020810190613136565b60039067ffffffffffffffff16611338565b61022d578484828181106101c9576101c96130c9565b90506020028101906101db91906130f8565b6101e9906020810190613136565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024015b60405180910390fd5b60026000868684818110610243576102436130c9565b905060200281019061025591906130f8565b610263906020810190613136565b67ffffffffffffffff168152602081019190915260400160009081209061028a828261284a565b610298600183016000612868565b50506102e18585838181106102af576102af6130c9565b90506020028101906102c191906130f8565b6102cf906020810190613136565b60039067ffffffffffffffff16611355565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0858583818110610315576103156130c9565b905060200281019061032791906130f8565b610335906020810190613136565b60405167ffffffffffffffff909116815260200160405180910390a1600101610164565b5060005b81811015610530576000838383818110610379576103796130c9565b905060200281019061038b91906130f8565b6103999060208101906130f8565b6103a39080613151565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509394508792508691508590508181106103eb576103eb6130c9565b90506020028101906103fd91906130f8565b61040b906020810190613136565b905060005b825184101561044d5761043b83828151811061042e5761042e6130c9565b6020026020010151611361565b80610445816131e8565b915050610410565b50848484818110610460576104606130c9565b905060200281019061047291906130f8565b6104809060208101906130f8565b67ffffffffffffffff821660009081526002602052604090206104a3828261346c565b506104bb9050600367ffffffffffffffff831661147c565b507f0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a50818686868181106104f0576104f06130c9565b905060200281019061050291906130f8565b6105109060208101906130f8565b60405161051e929190613614565b60405180910390a1505060010161035d565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610224565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006106426006611488565b67ffffffffffffffff81111561065a5761065a613220565b60405190808252806020026020018201604052801561068d57816020015b60608152602001906001900390816106785790505b50905060005b61069d6006611488565b81101561102e5760006106b1600683611492565b63ffffffff8116600090815260056020908152604080832060018452909152808220548280529120549192506106e6916136fc565b67ffffffffffffffff8111156106fe576106fe613220565b60405190808252806020026020018201604052801561079c57816020015b6040805161014081018252600060608083018281526080840183905260a0840182905260c0840182905260e084018390526101008401839052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161071c5790505b508383815181106107af576107af6130c9565b602002602001018190525060005b63ffffffff82166000908152600560209081526040808320838052909152902054811015610bd75763ffffffff821660009081526005602090815260408083208380529091529020805482908110610817576108176130c9565b600091825260209091206040805161014081019091526007909202018054829060608201908390829060ff16600181111561085457610854612c06565b600181111561086557610865612c06565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b8282101561099457838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156109815783829060005260206000200180546108f4906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610920906132b4565b801561096d5780601f106109425761010080835404028352916020019161096d565b820191906000526020600020905b81548152906001019060200180831161095057829003601f168201915b5050505050815260200190600101906108d5565b50505050815260200190600101906108a1565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ab457838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610aa1578382906000526020600020018054610a14906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a40906132b4565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b5050505050815260200190600101906109f5565b50505050815260200190600101906109c1565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191610af2906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1e906132b4565b8015610b6b5780601f10610b4057610100808354040283529160200191610b6b565b820191906000526020600020905b815481529060010190602001808311610b4e57829003601f168201915b505050919092525050508152600582015467ffffffffffffffff1660208201526006909101546040909101528451859085908110610bab57610bab6130c9565b60200260200101518281518110610bc457610bc46130c9565b60209081029190910101526001016107bd565b5060005b63ffffffff82166000908152600560209081526040808320600184529091529020548110156110245763ffffffff82166000908152600560209081526040808320600184529091529020805482908110610c3757610c376130c9565b600091825260209091206040805161014081019091526007909202018054829060608201908390829060ff166001811115610c7457610c74612c06565b6001811115610c8557610c85612c06565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b82821015610db457838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610da1578382906000526020600020018054610d14906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d40906132b4565b8015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b505050505081526020019060010190610cf5565b5050505081526020019060010190610cc1565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ed457838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610ec1578382906000526020600020018054610e34906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e60906132b4565b8015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b505050505081526020019060010190610e15565b5050505081526020019060010190610de1565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191610f12906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3e906132b4565b8015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b505050919092525050508152600582015467ffffffffffffffff1660208201526006909101546040909101528451859085908110610fcb57610fcb6130c9565b60209081029190910181015163ffffffff85166000908152600583526040808220828052909352919091205461100190846136fc565b81518110611011576110116130c9565b6020908102919091010152600101610bdb565b5050600101610693565b50919050565b606060006110426003611488565b67ffffffffffffffff81111561105a5761105a613220565b60405190808252806020026020018201604052801561109f57816020015b60408051808201909152606080825260208201528152602001906001900390816110785790505b50905060005b6110af6003611488565b81101561102e57600260006110c5600384611492565b67ffffffffffffffff168152602080820192909252604090810160002081518154606094810282018501845292810183815290939192849284919084018282801561112f57602002820191906000526020600020905b81548152602001906001019080831161111b575b50505050508152602001600182018054611148906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611174906132b4565b80156111c15780601f10611196576101008083540402835291602001916111c1565b820191906000526020600020905b8154815290600101906020018083116111a457829003601f168201915b5050505050815250508282815181106111dc576111dc6130c9565b60209081029190910101526001016110a5565b6111f76112b5565b6112008161149e565b50565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611272576040517f7b2485a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112808486018661397f565b905060008061128e83611593565b9150915061129e8460008461178a565b6112aa8460018361178a565b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610224565b565b600081815260018301602052604081205415155b90505b92915050565b600061134c8383611e33565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa1580156113ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114359190810190613b25565b50905081816040015114611478576040517f8907a4fa00000000000000000000000000000000000000000000000000000000815260048101839052602401610224565b5050565b600061134c8383611f2d565b600061134f825490565b600061134c8383611f7c565b3373ffffffffffffffffffffffffffffffffffffffff82160361151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610224565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b606080600460ff16835111156115d5576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c08101919091528152602001906001900390816115eb57505060408051600280825260608201909252919350602082015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c081019190915281526020019060019003908161164d57905050905060008060005b855181101561177d5760008682815181106116bd576116bd6130c9565b60200260200101516000015160018111156116da576116da612c06565b0361172c578581815181106116f1576116f16130c9565b6020026020010151858460ff168151811061170e5761170e6130c9565b6020026020010181905250828061172490613c2d565b935050611775565b85818151811061173e5761173e6130c9565b6020026020010151848360ff168151811061175b5761175b6130c9565b6020026020010181905250818061177190613c2d565b9250505b6001016116a0565b5090835281529092909150565b63ffffffff83166000908152600560205260408120818460018111156117b2576117b2612c06565b60018111156117c3576117c3612c06565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611b8d57600084815260209020604080516101408101909152600784029091018054829060608201908390829060ff16600181111561183657611836612c06565b600181111561184757611847612c06565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b8282101561197657838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156119635783829060005260206000200180546118d6906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611902906132b4565b801561194f5780601f106119245761010080835404028352916020019161194f565b820191906000526020600020905b81548152906001019060200180831161193257829003601f168201915b5050505050815260200190600101906118b7565b5050505081526020019060010190611883565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611a9657838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015611a835783829060005260206000200180546119f6906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611a22906132b4565b8015611a6f5780601f10611a4457610100808354040283529160200191611a6f565b820191906000526020600020905b815481529060010190602001808311611a5257829003601f168201915b5050505050815260200190600101906119d7565b50505050815260200190600101906119a3565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191611ad4906132b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b00906132b4565b8015611b4d5780601f10611b2257610100808354040283529160200191611b4d565b820191906000526020600020905b815481529060010190602001808311611b3057829003601f168201915b505050919092525050508152600582015467ffffffffffffffff1660208083019190915260069092015460409091015290825260019290920191016117f1565b5050505090506000611b9f8251611fa6565b90506000611bad8451611fa6565b9050611bb9828261200a565b6000611bc887858786866120fe565b9050611bd484826124b0565b63ffffffff8716600090815260056020526040812090876001811115611bfc57611bfc612c06565b6001811115611c0d57611c0d612c06565b81526020019081526020016000206000611c2791906128a2565b60005b8151811015611e295763ffffffff8816600090815260056020526040812090886001811115611c5b57611c5b612c06565b6001811115611c6c57611c6c612c06565b8152602001908152602001600020828281518110611c8c57611c8c6130c9565b6020908102919091018101518254600181810185556000948552929093208151805160079095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115611cf657611cf6612c06565b0217905550602082810151825467ffffffffffffffff909116610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911617825560408301518051611d5192600185019201906128c3565b5060608201518051611d6d9160028401916020909101906128c3565b50608082015160038201805460a085015167ffffffffffffffff16610100027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911660ff9093169290921791909117905560c08201516004820190611dd39082613c4c565b50505060208201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055604090910151600690910155600101611c2a565b5050505050505050565b60008181526001830160205260408120548015611f1c576000611e57600183613d66565b8554909150600090611e6b90600190613d66565b9050818114611ed0576000866000018281548110611e8b57611e8b6130c9565b9060005260206000200154905080876000018481548110611eae57611eae6130c9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611ee157611ee1613d79565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061134f565b600091505061134f565b5092915050565b6000818152600183016020526040812054611f745750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561134f565b50600061134f565b6000826000018281548110611f9357611f936130c9565b9060005260206000200154905092915050565b600081600003611fb857506000919050565b81600103611fc857506001919050565b81600203611fd857506002919050565b6040517fc96399de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083600281111561201f5761201f612c06565b14801561203d5750600182600281111561203b5761203b612c06565b145b90506000600184600281111561205557612055612c06565b1480156120735750600283600281111561207157612071612c06565b145b90506000600285600281111561208b5761208b612c06565b1480156120a9575060018460028111156120a7576120a7612c06565b145b905082806120b45750815b806120bc5750805b156120c8575050505050565b84846040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610224929190613db8565b60606000845167ffffffffffffffff81111561211c5761211c613220565b604051908082528060200260200182016040528015612145578160200160208202803683370190505b509050600084600281111561215c5761215c612c06565b14801561217a5750600183600281111561217857612178612c06565b145b156121bb57600181600081518110612194576121946130c9565b602002602001019067ffffffffffffffff16908167ffffffffffffffff1681525050612323565b60018460028111156121cf576121cf612c06565b1480156121ed575060028360028111156121eb576121eb612c06565b145b156122845785600081518110612205576122056130c9565b60200260200101516020015181600081518110612224576122246130c9565b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505085600081518110612259576122596130c9565b60200260200101516020015160016122719190613dd3565b81600181518110612194576121946130c9565b600284600281111561229857612298612c06565b1480156122b6575060018360028111156122b4576122b4612c06565b145b156122ed57856001815181106122ce576122ce6130c9565b60200260200101516020015181600081518110612194576121946130c9565b83836040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610224929190613db8565b6000855167ffffffffffffffff81111561233f5761233f613220565b6040519080825280602002602001820160405280156123dd57816020015b6040805161014081018252600060608083018281526080840183905260a0840182905260c0840182905260e084018390526101008401839052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161235d5790505b50905060005b82518110156124a4576040518060600160405280888381518110612409576124096130c9565b60200260200101518152602001848381518110612428576124286130c9565b602002602001015167ffffffffffffffff16815260200161247c8b868581518110612455576124556130c9565b60200260200101518b868151811061246f5761246f6130c9565b60200260200101516127eb565b815250828281518110612491576124916130c9565b60209081029190910101526001016123e3565b50979650505050505050565b81518151811580156124c25750806001145b1561256357826000815181106124da576124da6130c9565b60200260200101516020015167ffffffffffffffff1660011461255e578260008151811061250a5761250a6130c9565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260016024820152604401610224565b6127e5565b8160011480156125735750806002145b15612729578360008151811061258b5761258b6130c9565b602002602001015160400151836000815181106125aa576125aa6130c9565b6020026020010151604001511461263657826000815181106125ce576125ce6130c9565b602002602001015160400151846000815181106125ed576125ed6130c9565b6020026020010151604001516040517f9e975670000000000000000000000000000000000000000000000000000000008152600401610224929190918252602082015260400190565b83600081518110612649576126496130c9565b60200260200101516020015160016126619190613dd3565b67ffffffffffffffff168360018151811061267e5761267e6130c9565b60200260200101516020015167ffffffffffffffff161461255e57826001815181106126ac576126ac6130c9565b602002602001015160200151846000815181106126cb576126cb6130c9565b60200260200101516020015160016126e39190613dd3565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610224565b8160021480156127395750806001145b156127b35783600181518110612751576127516130c9565b60200260200101516040015183600081518110612770576127706130c9565b6020026020010151604001511461255e5782600081518110612794576127946130c9565b602002602001015160400151846001815181106125ed576125ed6130c9565b6040517fe9e7a0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008160200151848360000151858560400151866060015187608001518860a001518960c0015160405160200161282a99989796959493929190613e9f565b6040516020818303038152906040528051906020012090505b9392505050565b50805460008255906000526020600020908101906112009190612920565b508054612874906132b4565b6000825580601f10612884575050565b601f0160209004906000526020600020908101906112009190612920565b50805460008255600702906000526020600020908101906112009190612935565b828054828255906000526020600020908101928215612910579160200282015b8281111561291057825180516129009184916020909101906129f6565b50916020019190600101906128e3565b5061291c929150612a48565b5090565b5b8082111561291c5760008155600101612921565b8082111561291c5780547fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000168155600081816129746001830182612a65565b612982600283016000612a65565b6003820180547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000001690556129ba600483016000612868565b5050506005810180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016905560006006820155600701612935565b828054828255906000526020600020908101928215612a3c579160200282015b82811115612a3c5782518290612a2c9082613c4c565b5091602001919060010190612a16565b5061291c929150612a83565b8082111561291c576000612a5c8282612aa0565b50600101612a48565b50805460008255906000526020600020908101906112009190612a48565b8082111561291c576000612a978282612868565b50600101612a83565b50805460008255906000526020600020908101906112009190612a83565b60008083601f840112612ad057600080fd5b50813567ffffffffffffffff811115612ae857600080fd5b6020830191508360208260051b8501011115612b0357600080fd5b9250929050565b60008060008060408587031215612b2057600080fd5b843567ffffffffffffffff80821115612b3857600080fd5b612b4488838901612abe565b90965094506020870135915080821115612b5d57600080fd5b50612b6a87828801612abe565b95989497509550505050565b600060208284031215612b8857600080fd5b5035919050565b6000815180845260005b81811015612bb557602081850181015186830182015201612b99565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061134c6020830184612b8f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612c4557612c45612c06565b9052565b6000828251808552602080860195506005818360051b8501018287016000805b86811015612cf4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088850381018c5283518051808752908801908887019080891b88018a01865b82811015612cdd57858a8303018452612ccb828651612b8f565b948c0194938c01939150600101612cb1565b509e8a019e97505050938701935050600101612c69565b50919998505050505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612ec4578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180518085529088019088850190600581901b86018a0160005b82811015612eae577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0888303018452845160608151818552612dbb8286018251612c35565b8e810151608067ffffffffffffffff8216818801528f830151915060e060a081818a0152612ded6101408a0185612c49565b93508585015195507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa060c0818b870301818c0152612e2b8689612c49565b975060ff8588015116848c0152828701519550612e556101008c018767ffffffffffffffff169052565b80870151965050808a8803016101208b01525050505050612e768282612b8f565b9150508d820151612e928f86018267ffffffffffffffff169052565b50908c0151928c0192909252938b0193928b0192600101612d76565b50978a0197955050509187019150600101612d2c565b509098975050505050505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b84811015612cf4578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518886528051898701819052908a0190849060608801905b80831015612f665783518252928c019260019290920191908c0190612f46565b50928b0151878403888d015292612f7d8185612b8f565b998c019997505050938901935050600101612efc565b73ffffffffffffffffffffffffffffffffffffffff8116811461120057600080fd5b600060208284031215612fc757600080fd5b813561284381612f93565b803567ffffffffffffffff81168114612fea57600080fd5b919050565b63ffffffff8116811461120057600080fd5b8035612fea81612fef565b6000806000806000806080878903121561302557600080fd5b863567ffffffffffffffff8082111561303d57600080fd5b6130498a838b01612abe565b9098509650602089013591508082111561306257600080fd5b818901915089601f83011261307657600080fd5b81358181111561308557600080fd5b8a602082850101111561309757600080fd5b6020830196508095505050506130af60408801612fd2565b91506130bd60608801613001565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261312c57600080fd5b9190910192915050565b60006020828403121561314857600080fd5b61134c82612fd2565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261318657600080fd5b83018035915067ffffffffffffffff8211156131a157600080fd5b6020019150600581901b3603821315612b0357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613219576132196131b9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261328457600080fd5b83018035915067ffffffffffffffff82111561329f57600080fd5b602001915036819003821315612b0357600080fd5b600181811c908216806132c857607f821691505b60208210810361102e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f82111561334d576000816000526020600020601f850160051c8101602086101561332a5750805b601f850160051c820191505b8181101561334957828155600101613336565b5050505b505050565b67ffffffffffffffff83111561336a5761336a613220565b61337e8361337883546132b4565b83613301565b6000601f8411600181146133d0576000851561339a5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610530565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561341f57868501358255602094850194600190920191016133ff565b508682101561345a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261349e57600080fd5b8201803567ffffffffffffffff8111156134b757600080fd5b602080830192508160051b36038313156134d057600080fd5b680100000000000000008211156134e9576134e9613220565b835482855580831015613520576000858152602081208481019083015b8082101561351c57828255600182019150613506565b5050505b5060008481526020902060005b83811015613547578435828201559382019360010161352d565b5050505050613559602083018361324f565b6127e5818360018601613352565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261359c57600080fd5b830160208101925035905067ffffffffffffffff8111156135bc57600080fd5b803603821315612b0357600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600067ffffffffffffffff80851683526040602084015283357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe185360301811261365d57600080fd5b84016020810190358281111561367257600080fd5b8060051b925082360382131561368757600080fd5b6040808601528060808601527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111156136c057600080fd5b50818160a08601375082016136d86020850185613567565b60608584030160608601526136f160a0840182846135cb565b979650505050505050565b8082018082111561134f5761134f6131b9565b60405160e0810167ffffffffffffffff8111828210171561373257613732613220565b60405290565b6040516080810167ffffffffffffffff8111828210171561373257613732613220565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156137a2576137a2613220565b604052919050565b600067ffffffffffffffff8211156137c4576137c4613220565b5060051b60200190565b803560028110612fea57600080fd5b600082601f8301126137ee57600080fd5b813567ffffffffffffffff81111561380857613808613220565b61383960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161375b565b81815284602083860101111561384e57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261387c57600080fd5b8135602061389161388c836137aa565b61375b565b82815260059290921b840181019181810190868411156138b057600080fd5b8286015b8481101561396357803567ffffffffffffffff808211156138d457600080fd5b818901915089603f8301126138e857600080fd5b858201356138f861388c826137aa565b81815260059190911b830160400190878101908c83111561391857600080fd5b604085015b838110156139515780358581111561393457600080fd5b6139438f6040838a01016137dd565b84525091890191890161391d565b508752505050928401925083016138b4565b509695505050505050565b803560ff81168114612fea57600080fd5b6000602080838503121561399257600080fd5b823567ffffffffffffffff808211156139aa57600080fd5b818501915085601f8301126139be57600080fd5b81356139cc61388c826137aa565b81815260059190911b830184019084810190888311156139eb57600080fd5b8585015b83811015613b0d57803585811115613a0657600080fd5b860160e0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613a3b5760008081fd5b613a4361370f565b613a4e8983016137ce565b81526040613a5d818401612fd2565b8a83015260608084013589811115613a755760008081fd5b613a838f8d8388010161386b565b8385015250608091508184013589811115613a9e5760008081fd5b613aac8f8d8388010161386b565b82850152505060a0613abf81850161396e565b8284015260c09150613ad2828501612fd2565b9083015260e083013588811115613ae95760008081fd5b613af78e8c838701016137dd565b91830191909152508452509186019186016139ef565b5098975050505050505050565b8051612fea81612fef565b60008060408385031215613b3857600080fd5b825167ffffffffffffffff80821115613b5057600080fd5b9084019060808287031215613b6457600080fd5b613b6c613738565b8251613b7781612fef565b8152602083810151613b8881612f93565b8282015260408481015190830152606084015183811115613ba857600080fd5b80850194505087601f850112613bbd57600080fd5b83519250613bcd61388c846137aa565b83815260059390931b84018101928181019089851115613bec57600080fd5b948201945b84861015613c0a57855182529482019490820190613bf1565b8060608501525050819550613c20818801613b1a565b9450505050509250929050565b600060ff821660ff8103613c4357613c436131b9565b60010192915050565b815167ffffffffffffffff811115613c6657613c66613220565b613c7a81613c7484546132b4565b84613301565b602080601f831160018114613ccd5760008415613c975750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613349565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613d1a57888601518255948401946001909101908401613cfb565b5085821015613d5657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561134f5761134f6131b9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60038110612c4557612c45612c06565b60408101613dc68285613da8565b6128436020830184613da8565b67ffffffffffffffff818116838216019080821115611f2657611f266131b9565b6000828251808552602080860195506005818360051b8501018287016000805b86811015612cf4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088850381018c5283518051808752908801908887019080891b88018a01865b82811015613e8857858a8303018452613e76828651612b8f565b948c0194938c01939150600101613e5c565b509e8a019e97505050938701935050600101613e14565b600061012067ffffffffffffffff808d16845263ffffffff8c166020850152613ecb604085018c612c35565b808a166060850152816080850152613ee58285018a613df4565b915083820360a0850152613ef98289613df4565b60ff881660c086015290861660e08501528381036101008501529050613f1f8185612b8f565b9c9b50505050505050505050505056fea164736f6c6343000818000a",
}

var CCIPCapabilityConfigurationABI = CCIPCapabilityConfigurationMetaData.ABI

var CCIPCapabilityConfigurationBin = CCIPCapabilityConfigurationMetaData.Bin

func DeployCCIPCapabilityConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend, capabilityRegistry common.Address) (common.Address, *types.Transaction, *CCIPCapabilityConfiguration, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPCapabilityConfigurationBin), backend, capabilityRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPCapabilityConfiguration{address: address, abi: *parsed, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

type CCIPCapabilityConfiguration struct {
	address common.Address
	abi     abi.ABI
	CCIPCapabilityConfigurationCaller
	CCIPCapabilityConfigurationTransactor
	CCIPCapabilityConfigurationFilterer
}

type CCIPCapabilityConfigurationCaller struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationTransactor struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationFilterer struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationSession struct {
	Contract     *CCIPCapabilityConfiguration
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationCallerSession struct {
	Contract *CCIPCapabilityConfigurationCaller
	CallOpts bind.CallOpts
}

type CCIPCapabilityConfigurationTransactorSession struct {
	Contract     *CCIPCapabilityConfigurationTransactor
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationRaw struct {
	Contract *CCIPCapabilityConfiguration
}

type CCIPCapabilityConfigurationCallerRaw struct {
	Contract *CCIPCapabilityConfigurationCaller
}

type CCIPCapabilityConfigurationTransactorRaw struct {
	Contract *CCIPCapabilityConfigurationTransactor
}

func NewCCIPCapabilityConfiguration(address common.Address, backend bind.ContractBackend) (*CCIPCapabilityConfiguration, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPCapabilityConfigurationABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPCapabilityConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfiguration{address: address, abi: abi, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

func NewCCIPCapabilityConfigurationCaller(address common.Address, caller bind.ContractCaller) (*CCIPCapabilityConfigurationCaller, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCaller{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPCapabilityConfigurationTransactor, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationTransactor{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPCapabilityConfigurationFilterer, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationFilterer{contract: contract}, nil
}

func bindCCIPCapabilityConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPCapabilityConfigurationChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPCapabilityConfigurationChainConfig)).(*[]CCIPCapabilityConfigurationChainConfig)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllOCRConfigs(opts *bind.CallOpts) ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllOCRConfigs")

	if err != nil {
		return *new([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta), err
	}

	out0 := *abi.ConvertType(out[0], new([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta)).(*[][]CCIPCapabilityConfigurationOCR3ConfigWithMeta)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllOCRConfigs() ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllOCRConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllOCRConfigs() ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllOCRConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "applyChainConfigUpdates", removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

type CCIPCapabilityConfigurationCapabilityConfigurationSetIterator struct {
	Event *CCIPCapabilityConfigurationCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCapabilityConfigurationSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error) {
	event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigRemovedIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigRemovedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigRemoved)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error) {
	event := new(CCIPCapabilityConfigurationChainConfigRemoved)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigSetIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error) {
	event := new(CCIPCapabilityConfigurationChainConfigSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequestedIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferRequestedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferredIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferredIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferred)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferred)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPCapabilityConfiguration.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPCapabilityConfiguration.ParseCapabilityConfigurationSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigRemoved(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigSet"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferRequested(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferred"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPCapabilityConfigurationCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPCapabilityConfigurationChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPCapabilityConfigurationChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a50")
}

func (CCIPCapabilityConfigurationOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPCapabilityConfigurationOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) Address() common.Address {
	return _CCIPCapabilityConfiguration.address
}

type CCIPCapabilityConfigurationInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error)

	GetAllOCRConfigs(opts *bind.CallOpts) ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
