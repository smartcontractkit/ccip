// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_capability_configuration

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPCapabilityConfigurationChainConfig struct {
	Readers [][32]byte
	FChain  uint8
	Config  []byte
}

type CCIPCapabilityConfigurationChainConfigUpdate struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
}

var CCIPCapabilityConfigurationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigNotSetForChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FChainMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTransmitters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfframpAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilityRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotLength\",\"type\":\"uint256\"}],\"name\":\"SignerP2PIdPairMustBeLengthTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainSelectorRemoves\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620035473803806200354783398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b608051613374620001d3600039600081816108770152610afa01526133746000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ddc042a81161005b578063ddc042a8146100fe578063f2fde38b14610113578063f442c89a14610126578063fba64a7c1461013957600080fd5b8063181f5a771461008d57806379ba5097146100ab578063884efe61146100b55780638da5cb5b146100d6575b600080fd5b61009561014c565b6040516100a29190612517565b60405180910390f35b6100b3610168565b005b6100956100c336600461252a565b5060408051602081019091526000815290565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b61010661026a565b6040516100a291906125b1565b6100b361012136600461265c565b61046c565b6100b36101343660046126c3565b610480565b6100b3610147366004612764565b61085f565b6040518060600160405280602581526020016133436025913981565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006102786003610920565b905060006102866003610934565b67ffffffffffffffff81111561029e5761029e612821565b6040519080825280602002602001820160405280156102eb57816020015b604080516060808201835280825260006020830152918101919091528152602001906001900390816102bc5790505b50905060005b8251811015610465576002600084838151811061031057610310612850565b602002602001015167ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561039457602002820191906000526020600020905b815481526020019060010190808311610380575b5050509183525050600182015460ff1660208201526002820180546040909201916103be9061287f565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea9061287f565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b50505050508152505082828151811061045257610452612850565b60209081029190910101526001016102f1565b5092915050565b610474610944565b61047d816109c7565b50565b610488610944565b60005b838110156106805760006104dd8686848181106104aa576104aa612850565b90506020020160208101906104bf91906128d2565b67ffffffffffffffff16600090815260046020526040902054151590565b90508061054a578585838181106104f6576104f6612850565b905060200201602081019061050b91906128d2565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016101e5565b6002600087878581811061056057610560612850565b905060200201602081019061057591906128d2565b67ffffffffffffffff168152602081019190915260400160009081209061059c828261225b565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556105d4600283016000612279565b50506106128686848181106105eb576105eb612850565b905060200201602081019061060091906128d2565b60039067ffffffffffffffff16610abc565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f086868481811061064657610646612850565b905060200201602081019061065b91906128d2565b60405167ffffffffffffffff909116815260200160405180910390a15060010161048b565b5060005b818110156108585760008383838181106106a0576106a0612850565b90506020028101906106b291906128ed565b6106c090602081019061292b565b6106c990612b04565b805190915060008585858181106106e2576106e2612850565b90506020028101906106f491906128ed565b6107029060208101906128d2565b905060005b825181101561073a5761073283828151811061072557610725612850565b6020026020010151610ac8565b600101610707565b50826020015160ff1660000361077c576040517fa9b3766e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff811660009081526002602090815260409091208451805186936107ac9284929101906122b3565b5060208201516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055604082015160028201906107f99082612c2b565b5061081391506003905067ffffffffffffffff8316610be2565b507f05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e08184604051610845929190612d45565b60405180910390a1505050600101610684565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ce576040517f7b2485a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108dc84860186612e21565b90506000806108ea83610bee565b81519193509150156109025761090284600084610e2d565b8051156109155761091584600183610e2d565b505050505050505050565b6060600061092d83611430565b9392505050565b600061093e825490565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016101e5565b565b3373ffffffffffffffffffffffffffffffffffffffff821603610a46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016101e5565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600061092d838361148c565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b9c9190810190612fd1565b506040810151909150610bde576040517f8907a4fa000000000000000000000000000000000000000000000000000000008152600481018390526024016101e5565b5050565b600061092d838361157f565b606080600460ff1683511115610c30576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b6040805161010081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610c4657505060408051600280825260608201909252919350602082015b6040805161010081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610cce57905050905060008060005b8551811015610e20576000868281518110610d6457610d64612850565b6020026020010151600001516001811115610d8157610d816130d0565b03610dd157858181518110610d9857610d98612850565b6020026020010151858460ff1681518110610db557610db5612850565b602002602001018190525082610dca9061312e565b9250610e18565b858181518110610de357610de3612850565b6020026020010151848360ff1681518110610e0057610e00612850565b602002602001018190525081610e159061312e565b91505b600101610d47565b5090835281529092909150565b63ffffffff8316600090815260056020526040812081846001811115610e5557610e556130d0565b6001811115610e6657610e666130d0565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561111857600084815260209020604080516101608101909152600784029091018054829060608201908390829060ff166001811115610ed957610ed96130d0565b6001811115610eea57610eea6130d0565b8152815467ffffffffffffffff6101008204811660208085019190915260ff69010000000000000000008404166040808601919091526a01000000000000000000009093049091166060840152600184015473ffffffffffffffffffffffffffffffffffffffff16608084015260028401805483518184028101840190945280845260a090940193909160009084015b82821015610fca5760008481526020902060408051808201918290529160028581029091019182845b815481526020019060010190808311610fa357505050505081526020019060010190610f7a565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156110475760008481526020902060408051808201918290529160028581029091019182845b81548152602001906001019080831161102057505050505081526020019060010190610ff7565b50505050815260200160048201805461105f9061287f565b80601f016020809104026020016040519081016040528092919081815260200182805461108b9061287f565b80156110d85780601f106110ad576101008083540402835291602001916110d8565b820191906000526020600020905b8154815290600101906020018083116110bb57829003601f168201915b505050919092525050508152600582015467ffffffffffffffff166020808301919091526006909201546040909101529082526001929092019101610e94565b505050509050600061112a82516115ce565b9050600061113884516115ce565b90506111448282611635565b60006111538785878686611729565b905061115f8482611b05565b63ffffffff8716600090815260056020526040812090876001811115611187576111876130d0565b6001811115611198576111986130d0565b815260200190815260200160002060006111b291906122fe565b60005b81518110156114265763ffffffff88166000908152600560205260408120908860018111156111e6576111e66130d0565b60018111156111f7576111f76130d0565b815260200190815260200160002082828151811061121757611217612850565b6020908102919091018101518254600181810185556000948552929093208151805160079095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115611281576112816130d0565b02179055506020828101518254604085015160608601517fffffffffffffffffffffffffffffffffffffffffffff000000000000000000ff90921661010067ffffffffffffffff948516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff1617690100000000000000000060ff90921691909102177fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a0100000000000000000000929091169190910217825560808301516001830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560a0830151805161139f926002850192019061231f565b5060c082015180516113bb91600384019160209091019061231f565b5060e082015160048201906113d09082612c2b565b50505060208201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9092169190911790556040909101516006909101556001016111b5565b5050505050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561148057602002820191906000526020600020905b81548152602001906001019080831161146c575b50505050509050919050565b600081815260018301602052604081205480156115755760006114b060018361314d565b85549091506000906114c49060019061314d565b90508181146115295760008660000182815481106114e4576114e4612850565b906000526020600020015490508087600001848154811061150757611507612850565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061153a5761153a613160565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061093e565b600091505061093e565b60008181526001830160205260408120546115c65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561093e565b50600061093e565b6000816000036115e057506000919050565b816001036115f057506001919050565b8160020361160057506002919050565b6040517f3e478526000000000000000000000000000000000000000000000000000000008152600481018390526024016101e5565b60008083600281111561164a5761164a6130d0565b14801561166857506001826002811115611666576116666130d0565b145b905060006001846002811115611680576116806130d0565b14801561169e5750600283600281111561169c5761169c6130d0565b145b9050600060028560028111156116b6576116b66130d0565b1480156116d4575060018460028111156116d2576116d26130d0565b145b905082806116df5750815b806116e75750805b156116f3575050505050565b84846040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016101e59291906131a3565b60606000845167ffffffffffffffff81111561174757611747612821565b604051908082528060200260200182016040528015611770578160200160208202803683370190505b5090506000846002811115611787576117876130d0565b1480156117a5575060018360028111156117a3576117a36130d0565b145b156117e6576001816000815181106117bf576117bf612850565b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505061194e565b60018460028111156117fa576117fa6130d0565b14801561181857506002836002811115611816576118166130d0565b145b156118af578560008151811061183057611830612850565b6020026020010151602001518160008151811061184f5761184f612850565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250508560008151811061188457611884612850565b602002602001015160200151600161189c91906131be565b816001815181106117bf576117bf612850565b60028460028111156118c3576118c36130d0565b1480156118e1575060018360028111156118df576118df6130d0565b145b1561191857856001815181106118f9576118f9612850565b602002602001015160200151816000815181106117bf576117bf612850565b83836040517f0a6b675b0000000000000000000000000000000000000000000000000000000081526004016101e59291906131a3565b6000855167ffffffffffffffff81111561196a5761196a612821565b604051908082528060200260200182016040528015611a1057816020015b6040805161016081018252600060608083018281526080840183905260a0840183905260c0840183905260e0840183905261010084018290526101208401829052610140840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816119885790505b50905060005b8251811015611af957611a41878281518110611a3457611a34612850565b6020026020010151611e89565b6040518060600160405280888381518110611a5e57611a5e612850565b60200260200101518152602001848381518110611a7d57611a7d612850565b602002602001015167ffffffffffffffff168152602001611ad18b868581518110611aaa57611aaa612850565b60200260200101518b8681518110611ac457611ac4612850565b60200260200101516121f7565b815250828281518110611ae657611ae6612850565b6020908102919091010152600101611a16565b50979650505050505050565b8151815181158015611b175750806001145b15611bb85782600081518110611b2f57611b2f612850565b60200260200101516020015167ffffffffffffffff16600114611bb35782600081518110611b5f57611b5f612850565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152600160248201526044016101e5565b611e83565b816001148015611bc85750806002145b15611d7e5783600081518110611be057611be0612850565b60200260200101516040015183600081518110611bff57611bff612850565b60200260200101516040015114611c8b5782600081518110611c2357611c23612850565b60200260200101516040015184600081518110611c4257611c42612850565b6020026020010151604001516040517fc7ccdd7f0000000000000000000000000000000000000000000000000000000081526004016101e5929190918252602082015260400190565b83600081518110611c9e57611c9e612850565b6020026020010151602001516001611cb691906131be565b67ffffffffffffffff1683600181518110611cd357611cd3612850565b60200260200101516020015167ffffffffffffffff1614611bb35782600181518110611d0157611d01612850565b60200260200101516020015184600081518110611d2057611d20612850565b6020026020010151602001516001611d3891906131be565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9283166004820152911660248201526044016101e5565b816002148015611d8e5750806001145b15611e515783600181518110611da657611da6612850565b60200260200101516040015183600081518110611dc557611dc5612850565b60200260200101516040015114611bb35782600081518110611de957611de9612850565b60200260200101516040015184600181518110611e0857611e08612850565b6020026020010151604001516040517f9e9756700000000000000000000000000000000000000000000000000000000081526004016101e5929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b806020015167ffffffffffffffff16600003611ed1576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081516001811115611ee657611ee66130d0565b14158015611f075750600181516001811115611f0457611f046130d0565b14155b15611f3e576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b608081015173ffffffffffffffffffffffffffffffffffffffff16611f8f576040517f358c192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208181015167ffffffffffffffff16600090815260049091526040902054611ff65760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016101e5565b60a081015151601f1015612036576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c081015151601f1015612076576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015167ffffffffffffffff166000908152600290915260408120600101546120a69060ff1660036131df565b6120b19060016131fb565b60ff169050808260c001515110156121065760c0820151516040517f548dd21f0000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044016101e5565b816040015160ff16600003612147576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201516121579060036131df565b60ff168260a001515111612197576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8260a00151518110156121f25760008360a0015182815181106121bf576121bf612850565b602002602001015190506121e9816000600281106121df576121df612850565b6020020151610ac8565b5060010161219a565b505050565b600081602001518483600001518460800151868660a001518760c00151886040015189606001518a60e0015160405160200161223c9a99989796959493929190613276565b6040516020818303038152906040528051906020012090509392505050565b508054600082559060005260206000209081019061047d9190612375565b5080546122859061287f565b6000825580601f10612295575050565b601f01602090049060005260206000209081019061047d9190612375565b8280548282559060005260206000209081019282156122ee579160200282015b828111156122ee5782518255916020019190600101906122d3565b506122fa929150612375565b5090565b508054600082556007029060005260206000209081019061047d919061238a565b828054828255906000526020600020906002028101928215612369579160200282015b82811115612369578251612359908390600261244b565b5091602001919060020190612342565b506122fa929150612478565b5b808211156122fa5760008155600101612376565b808211156122fa5780547fffffffffffffffffffffffffffff0000000000000000000000000000000000001681556001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600081816123f36002830182612492565b612401600383016000612492565b61240f600483016000612279565b5050506005810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690556000600682015560070161238a565b82600281019282156122ee57916020028201828111156122ee5782518255916020019190600101906122d3565b808211156122fa5760008082556001820155600201612478565b508054600082556002029060005260206000209081019061047d9190612478565b6000815180845260005b818110156124d9576020818501810151868301820152016124bd565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061092d60208301846124b3565b60006020828403121561253c57600080fd5b5035919050565b805160608084528151908401819052600091602091908201906080860190845b8181101561257f57835183529284019291840191600101612563565b505060ff60208601511660208701526040850151925085810360408701526125a781846124b3565b9695505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612626577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612614858351612543565b945092850192908501906001016125da565b5092979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461265757600080fd5b919050565b60006020828403121561266e57600080fd5b61092d82612633565b60008083601f84011261268957600080fd5b50813567ffffffffffffffff8111156126a157600080fd5b6020830191508360208260051b85010111156126bc57600080fd5b9250929050565b600080600080604085870312156126d957600080fd5b843567ffffffffffffffff808211156126f157600080fd5b6126fd88838901612677565b9096509450602087013591508082111561271657600080fd5b5061272387828801612677565b95989497509550505050565b803567ffffffffffffffff8116811461265757600080fd5b63ffffffff8116811461047d57600080fd5b803561265781612747565b6000806000806000806080878903121561277d57600080fd5b863567ffffffffffffffff8082111561279557600080fd5b6127a18a838b01612677565b909850965060208901359150808211156127ba57600080fd5b818901915089601f8301126127ce57600080fd5b8135818111156127dd57600080fd5b8a60208285010111156127ef57600080fd5b6020830196508095505050506128076040880161272f565b915061281560608801612759565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061289357607f821691505b6020821081036128cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156128e457600080fd5b61092d8261272f565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261292157600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261292157600080fd5b6040516060810167ffffffffffffffff8111828210171561298257612982612821565b60405290565b6040805190810167ffffffffffffffff8111828210171561298257612982612821565b604051610100810167ffffffffffffffff8111828210171561298257612982612821565b6040516080810167ffffffffffffffff8111828210171561298257612982612821565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612a3957612a39612821565b604052919050565b600067ffffffffffffffff821115612a5b57612a5b612821565b5060051b60200190565b803560ff8116811461265757600080fd5b600082601f830112612a8757600080fd5b813567ffffffffffffffff811115612aa157612aa1612821565b612ad260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016129f2565b818152846020838601011115612ae757600080fd5b816020850160208301376000918101602001919091529392505050565b600060608236031215612b1657600080fd5b612b1e61295f565b823567ffffffffffffffff80821115612b3657600080fd5b9084019036601f830112612b4957600080fd5b81356020612b5e612b5983612a41565b6129f2565b82815260059290921b84018101918181019036841115612b7d57600080fd5b948201945b83861015612b9b57853582529482019490820190612b82565b865250612ba9878201612a65565b90850152506040850135915080821115612bc257600080fd5b50612bcf36828601612a76565b60408301525092915050565b601f8211156121f2576000816000526020600020601f850160051c81016020861015612c045750805b601f850160051c820191505b81811015612c2357828155600101612c10565b505050505050565b815167ffffffffffffffff811115612c4557612c45612821565b612c5981612c53845461287f565b84612bdb565b602080601f831160018114612cac5760008415612c765750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612c23565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612cf957888601518255948401946001909101908401612cda565b5085821015612d3557878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83168152604060208201526000612d686040830184612543565b949350505050565b80356002811061265757600080fd5b6000601f83601f840112612d9257600080fd5b82356020612da2612b5983612a41565b82815260069290921b85018101918181019087841115612dc157600080fd5b8287015b84811015611af9578886820112612ddc5760008081fd5b612de4612988565b80604083018b811115612df75760008081fd5b835b81811015612e105780358452928701928701612df9565b505084525091830191604001612dc5565b60006020808385031215612e3457600080fd5b823567ffffffffffffffff80821115612e4c57600080fd5b818501915085601f830112612e6057600080fd5b8135612e6e612b5982612a41565b81815260059190911b83018401908481019088831115612e8d57600080fd5b8585015b83811015612fb957803585811115612ea857600080fd5b8601610100818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001811315612ede57600080fd5b612ee66129ab565b612ef18a8401612d70565b8152612eff6040840161272f565b8a820152612f0f60608401612a65565b6040820152612f206080840161272f565b6060820152612f3160a08401612633565b608082015260c083013588811115612f495760008081fd5b612f578e8c83870101612d7f565b60a08301525060e08084013589811115612f715760008081fd5b612f7f8f8d83880101612d7f565b60c084015250918301359188831115612f985760008081fd5b612fa68e8c85870101612a76565b9082015285525050918601918601612e91565b5098975050505050505050565b805161265781612747565b60008060408385031215612fe457600080fd5b825167ffffffffffffffff80821115612ffc57600080fd5b908401906080828703121561301057600080fd5b6130186129cf565b825161302381612747565b8152602083810151818301526040808501519083015260608401518381111561304b57600080fd5b80850194505087601f85011261306057600080fd5b83519250613070612b5984612a41565b83815260059390931b8401810192818101908985111561308f57600080fd5b948201945b848610156130ad57855182529482019490820190613094565b80606085015250508195506130c3818801612fc6565b9450505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103613144576131446130ff565b60010192915050565b8181038181111561093e5761093e6130ff565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6003811061319f5761319f6130d0565b9052565b604081016131b1828561318f565b61092d602083018461318f565b67ffffffffffffffff818116838216019080821115610465576104656130ff565b60ff8181168382160290811690818114610465576104656130ff565b60ff818116838216019081111561093e5761093e6130ff565b6000815180845260208085019450602084016000805b8481101561326a57825188835b600281101561325457825182529186019190860190600101613237565b505050604097909701969183019160010161322a565b50959695505050505050565b600061014067ffffffffffffffff8d16835263ffffffff8c16602084015260028b106132a4576132a46130d0565b8a604084015273ffffffffffffffffffffffffffffffffffffffff8a1660608401526132dc608084018a67ffffffffffffffff169052565b8060a08401526132ee81840189613214565b905082810360c08401526133028188613214565b60ff871660e0850152905067ffffffffffffffff851661010084015282810361012084015261333181856124b3565b9d9c5050505050505050505050505056fe434349504361706162696c697479436f6e66696775726174696f6e20312e302e302d646576a164736f6c6343000818000a",
}

var CCIPCapabilityConfigurationABI = CCIPCapabilityConfigurationMetaData.ABI

var CCIPCapabilityConfigurationBin = CCIPCapabilityConfigurationMetaData.Bin

func DeployCCIPCapabilityConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend, capabilityRegistry common.Address) (common.Address, *types.Transaction, *CCIPCapabilityConfiguration, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPCapabilityConfigurationBin), backend, capabilityRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPCapabilityConfiguration{address: address, abi: *parsed, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

type CCIPCapabilityConfiguration struct {
	address common.Address
	abi     abi.ABI
	CCIPCapabilityConfigurationCaller
	CCIPCapabilityConfigurationTransactor
	CCIPCapabilityConfigurationFilterer
}

type CCIPCapabilityConfigurationCaller struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationTransactor struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationFilterer struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationSession struct {
	Contract     *CCIPCapabilityConfiguration
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationCallerSession struct {
	Contract *CCIPCapabilityConfigurationCaller
	CallOpts bind.CallOpts
}

type CCIPCapabilityConfigurationTransactorSession struct {
	Contract     *CCIPCapabilityConfigurationTransactor
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationRaw struct {
	Contract *CCIPCapabilityConfiguration
}

type CCIPCapabilityConfigurationCallerRaw struct {
	Contract *CCIPCapabilityConfigurationCaller
}

type CCIPCapabilityConfigurationTransactorRaw struct {
	Contract *CCIPCapabilityConfigurationTransactor
}

func NewCCIPCapabilityConfiguration(address common.Address, backend bind.ContractBackend) (*CCIPCapabilityConfiguration, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPCapabilityConfigurationABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPCapabilityConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfiguration{address: address, abi: abi, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

func NewCCIPCapabilityConfigurationCaller(address common.Address, caller bind.ContractCaller) (*CCIPCapabilityConfigurationCaller, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCaller{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPCapabilityConfigurationTransactor, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationTransactor{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPCapabilityConfigurationFilterer, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationFilterer{contract: contract}, nil
}

func bindCCIPCapabilityConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPCapabilityConfigurationChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPCapabilityConfigurationChainConfig)).(*[]CCIPCapabilityConfigurationChainConfig)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) TypeAndVersion() (string, error) {
	return _CCIPCapabilityConfiguration.Contract.TypeAndVersion(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "applyChainConfigUpdates", chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, chainSelectorRemoves, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

type CCIPCapabilityConfigurationCapabilityConfigurationSetIterator struct {
	Event *CCIPCapabilityConfigurationCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCapabilityConfigurationSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error) {
	event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigRemovedIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigRemovedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigRemoved)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error) {
	event := new(CCIPCapabilityConfigurationChainConfigRemoved)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigSetIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error) {
	event := new(CCIPCapabilityConfigurationChainConfigSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequestedIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferRequestedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferredIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferredIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferred)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferred)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPCapabilityConfiguration.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPCapabilityConfiguration.ParseCapabilityConfigurationSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigRemoved(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigSet"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferRequested(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferred"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPCapabilityConfigurationCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPCapabilityConfigurationChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPCapabilityConfigurationChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e0")
}

func (CCIPCapabilityConfigurationOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPCapabilityConfigurationOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) Address() common.Address {
	return _CCIPCapabilityConfiguration.address
}

type CCIPCapabilityConfigurationInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
