// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_capability_configuration

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPCapabilityConfigurationChainConfig struct {
	Readers [][32]byte
	Config  []byte
}

type CCIPCapabilityConfigurationChainConfigUpdate struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
}

type CCIPCapabilityConfigurationOCR3Config struct {
	PluginType            uint8
	ChainSelector         uint64
	Signers               [][][]byte
	Transmitters          [][][]byte
	F                     uint8
	OffchainConfigVersion uint64
	OffchainConfig        []byte
}

type CCIPCapabilityConfigurationOCR3ConfigWithMeta struct {
	Config       CCIPCapabilityConfigurationOCR3Config
	ConfigCount  uint64
	ConfigDigest [32]byte
}

var CCIPCapabilityConfigurationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfigState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPCapabilityConfiguration.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"NoCapabilityConfigurationSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilityRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotLength\",\"type\":\"uint256\"}],\"name\":\"SignerP2PIdPairMustBeLengthTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfigUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.ChainConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOCRConfigs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enumCCIPCapabilityConfiguration.PluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes[][]\",\"name\":\"signers\",\"type\":\"bytes[][]\"},{\"internalType\":\"bytes[][]\",\"name\":\"transmitters\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPCapabilityConfiguration.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIPCapabilityConfiguration.OCR3ConfigWithMeta[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620040ea380380620040ea83398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b608051613f17620001d3600039600081816111a3015261132a0152613f176000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c97b8f551161005b578063c97b8f5514610109578063ddc042a81461011e578063f2fde38b14610133578063fba64a7c1461014657600080fd5b80635bc6cf881461008d57806379ba5097146100a2578063884efe61146100aa5780638da5cb5b146100e1575b600080fd5b6100a061009b366004612e2d565b610159565b005b6100a06104bf565b6100cb6100b8366004612e99565b5060408051602081019091526000815290565b6040516100d89190612f16565b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d8565b6101116105bc565b6040516100d89190613026565b610126610fbc565b6040516100d89190613256565b6100a06101413660046132fa565b611177565b6100a0610154366004613351565b61118b565b61016161124c565b60005b83811015610359576101b38585838181106101815761018161340e565b9050602002810190610193919061343d565b6101a190602081019061347b565b60039067ffffffffffffffff166112cf565b61022d578484828181106101c9576101c961340e565b90506020028101906101db919061343d565b6101e990602081019061347b565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024015b60405180910390fd5b600260008686848181106102435761024361340e565b9050602002810190610255919061343d565b61026390602081019061347b565b67ffffffffffffffff168152602081019190915260400160009081209061028a8282612b26565b610298600183016000612b44565b50506102e18585838181106102af576102af61340e565b90506020028101906102c1919061343d565b6102cf90602081019061347b565b60039067ffffffffffffffff166112ec565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f08585838181106103155761031561340e565b9050602002810190610327919061343d565b61033590602081019061347b565b60405167ffffffffffffffff909116815260200160405180910390a1600101610164565b5060005b818110156104b85760008383838181106103795761037961340e565b905060200281019061038b919061343d565b61039990602081019061343d565b6103a290613635565b805190915060008585858181106103bb576103bb61340e565b90506020028101906103cd919061343d565b6103db90602081019061347b565b905060005b82518110156104135761040b8382815181106103fe576103fe61340e565b60200260200101516112f8565b6001016103e0565b5067ffffffffffffffff81166000908152600260209081526040909120845180518693610444928492910190612b7e565b5060208201516001820190610459908261379a565b5061047391506003905067ffffffffffffffff8316611413565b507f0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a5081846040516104a59291906138b4565b60405180910390a150505060010161035d565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610224565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006105ca600661141f565b67ffffffffffffffff8111156105e2576105e2613496565b60405190808252806020026020018201604052801561061557816020015b60608152602001906001900390816106005790505b50905060005b610625600661141f565b811015610fb6576000610639600683611429565b63ffffffff81166000908152600560209081526040808320600184529091528082205482805291205491925061066e9161390e565b67ffffffffffffffff81111561068657610686613496565b60405190808252806020026020018201604052801561072457816020015b6040805161014081018252600060608083018281526080840183905260a0840182905260c0840182905260e084018390526101008401839052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816106a45790505b508383815181106107375761073761340e565b602002602001018190525060005b63ffffffff82166000908152600560209081526040808320838052909152902054811015610b5f5763ffffffff82166000908152600560209081526040808320838052909152902080548290811061079f5761079f61340e565b600091825260209091206040805161014081019091526007909202018054829060608201908390829060ff1660018111156107dc576107dc612f29565b60018111156107ed576107ed612f29565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b8282101561091c57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561090957838290600052602060002001805461087c906136fc565b80601f01602080910402602001604051908101604052809291908181526020018280546108a8906136fc565b80156108f55780601f106108ca576101008083540402835291602001916108f5565b820191906000526020600020905b8154815290600101906020018083116108d857829003601f168201915b50505050508152602001906001019061085d565b5050505081526020019060010190610829565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610a3c57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610a2957838290600052602060002001805461099c906136fc565b80601f01602080910402602001604051908101604052809291908181526020018280546109c8906136fc565b8015610a155780601f106109ea57610100808354040283529160200191610a15565b820191906000526020600020905b8154815290600101906020018083116109f857829003601f168201915b50505050508152602001906001019061097d565b5050505081526020019060010190610949565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191610a7a906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa6906136fc565b8015610af35780601f10610ac857610100808354040283529160200191610af3565b820191906000526020600020905b815481529060010190602001808311610ad657829003601f168201915b505050919092525050508152600582015467ffffffffffffffff1660208201526006909101546040909101528451859085908110610b3357610b3361340e565b60200260200101518281518110610b4c57610b4c61340e565b6020908102919091010152600101610745565b5060005b63ffffffff8216600090815260056020908152604080832060018452909152902054811015610fac5763ffffffff82166000908152600560209081526040808320600184529091529020805482908110610bbf57610bbf61340e565b600091825260209091206040805161014081019091526007909202018054829060608201908390829060ff166001811115610bfc57610bfc612f29565b6001811115610c0d57610c0d612f29565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b82821015610d3c57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610d29578382906000526020600020018054610c9c906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc8906136fc565b8015610d155780601f10610cea57610100808354040283529160200191610d15565b820191906000526020600020905b815481529060010190602001808311610cf857829003601f168201915b505050505081526020019060010190610c7d565b5050505081526020019060010190610c49565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610e5c57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610e49578382906000526020600020018054610dbc906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610de8906136fc565b8015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081526020019060010190610d9d565b5050505081526020019060010190610d69565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191610e9a906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec6906136fc565b8015610f135780601f10610ee857610100808354040283529160200191610f13565b820191906000526020600020905b815481529060010190602001808311610ef657829003601f168201915b505050919092525050508152600582015467ffffffffffffffff1660208201526006909101546040909101528451859085908110610f5357610f5361340e565b60209081029190910181015163ffffffff851660009081526005835260408082208280529093529190912054610f89908461390e565b81518110610f9957610f9961340e565b6020908102919091010152600101610b63565b505060010161061b565b50919050565b60606000610fca600361141f565b67ffffffffffffffff811115610fe257610fe2613496565b60405190808252806020026020018201604052801561102757816020015b60408051808201909152606080825260208201528152602001906001900390816110005790505b50905060005b611037600361141f565b811015610fb6576002600061104d600384611429565b67ffffffffffffffff16815260208082019290925260409081016000208151815460609481028201850184529281018381529093919284928491908401828280156110b757602002820191906000526020600020905b8154815260200190600101908083116110a3575b505050505081526020016001820180546110d0906136fc565b80601f01602080910402602001604051908101604052809291908181526020018280546110fc906136fc565b80156111495780601f1061111e57610100808354040283529160200191611149565b820191906000526020600020905b81548152906001019060200180831161112c57829003601f168201915b5050505050815250508282815181106111645761116461340e565b602090810291909101015260010161102d565b61117f61124c565b61118881611435565b50565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146111fa576040517f7b2485a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061120884860186613a3f565b90506000806112168361152a565b815191935091501561122e5761122e84600084611721565b8051156112415761124184600183611721565b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610224565b565b600081815260018301602052604081205415155b90505b92915050565b60006112e38383611dca565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa158015611386573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113cc9190810190613be5565b5090508181604001511461140f576040517f8907a4fa00000000000000000000000000000000000000000000000000000000815260048101839052602401610224565b5050565b60006112e38383611ec4565b60006112e6825490565b60006112e38383611f13565b3373ffffffffffffffffffffffffffffffffffffffff8216036114b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610224565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b606080600460ff168351111561156c576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c081019190915281526020019060019003908161158257505060408051600280825260608201909252919350602082015b6040805160e08101825260008082526020820181905260609282018390528282018390526080820181905260a082015260c08101919091528152602001906001900390816115e457905050905060008060005b85518110156117145760008682815181106116545761165461340e565b602002602001015160000151600181111561167157611671612f29565b036116c3578581815181106116885761168861340e565b6020026020010151858460ff16815181106116a5576116a561340e565b602002602001018190525082806116bb90613ced565b93505061170c565b8581815181106116d5576116d561340e565b6020026020010151848360ff16815181106116f2576116f261340e565b6020026020010181905250818061170890613ced565b9250505b600101611637565b5090835281529092909150565b63ffffffff831660009081526005602052604081208184600181111561174957611749612f29565b600181111561175a5761175a612f29565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611b2457600084815260209020604080516101408101909152600784029091018054829060608201908390829060ff1660018111156117cd576117cd612f29565b60018111156117de576117de612f29565b81528154610100900467ffffffffffffffff16602080830191909152600183018054604080518285028101850182528281529401939260009084015b8282101561190d57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156118fa57838290600052602060002001805461186d906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054611899906136fc565b80156118e65780601f106118bb576101008083540402835291602001916118e6565b820191906000526020600020905b8154815290600101906020018083116118c957829003601f168201915b50505050508152602001906001019061184e565b505050508152602001906001019061181a565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611a2d57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015611a1a57838290600052602060002001805461198d906136fc565b80601f01602080910402602001604051908101604052809291908181526020018280546119b9906136fc565b8015611a065780601f106119db57610100808354040283529160200191611a06565b820191906000526020600020905b8154815290600101906020018083116119e957829003601f168201915b50505050508152602001906001019061196e565b505050508152602001906001019061193a565b50505090825250600382015460ff81166020830152610100900467ffffffffffffffff166040820152600482018054606090920191611a6b906136fc565b80601f0160208091040260200160405190810160405280929190818152602001828054611a97906136fc565b8015611ae45780601f10611ab957610100808354040283529160200191611ae4565b820191906000526020600020905b815481529060010190602001808311611ac757829003601f168201915b505050919092525050508152600582015467ffffffffffffffff166020808301919091526006909201546040909101529082526001929092019101611788565b5050505090506000611b368251611f3d565b90506000611b448451611f3d565b9050611b508282611fa1565b6000611b5f8785878686612095565b9050611b6b8482612469565b63ffffffff8716600090815260056020526040812090876001811115611b9357611b93612f29565b6001811115611ba457611ba4612f29565b81526020019081526020016000206000611bbe9190612bc9565b60005b8151811015611dc05763ffffffff8816600090815260056020526040812090886001811115611bf257611bf2612f29565b6001811115611c0357611c03612f29565b8152602001908152602001600020828281518110611c2357611c2361340e565b6020908102919091018101518254600181810185556000948552929093208151805160079095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115611c8d57611c8d612f29565b0217905550602082810151825467ffffffffffffffff909116610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911617825560408301518051611ce89260018501920190612bea565b5060608201518051611d04916002840191602090910190612bea565b50608082015160038201805460a085015167ffffffffffffffff16610100027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911660ff9093169290921791909117905560c08201516004820190611d6a908261379a565b50505060208201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055604090910151600690910155600101611bc1565b5050505050505050565b60008181526001830160205260408120548015611eb3576000611dee600183613d0c565b8554909150600090611e0290600190613d0c565b9050818114611e67576000866000018281548110611e2257611e2261340e565b9060005260206000200154905080876000018481548110611e4557611e4561340e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e7857611e78613d1f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506112e6565b60009150506112e6565b5092915050565b6000818152600183016020526040812054611f0b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112e6565b5060006112e6565b6000826000018281548110611f2a57611f2a61340e565b9060005260206000200154905092915050565b600081600003611f4f57506000919050565b81600103611f5f57506001919050565b81600203611f6f57506002919050565b6040517f4a44867700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080836002811115611fb657611fb6612f29565b148015611fd457506001826002811115611fd257611fd2612f29565b145b905060006001846002811115611fec57611fec612f29565b14801561200a5750600283600281111561200857612008612f29565b145b90506000600285600281111561202257612022612f29565b1480156120405750600184600281111561203e5761203e612f29565b145b9050828061204b5750815b806120535750805b1561205f575050505050565b84846040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610224929190613d5e565b60606000845167ffffffffffffffff8111156120b3576120b3613496565b6040519080825280602002602001820160405280156120dc578160200160208202803683370190505b50905060008460028111156120f3576120f3612f29565b1480156121115750600183600281111561210f5761210f612f29565b145b156121525760018160008151811061212b5761212b61340e565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250506122ba565b600184600281111561216657612166612f29565b1480156121845750600283600281111561218257612182612f29565b145b1561221b578560008151811061219c5761219c61340e565b602002602001015160200151816000815181106121bb576121bb61340e565b602002602001019067ffffffffffffffff16908167ffffffffffffffff1681525050856000815181106121f0576121f061340e565b60200260200101516020015160016122089190613d79565b8160018151811061212b5761212b61340e565b600284600281111561222f5761222f612f29565b14801561224d5750600183600281111561224b5761224b612f29565b145b1561228457856001815181106122655761226561340e565b6020026020010151602001518160008151811061212b5761212b61340e565b83836040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610224929190613d5e565b6000855167ffffffffffffffff8111156122d6576122d6613496565b60405190808252806020026020018201604052801561237457816020015b6040805161014081018252600060608083018281526080840183905260a0840182905260c0840182905260e084018390526101008401839052610120840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816122f45790505b50905060005b825181101561245d576123a58782815181106123985761239861340e565b60200260200101516127ed565b60405180606001604052808883815181106123c2576123c261340e565b602002602001015181526020018483815181106123e1576123e161340e565b602002602001015167ffffffffffffffff1681526020016124358b86858151811061240e5761240e61340e565b60200260200101518b86815181106124285761242861340e565b6020026020010151612ac7565b81525082828151811061244a5761244a61340e565b602090810291909101015260010161237a565b50979650505050505050565b815181518115801561247b5750806001145b1561251c57826000815181106124935761249361340e565b60200260200101516020015167ffffffffffffffff1660011461251757826000815181106124c3576124c361340e565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260016024820152604401610224565b6127e7565b81600114801561252c5750806002145b156126e257836000815181106125445761254461340e565b602002602001015160400151836000815181106125635761256361340e565b602002602001015160400151146125ef57826000815181106125875761258761340e565b602002602001015160400151846000815181106125a6576125a661340e565b6020026020010151604001516040517fc7ccdd7f000000000000000000000000000000000000000000000000000000008152600401610224929190918252602082015260400190565b836000815181106126025761260261340e565b602002602001015160200151600161261a9190613d79565b67ffffffffffffffff16836001815181106126375761263761340e565b60200260200101516020015167ffffffffffffffff161461251757826001815181106126655761266561340e565b602002602001015160200151846000815181106126845761268461340e565b602002602001015160200151600161269c9190613d79565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610224565b8160021480156126f25750806001145b156127b5578360018151811061270a5761270a61340e565b602002602001015160400151836000815181106127295761272961340e565b60200260200101516040015114612517578260008151811061274d5761274d61340e565b6020026020010151604001518460018151811061276c5761276c61340e565b6020026020010151604001516040517f9e975670000000000000000000000000000000000000000000000000000000008152600401610224929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b806020015167ffffffffffffffff16600003612835576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151600181111561284a5761284a612f29565b1415801561286b575060018151600181111561286857612868612f29565b14155b156128a2576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516128bd9060039067ffffffffffffffff166112cf565b6129055760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602401610224565b604081015151601f1015612945576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015151601f1015612985576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806080015160ff166000036129c6576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101516129d6906003613d9a565b60ff1681604001515111612a16576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81604001515181101561140f57600082604001518281518110612a3e57612a3e61340e565b602002602001015190508051600214612a885780516040517f2928b16800000000000000000000000000000000000000000000000000000000815260040161022491815260200190565b612abe81600081518110612a9e57612a9e61340e565b6020026020010151806020019051810190612ab99190613db6565b6112f8565b50600101612a19565b60008160200151848360000151858560400151866060015187608001518860a001518960c00151604051602001612b0699989796959493929190613e7a565b6040516020818303038152906040528051906020012090505b9392505050565b50805460008255906000526020600020908101906111889190612c43565b508054612b50906136fc565b6000825580601f10612b60575050565b601f0160209004906000526020600020908101906111889190612c43565b828054828255906000526020600020908101928215612bb9579160200282015b82811115612bb9578251825591602001919060010190612b9e565b50612bc5929150612c43565b5090565b50805460008255600702906000526020600020908101906111889190612c58565b828054828255906000526020600020908101928215612c37579160200282015b82811115612c375782518051612c27918491602090910190612d19565b5091602001919060010190612c0a565b50612bc5929150612d6b565b5b80821115612bc55760008155600101612c44565b80821115612bc55780547fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000016815560008181612c976001830182612d88565b612ca5600283016000612d88565b6003820180547fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000169055612cdd600483016000612b44565b5050506005810180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016905560006006820155600701612c58565b828054828255906000526020600020908101928215612d5f579160200282015b82811115612d5f5782518290612d4f908261379a565b5091602001919060010190612d39565b50612bc5929150612da6565b80821115612bc5576000612d7f8282612dc3565b50600101612d6b565b50805460008255906000526020600020908101906111889190612d6b565b80821115612bc5576000612dba8282612b44565b50600101612da6565b50805460008255906000526020600020908101906111889190612da6565b60008083601f840112612df357600080fd5b50813567ffffffffffffffff811115612e0b57600080fd5b6020830191508360208260051b8501011115612e2657600080fd5b9250929050565b60008060008060408587031215612e4357600080fd5b843567ffffffffffffffff80821115612e5b57600080fd5b612e6788838901612de1565b90965094506020870135915080821115612e8057600080fd5b50612e8d87828801612de1565b95989497509550505050565b600060208284031215612eab57600080fd5b5035919050565b6000815180845260005b81811015612ed857602081850181015186830182015201612ebc565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006112e36020830184612eb2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612f6857612f68612f29565b9052565b6000828251808552602080860195506005818360051b8501018287016000805b86811015613017577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088850381018c5283518051808752908801908887019080891b88018a01865b8281101561300057858a8303018452612fee828651612eb2565b948c0194938c01939150600101612fd4565b509e8a019e97505050938701935050600101612f8c565b50919998505050505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156131e7578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180518085529088019088850190600581901b86018a0160005b828110156131d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08883030184528451606081518185526130de8286018251612f58565b8e810151608067ffffffffffffffff8216818801528f830151915060e060a081818a01526131106101408a0185612f6c565b93508585015195507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa060c0818b870301818c015261314e8689612f6c565b975060ff8588015116848c01528287015195506131786101008c018767ffffffffffffffff169052565b80870151965050808a8803016101208b015250505050506131998282612eb2565b9150508d8201516131b58f86018267ffffffffffffffff169052565b50908c0151928c0192909252938b0193928b0192600101613099565b50978a019795505050918701915060010161304f565b509098975050505050505050565b805160408084528151908401819052600091602091908201906060860190845b8181101561323157835183529284019291840191600101613215565b505060208501519250858103602087015261324c8184612eb2565b9695505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156132cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526132b98583516131f5565b9450928501929085019060010161327f565b5092979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461118857600080fd5b60006020828403121561330c57600080fd5b8135612b1f816132d8565b803567ffffffffffffffff8116811461332f57600080fd5b919050565b63ffffffff8116811461118857600080fd5b803561332f81613334565b6000806000806000806080878903121561336a57600080fd5b863567ffffffffffffffff8082111561338257600080fd5b61338e8a838b01612de1565b909850965060208901359150808211156133a757600080fd5b818901915089601f8301126133bb57600080fd5b8135818111156133ca57600080fd5b8a60208285010111156133dc57600080fd5b6020830196508095505050506133f460408801613317565b915061340260608801613346565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261347157600080fd5b9190910192915050565b60006020828403121561348d57600080fd5b6112e382613317565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156134e8576134e8613496565b60405290565b60405160e0810167ffffffffffffffff811182821017156134e8576134e8613496565b6040516080810167ffffffffffffffff811182821017156134e8576134e8613496565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561357b5761357b613496565b604052919050565b600067ffffffffffffffff82111561359d5761359d613496565b5060051b60200190565b600082601f8301126135b857600080fd5b813567ffffffffffffffff8111156135d2576135d2613496565b61360360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613534565b81815284602083860101111561361857600080fd5b816020850160208301376000918101602001919091529392505050565b60006040823603121561364757600080fd5b61364f6134c5565b823567ffffffffffffffff8082111561366757600080fd5b9084019036601f83011261367a57600080fd5b8135602061368f61368a83613583565b613534565b82815260059290921b840181019181810190368411156136ae57600080fd5b948201945b838610156136cc578535825294820194908201906136b3565b865250868101359350828411156136e257600080fd5b6136ee368589016135a7565b908501525091949350505050565b600181811c9082168061371057607f821691505b602082108103610fb6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115613795576000816000526020600020601f850160051c810160208610156137725750805b601f850160051c820191505b818110156137915782815560010161377e565b5050505b505050565b815167ffffffffffffffff8111156137b4576137b4613496565b6137c8816137c284546136fc565b84613749565b602080601f83116001811461381b57600084156137e55750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613791565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561386857888601518255948401946001909101908401613849565b50858210156138a457878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff831681526040602082015260006138d760408301846131f5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156112e6576112e66138df565b80356002811061332f57600080fd5b600082601f83011261394157600080fd5b8135602061395161368a83613583565b82815260059290921b8401810191818101908684111561397057600080fd5b8286015b84811015613a2357803567ffffffffffffffff8082111561399457600080fd5b818901915089603f8301126139a857600080fd5b858201356139b861368a82613583565b81815260059190911b830160400190878101908c8311156139d857600080fd5b604085015b83811015613a11578035858111156139f457600080fd5b613a038f6040838a01016135a7565b8452509189019189016139dd565b50875250505092840192508301613974565b509695505050505050565b803560ff8116811461332f57600080fd5b60006020808385031215613a5257600080fd5b823567ffffffffffffffff80821115613a6a57600080fd5b818501915085601f830112613a7e57600080fd5b8135613a8c61368a82613583565b81815260059190911b83018401908481019088831115613aab57600080fd5b8585015b83811015613bcd57803585811115613ac657600080fd5b860160e0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613afb5760008081fd5b613b036134ee565b613b0e898301613921565b81526040613b1d818401613317565b8a83015260608084013589811115613b355760008081fd5b613b438f8d83880101613930565b8385015250608091508184013589811115613b5e5760008081fd5b613b6c8f8d83880101613930565b82850152505060a0613b7f818501613a2e565b8284015260c09150613b92828501613317565b9083015260e083013588811115613ba95760008081fd5b613bb78e8c838701016135a7565b9183019190915250845250918601918601613aaf565b5098975050505050505050565b805161332f81613334565b60008060408385031215613bf857600080fd5b825167ffffffffffffffff80821115613c1057600080fd5b9084019060808287031215613c2457600080fd5b613c2c613511565b8251613c3781613334565b8152602083810151613c48816132d8565b8282015260408481015190830152606084015183811115613c6857600080fd5b80850194505087601f850112613c7d57600080fd5b83519250613c8d61368a84613583565b83815260059390931b84018101928181019089851115613cac57600080fd5b948201945b84861015613cca57855182529482019490820190613cb1565b8060608501525050819550613ce0818801613bda565b9450505050509250929050565b600060ff821660ff8103613d0357613d036138df565b60010192915050565b818103818111156112e6576112e66138df565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60038110612f6857612f68612f29565b60408101613d6c8285613d4e565b612b1f6020830184613d4e565b67ffffffffffffffff818116838216019080821115611ebd57611ebd6138df565b60ff8181168382160290811690818114611ebd57611ebd6138df565b600060208284031215613dc857600080fd5b5051919050565b6000828251808552602080860195506005818360051b8501018287016000805b86811015613017577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088850381018c5283518051808752908801908887019080891b88018a01865b82811015613e6357858a8303018452613e51828651612eb2565b948c0194938c01939150600101613e37565b509e8a019e97505050938701935050600101613def565b600061012067ffffffffffffffff808d16845263ffffffff8c166020850152613ea6604085018c612f58565b808a166060850152816080850152613ec08285018a613dcf565b915083820360a0850152613ed48289613dcf565b60ff881660c086015290861660e08501528381036101008501529050613efa8185612eb2565b9c9b50505050505050505050505056fea164736f6c6343000818000a",
}

var CCIPCapabilityConfigurationABI = CCIPCapabilityConfigurationMetaData.ABI

var CCIPCapabilityConfigurationBin = CCIPCapabilityConfigurationMetaData.Bin

func DeployCCIPCapabilityConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend, capabilityRegistry common.Address) (common.Address, *types.Transaction, *CCIPCapabilityConfiguration, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPCapabilityConfigurationBin), backend, capabilityRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPCapabilityConfiguration{address: address, abi: *parsed, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

type CCIPCapabilityConfiguration struct {
	address common.Address
	abi     abi.ABI
	CCIPCapabilityConfigurationCaller
	CCIPCapabilityConfigurationTransactor
	CCIPCapabilityConfigurationFilterer
}

type CCIPCapabilityConfigurationCaller struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationTransactor struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationFilterer struct {
	contract *bind.BoundContract
}

type CCIPCapabilityConfigurationSession struct {
	Contract     *CCIPCapabilityConfiguration
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationCallerSession struct {
	Contract *CCIPCapabilityConfigurationCaller
	CallOpts bind.CallOpts
}

type CCIPCapabilityConfigurationTransactorSession struct {
	Contract     *CCIPCapabilityConfigurationTransactor
	TransactOpts bind.TransactOpts
}

type CCIPCapabilityConfigurationRaw struct {
	Contract *CCIPCapabilityConfiguration
}

type CCIPCapabilityConfigurationCallerRaw struct {
	Contract *CCIPCapabilityConfigurationCaller
}

type CCIPCapabilityConfigurationTransactorRaw struct {
	Contract *CCIPCapabilityConfigurationTransactor
}

func NewCCIPCapabilityConfiguration(address common.Address, backend bind.ContractBackend) (*CCIPCapabilityConfiguration, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPCapabilityConfigurationABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPCapabilityConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfiguration{address: address, abi: abi, CCIPCapabilityConfigurationCaller: CCIPCapabilityConfigurationCaller{contract: contract}, CCIPCapabilityConfigurationTransactor: CCIPCapabilityConfigurationTransactor{contract: contract}, CCIPCapabilityConfigurationFilterer: CCIPCapabilityConfigurationFilterer{contract: contract}}, nil
}

func NewCCIPCapabilityConfigurationCaller(address common.Address, caller bind.ContractCaller) (*CCIPCapabilityConfigurationCaller, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCaller{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPCapabilityConfigurationTransactor, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationTransactor{contract: contract}, nil
}

func NewCCIPCapabilityConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPCapabilityConfigurationFilterer, error) {
	contract, err := bindCCIPCapabilityConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationFilterer{contract: contract}, nil
}

func bindCCIPCapabilityConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPCapabilityConfigurationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.CCIPCapabilityConfigurationTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPCapabilityConfiguration.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transfer(opts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPCapabilityConfigurationChainConfig), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPCapabilityConfigurationChainConfig)).(*[]CCIPCapabilityConfigurationChainConfig)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllChainConfigs() ([]CCIPCapabilityConfigurationChainConfig, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllChainConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetAllOCRConfigs(opts *bind.CallOpts) ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getAllOCRConfigs")

	if err != nil {
		return *new([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta), err
	}

	out0 := *abi.ConvertType(out[0], new([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta)).(*[][]CCIPCapabilityConfigurationOCR3ConfigWithMeta)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetAllOCRConfigs() ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllOCRConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetAllOCRConfigs() ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error) {
	return _CCIPCapabilityConfiguration.Contract.GetAllOCRConfigs(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) GetCapabilityConfiguration(arg0 *big.Int) ([]byte, error) {
	return _CCIPCapabilityConfiguration.Contract.GetCapabilityConfiguration(&_CCIPCapabilityConfiguration.CallOpts, arg0)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPCapabilityConfiguration.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationCallerSession) Owner() (common.Address, error) {
	return _CCIPCapabilityConfiguration.Contract.Owner(&_CCIPCapabilityConfiguration.CallOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.AcceptOwnership(&_CCIPCapabilityConfiguration.TransactOpts)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "applyChainConfigUpdates", removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) ApplyChainConfigUpdates(removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.ApplyChainConfigUpdates(&_CCIPCapabilityConfiguration.TransactOpts, removes, adds)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.BeforeCapabilityConfigSet(&_CCIPCapabilityConfiguration.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPCapabilityConfiguration.Contract.TransferOwnership(&_CCIPCapabilityConfiguration.TransactOpts, to)
}

type CCIPCapabilityConfigurationCapabilityConfigurationSetIterator struct {
	Event *CCIPCapabilityConfigurationCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationCapabilityConfigurationSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error) {
	event := new(CCIPCapabilityConfigurationCapabilityConfigurationSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigRemovedIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigRemovedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigRemoved)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error) {
	event := new(CCIPCapabilityConfigurationChainConfigRemoved)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationChainConfigSetIterator struct {
	Event *CCIPCapabilityConfigurationChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPCapabilityConfigurationChainConfig
	Raw           types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationChainConfigSetIterator{contract: _CCIPCapabilityConfiguration.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationChainConfigSet)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error) {
	event := new(CCIPCapabilityConfigurationChainConfigSet)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequestedIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferRequestedIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferRequested)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPCapabilityConfigurationOwnershipTransferredIterator struct {
	Event *CCIPCapabilityConfigurationOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPCapabilityConfigurationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPCapabilityConfigurationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPCapabilityConfigurationOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPCapabilityConfigurationOwnershipTransferredIterator{contract: _CCIPCapabilityConfiguration.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPCapabilityConfiguration.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPCapabilityConfigurationOwnershipTransferred)
				if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfigurationFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error) {
	event := new(CCIPCapabilityConfigurationOwnershipTransferred)
	if err := _CCIPCapabilityConfiguration.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPCapabilityConfiguration.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPCapabilityConfiguration.ParseCapabilityConfigurationSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigRemoved(log)
	case _CCIPCapabilityConfiguration.abi.Events["ChainConfigSet"].ID:
		return _CCIPCapabilityConfiguration.ParseChainConfigSet(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferRequested(log)
	case _CCIPCapabilityConfiguration.abi.Events["OwnershipTransferred"].ID:
		return _CCIPCapabilityConfiguration.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPCapabilityConfigurationCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPCapabilityConfigurationChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPCapabilityConfigurationChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0a93b217b9314a2a41b31bcc6cc8543471c1a3b3c4b9214afc1cf8f9987d2a50")
}

func (CCIPCapabilityConfigurationOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPCapabilityConfigurationOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPCapabilityConfiguration *CCIPCapabilityConfiguration) Address() common.Address {
	return _CCIPCapabilityConfiguration.address
}

type CCIPCapabilityConfigurationInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPCapabilityConfigurationChainConfig, error)

	GetAllOCRConfigs(opts *bind.CallOpts) ([][]CCIPCapabilityConfigurationOCR3ConfigWithMeta, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, removes []CCIPCapabilityConfigurationChainConfigUpdate, adds []CCIPCapabilityConfigurationChainConfigUpdate) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPCapabilityConfigurationCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPCapabilityConfigurationChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPCapabilityConfigurationChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPCapabilityConfigurationChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPCapabilityConfigurationOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPCapabilityConfigurationOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPCapabilityConfigurationOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
