// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccipReceiverWithACK

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPBaseApprovedSenderUpdate struct {
	DestChainSelector uint64
	Sender            []byte
}

type CCIPBaseChainUpdate struct {
	ChainSelector  uint64
	Allowed        bool
	Recipient      []byte
	ExtraArgsBytes []byte
}

type ClientAny2EVMMessage struct {
	MessageId           [32]byte
	SourceChainSelector uint64
	Sender              []byte
	Data                []byte
	DestTokenAmounts    []ClientEVMTokenAmount
}

type ClientEVMTokenAmount struct {
	Token  common.Address
	Amount *big.Int
}

var CCIPReceiverWithACKMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAckMessageHeader\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAlreadyAcknowledged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageNotFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"ApprovedSenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"CCIPRouterModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"removeChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"FeeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"MessageAbandoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageAckSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incomingMessageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ACKMessageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawnByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACK_MESSAGE_HEADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"abandonFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ChainUpdate[]\",\"name\":\"chains\",\"type\":\"tuple[]\"}],\"name\":\"applyChainUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"getMessageContents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"senderAddr\",\"type\":\"bytes\"}],\"name\":\"isApprovedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"isFailedMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structClient.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"structClient.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"retryFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"s_chainConfigs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgsBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"s_messageStatus\",\"outputs\":[{\"internalType\":\"enumCCIPReceiverWithACK.MessageStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPBase.ApprovedSenderUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"}],\"name\":\"updateApprovedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200422d3803806200422d833981016040819052620000349162000565565b818033806000816200008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c057620000c08162000141565b5050506001600160a01b038116620000eb576040516342bcdf7f60e11b815260040160405180910390fd5b600280546001600160a01b039283166001600160a01b0319918216179091556007805492851692909116821790551590506200013957620001396001600160a01b03821683600019620001ec565b50506200068a565b336001600160a01b038216036200019b5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156200023e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002649190620005a4565b620002709190620005be565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152919250620002cc91869190620002d216565b50505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015260009062000321906001600160a01b038516908490620003a8565b805190915015620003a35780806020019051810190620003429190620005e6565b620003a35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000084565b505050565b6060620003b98484600085620003c1565b949350505050565b606082471015620004245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000084565b600080866001600160a01b0316858760405162000442919062000637565b60006040518083038185875af1925050503d806000811462000481576040519150601f19603f3d011682016040523d82523d6000602084013e62000486565b606091505b5090925090506200049a87838387620004a5565b979650505050505050565b606083156200051957825160000362000511576001600160a01b0385163b620005115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000084565b5081620003b9565b620003b98383815115620005305781518083602001fd5b8060405162461bcd60e51b815260040162000084919062000655565b6001600160a01b03811681146200056257600080fd5b50565b600080604083850312156200057957600080fd5b825162000586816200054c565b602084015190925062000599816200054c565b809150509250929050565b600060208284031215620005b757600080fd5b5051919050565b80820180821115620005e057634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215620005f957600080fd5b815180151581146200060a57600080fd5b9392505050565b60005b838110156200062e57818101518382015260200162000614565b50506000910152565b600082516200064b81846020870162000611565b9190910192915050565b60208152600082518060208401526200067681604085016020870162000611565b601f01601f19169190910160400192915050565b613b93806200069a6000396000f3fe6080604052600436106101635760003560e01c806385572ffb116100c0578063c89245d511610074578063cf6730f811610059578063cf6730f81461043b578063e4ca87541461045b578063f2fde38b1461047b57600080fd5b8063c89245d5146103f0578063ca709a251461041057600080fd5b80639fe74e26116100a55780639fe74e2614610385578063b0f479a1146103a5578063c851cc32146103d057600080fd5b806385572ffb146103195780638da5cb5b1461033957600080fd5b80636939cd97116101175780636fef519e116100fc5780636fef519e146102a257806379ba5097146102e45780638462a2b9146102f957600080fd5b80636939cd97146102555780636d62d6331461028257600080fd5b80630e958d6b116101485780630e958d6b146101e557806335f170ef146102055780635e35359e1461023357600080fd5b806305bfe9821461016f5780630a9094dc146101b557600080fd5b3661016a57005b600080fd5b34801561017b57600080fd5b5061019f61018a366004612a6b565b60086020526000908152604090205460ff1681565b6040516101ac9190612ab3565b60405180910390f35b3480156101c157600080fd5b506101d56101d0366004612a6b565b61049b565b60405190151581526020016101ac565b3480156101f157600080fd5b506101d5610200366004612b0a565b6104ae565b34801561021157600080fd5b50610225610220366004612b8f565b6104f9565b6040516101ac929190612c1a565b34801561023f57600080fd5b5061025361024e366004612c6a565b610625565b005b34801561026157600080fd5b50610275610270366004612a6b565b6106fa565b6040516101ac9190612d08565b34801561028e57600080fd5b5061025361029d366004612d9c565b610905565b3480156102ae57600080fd5b506102d67f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b281565b6040519081526020016101ac565b3480156102f057600080fd5b50610253610b1d565b34801561030557600080fd5b50610253610314366004612e18565b610c1a565b34801561032557600080fd5b50610253610334366004612e84565b610f5b565b34801561034557600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ac565b34801561039157600080fd5b506102536103a0366004612ebf565b611152565b3480156103b157600080fd5b5060025473ffffffffffffffffffffffffffffffffffffffff16610360565b3480156103dc57600080fd5b506102536103eb366004612f01565b61130b565b3480156103fc57600080fd5b5061025361040b366004612f01565b6113d7565b34801561041c57600080fd5b5060075473ffffffffffffffffffffffffffffffffffffffff16610360565b34801561044757600080fd5b50610253610456366004612e84565b61154b565b34801561046757600080fd5b50610253610476366004612a6b565b611839565b34801561048757600080fd5b50610253610496366004612f01565b611b07565b60006104a8600583611b1b565b92915050565b67ffffffffffffffff831660009081526003602052604080822090516002909101906104dd9085908590612f1e565b9081526040519081900360200190205460ff1690509392505050565b60036020526000908152604090208054819061051490612f2e565b80601f016020809104026020016040519081016040528092919081815260200182805461054090612f2e565b801561058d5780601f106105625761010080835404028352916020019161058d565b820191906000526020600020905b81548152906001019060200180831161057057829003601f168201915b5050505050908060010180546105a290612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce90612f2e565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b5050505050905082565b61062d611b36565b73ffffffffffffffffffffffffffffffffffffffff831661066d5761066873ffffffffffffffffffffffffffffffffffffffff831682611bb9565b61068e565b61068e73ffffffffffffffffffffffffffffffffffffffff84168383611d13565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e836040516106ed91815260200190565b60405180910390a3505050565b6040805160a08082018352600080835260208084018290526060848601819052808501819052608085015285825260048152908490208451928301855280548352600181015467ffffffffffffffff169183019190915260028101805493949293919284019161076990612f2e565b80601f016020809104026020016040519081016040528092919081815260200182805461079590612f2e565b80156107e25780601f106107b7576101008083540402835291602001916107e2565b820191906000526020600020905b8154815290600101906020018083116107c557829003601f168201915b505050505081526020016003820180546107fb90612f2e565b80601f016020809104026020016040519081016040528092919081815260200182805461082790612f2e565b80156108745780601f1061084957610100808354040283529160200191610874565b820191906000526020600020905b81548152906001019060200180831161085757829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156108f75760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001908101548284015290835290920191016108a2565b505050915250909392505050565b61090d611b36565b610918600583611b1b565b610956576040517fb6e78260000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b600082815260046020818152604080842090920180548351818402810184019094528084529091849084015b828210156109d75760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101610982565b50505060008581526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690559293509050610a2760028301826129b9565b610a356003830160006129b9565b610a436004830160006129f3565b50610a519050600584611de7565b5060005b8151811015610acb57610ac383838381518110610a7457610a74612f81565b602002602001015160200151848481518110610a9257610a92612f81565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16611d139092919063ffffffff16565b600101610a55565b5060405173ffffffffffffffffffffffffffffffffffffffff8316815283907fd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957906020015b60405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161094d565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610c22611b36565b60005b81811015610db55760036000848484818110610c4357610c43612f81565b9050602002810190610c559190612fb0565b610c63906020810190612b8f565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201838383818110610c9a57610c9a612f81565b9050602002810190610cac9190612fb0565b610cba906020810190612fee565b604051610cc8929190612f1e565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055828282818110610d0f57610d0f612f81565b9050602002810190610d219190612fb0565b610d2f906020810190612fee565b604051610d3d929190612f1e565b6040518091039020838383818110610d5757610d57612f81565b9050602002810190610d699190612fb0565b610d77906020810190612b8f565b67ffffffffffffffff167f021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce960405160405180910390a3600101610c25565b5060005b83811015610f5457600160036000878785818110610dd957610dd9612f81565b9050602002810190610deb9190612fb0565b610df9906020810190612b8f565b67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600201868684818110610e3057610e30612f81565b9050602002810190610e429190612fb0565b610e50906020810190612fee565b604051610e5e929190612f1e565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055848482818110610eae57610eae612f81565b9050602002810190610ec09190612fb0565b610ece906020810190612fee565b604051610edc929190612f1e565b6040518091039020858583818110610ef657610ef6612f81565b9050602002810190610f089190612fb0565b610f16906020810190612b8f565b67ffffffffffffffff167f72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e760405160405180910390a3600101610db9565b5050505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610fae576040517fd7f7333400000000000000000000000000000000000000000000000000000000815233600482015260240161094d565b610fbe6040820160208301612b8f565b67ffffffffffffffff811660009081526003602052604090208054610fe290612f2e565b9050600003611029576040517fd79f2ea400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8216600482015260240161094d565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f890611065908590600401613155565b600060405180830381600087803b15801561107f57600080fd5b505af1925050508015611090575060015b611122573d8080156110be576040519150601f19603f3d011682016040523d82523d6000602084013e6110c3565b606091505b506110d060058435611df3565b508235600090815260046020526040902083906110ed828261355e565b50506040518335907f55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f90610b10908490613658565b6040518235907fdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f90600090a25050565b61115a611b36565b60005b8181101561130657600083838381811061117957611179612f81565b905060200281019061118b919061366b565b61119490613781565b905080602001516111ff57805167ffffffffffffffff1660009081526003602052604081206111c2916129b9565b805160405167ffffffffffffffff909116907f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d85991690600090a26112fd565b80604001515160000361123e576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080820151825167ffffffffffffffff166000908152600360205291909120906112699082613832565b506060810151815167ffffffffffffffff166000908152600360205260409020600101906112979082613832565b5080604001516040516112aa919061394c565b6040518091039020816000015167ffffffffffffffff167f1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a8721283606001516040516112f49190613658565b60405180910390a35b5060010161115d565b505050565b611313611b36565b73ffffffffffffffffffffffffffffffffffffffff8116611360576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c890600090a35050565b6113df611b36565b60075473ffffffffffffffffffffffffffffffffffffffff16156114405761144061141f60025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff16906000611dff565b6007805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093551690156114ed576114ed6114ad60025473ffffffffffffffffffffffffffffffffffffffff1690565b60075473ffffffffffffffffffffffffffffffffffffffff16907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611f81565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e6760405160405180910390a35050565b333014611584576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115946040820160208301612b8f565b6115a16040830183612fee565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525067ffffffffffffffff8616815260036020526040902080549093506115f892509050612f2e565b1590508061164e5750600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020181604051611639919061394c565b9081526040519081900360200190205460ff16155b1561168757806040517f5075bb3800000000000000000000000000000000000000000000000000000000815260040161094d9190613658565b60006116966060850185612fee565b8101906116a3919061395e565b90506000816040015160018111156116bd576116bd612a84565b036116d1576116cb8461207f565b50505050565b6001816040015160018111156116e9576116e9612a84565b036116cb5760008082602001518060200190518101906117099190613a0a565b90925090507f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b28214611767576040517fae15168d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008281526008602052604090205460ff16600281111561178c5761178c612a84565b036117c6576040517f33704b280000000000000000000000000000000000000000000000000000000081526004810182905260240161094d565b60008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600217905590518281527fef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79910160405180910390a1505050505050565b611844600582611b1b565b61187d576040517fb6e782600000000000000000000000000000000000000000000000000000000081526004810182905260240161094d565b6000818152600460209081526040808320815160a08101835281548152600182015467ffffffffffffffff169381019390935260028101805491928401916118c490612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546118f090612f2e565b801561193d5780601f106119125761010080835404028352916020019161193d565b820191906000526020600020905b81548152906001019060200180831161192057829003601f168201915b5050505050815260200160038201805461195690612f2e565b80601f016020809104026020016040519081016040528092919081815260200182805461198290612f2e565b80156119cf5780601f106119a4576101008083540402835291602001916119cf565b820191906000526020600020905b8154815290600101906020018083116119b257829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611a525760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001908101548284015290835290920191016119fd565b5050509152505060008381526004602052604081208181556001810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055919250611aa460028301826129b9565b611ab26003830160006129b9565b611ac06004830160006129f3565b50611ace9050600583611de7565b50611ad8816123f5565b60405182907fef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad90600090a25050565b611b0f611b36565b611b1881612467565b50565b600081815260018301602052604081205415155b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161094d565b565b80471015611c23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161094d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611c7d576040519150601f19603f3d011682016040523d82523d6000602084013e611c82565b606091505b5050905080611306576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161094d565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113069084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261255c565b6000611b2f8383612668565b6000611b2f838361275b565b801580611e9f57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d9190613a2e565b155b611f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161094d565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113069084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611d65565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201c9190613a2e565b6120269190613a47565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506116cb9085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611d65565b60006040518060a0016040528083806040019061209c9190612fee565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604051602091820191612114917f1c778f21871bcc06cfebd177c4d0360c2f3550962fb071f69ed007e4f55f23b29187359101918252602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528152602001600060405190808252806020026020018201604052801561218e57816020015b60408051808201909152600080825260208201528152602001906001900390816121675790505b50815260075473ffffffffffffffffffffffffffffffffffffffff166020808301919091526040918201916003916000916121ce91908801908801612b8f565b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010180546121fe90612f2e565b80601f016020809104026020016040519081016040528092919081815260200182805461222a90612f2e565b80156122775780601f1061224c57610100808354040283529160200191612277565b820191906000526020600020905b81548152906001019060200180831161225a57829003601f168201915b50505091909252505060025490915060009073ffffffffffffffffffffffffffffffffffffffff166320487ded6122b46040860160208701612b8f565b846040518363ffffffff1660e01b81526004016122d2929190613a5a565b602060405180830381865afa1580156122ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123139190613a2e565b60025460075491925060009173ffffffffffffffffffffffffffffffffffffffff918216916396f4e9f991161561234b57600061234d565b835b61235d6040880160208901612b8f565b866040518463ffffffff1660e01b815260040161237b929190613a5a565b60206040518083038185885af1158015612399573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123be9190613a2e565b60405190915081908535907f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b237290600090a350505050565b6123fd611b36565b6040517fcf6730f8000000000000000000000000000000000000000000000000000000008152309063cf6730f890612439908490600401612d08565b600060405180830381600087803b15801561245357600080fd5b505af1158015610f54573d6000803e3d6000fd5b3373ffffffffffffffffffffffffffffffffffffffff8216036124e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161094d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006125be826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127aa9092919063ffffffff16565b80519091501561130657808060200190518101906125dc9190613b27565b611306576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161094d565b6000818152600183016020526040812054801561275157600061268c600183613b44565b85549091506000906126a090600190613b44565b90508181146127055760008660000182815481106126c0576126c0612f81565b90600052602060002001549050808760000184815481106126e3576126e3612f81565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061271657612716613b57565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104a8565b60009150506104a8565b60008181526001830160205260408120546127a2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104a8565b5060006104a8565b60606127b984846000856127c1565b949350505050565b606082471015612853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161094d565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161287c919061394c565b60006040518083038185875af1925050503d80600081146128b9576040519150601f19603f3d011682016040523d82523d6000602084013e6128be565b606091505b50915091506128cf878383876128da565b979650505050505050565b606083156129705782516000036129695773ffffffffffffffffffffffffffffffffffffffff85163b612969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161094d565b50816127b9565b6127b983838151156129855781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d9190613658565b5080546129c590612f2e565b6000825580601f106129d5575050565b601f016020900490600052602060002090810190611b189190612a14565b5080546000825560020290600052602060002090810190611b189190612a2d565b5b80821115612a295760008155600101612a15565b5090565b5b80821115612a295780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560006001820155600201612a2e565b600060208284031215612a7d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310612aee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b67ffffffffffffffff81168114611b1857600080fd5b600080600060408486031215612b1f57600080fd5b8335612b2a81612af4565b9250602084013567ffffffffffffffff80821115612b4757600080fd5b818601915086601f830112612b5b57600080fd5b813581811115612b6a57600080fd5b876020828501011115612b7c57600080fd5b6020830194508093505050509250925092565b600060208284031215612ba157600080fd5b8135611b2f81612af4565b60005b83811015612bc7578181015183820152602001612baf565b50506000910152565b60008151808452612be8816020860160208601612bac565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000612c2d6040830185612bd0565b8281036020840152612c3f8185612bd0565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611b1857600080fd5b600080600060608486031215612c7f57600080fd5b8335612c8a81612c48565b92506020840135612c9a81612c48565b929592945050506040919091013590565b60008151808452602080850194506020840160005b83811015612cfd578151805173ffffffffffffffffffffffffffffffffffffffff1688528301518388015260409096019590820190600101612cc0565b509495945050505050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a06060840152612d4260c0840182612bd0565b905060608401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403016080860152612d7e8383612bd0565b925060808601519150808584030160a086015250612c3f8282612cab565b60008060408385031215612daf57600080fd5b823591506020830135612dc181612c48565b809150509250929050565b60008083601f840112612dde57600080fd5b50813567ffffffffffffffff811115612df657600080fd5b6020830191508360208260051b8501011115612e1157600080fd5b9250929050565b60008060008060408587031215612e2e57600080fd5b843567ffffffffffffffff80821115612e4657600080fd5b612e5288838901612dcc565b90965094506020870135915080821115612e6b57600080fd5b50612e7887828801612dcc565b95989497509550505050565b600060208284031215612e9657600080fd5b813567ffffffffffffffff811115612ead57600080fd5b820160a08185031215611b2f57600080fd5b60008060208385031215612ed257600080fd5b823567ffffffffffffffff811115612ee957600080fd5b612ef585828601612dcc565b90969095509350505050565b600060208284031215612f1357600080fd5b8135611b2f81612c48565b8183823760009101908152919050565b600181811c90821680612f4257607f821691505b602082108103612f7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112612fe457600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261302357600080fd5b83018035915067ffffffffffffffff82111561303e57600080fd5b602001915036819003821315612e1157600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261308857600080fd5b830160208101925035905067ffffffffffffffff8111156130a857600080fd5b803603821315612e1157600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015612cfd57813561312381612c48565b73ffffffffffffffffffffffffffffffffffffffff168752818301358388015260409687019690910190600101613110565b60208152813560208201526000602083013561317081612af4565b67ffffffffffffffff808216604085015261318e6040860186613053565b925060a060608601526131a560c0860184836130b7565b9250506131b56060860186613053565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808786030160808801526131eb8583856130b7565b9450608088013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe188360301831261322457600080fd5b6020928801928301923591508382111561323d57600080fd5b8160061b360383131561324f57600080fd5b8685030160a08701526128cf848284613100565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115611306576000816000526020600020601f850160051c810160208610156132bb5750805b601f850160051c820191505b818110156132da578281556001016132c7565b505050505050565b67ffffffffffffffff8311156132fa576132fa613263565b61330e836133088354612f2e565b83613292565b6000601f841160018114613360576000851561332a5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610f54565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156133af578685013582556020948501946001909201910161338f565b50868210156133ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b813561343681612c48565b73ffffffffffffffffffffffffffffffffffffffff81167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550602082013560018201555050565b6801000000000000000083111561349c5761349c613263565b8054838255808410156135295760017f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80831683146134dd576134dd6133fc565b80861686146134ee576134ee6133fc565b5060008360005260206000208360011b81018760011b820191505b80821015613524578282558284830155600282019150613509565b505050505b5060008181526020812083915b858110156132da57613548838361342b565b6040929092019160029190910190600101613536565b8135815560018101602083013561357481612af4565b67ffffffffffffffff8082167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008454161783556135b46040860186612fee565b935091506135c68383600287016132e2565b6135d36060860186612fee565b935091506135e58383600387016132e2565b608085013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe185360301831261361c57600080fd5b91840191823591508082111561363157600080fd5b506020820191508060061b360382131561364a57600080fd5b6116cb818360048601613483565b602081526000611b2f6020830184612bd0565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112612fe457600080fd5b6040516060810167ffffffffffffffff811182821017156136c2576136c2613263565b60405290565b8015158114611b1857600080fd5b600082601f8301126136e757600080fd5b813567ffffffffffffffff8082111561370257613702613263565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561374857613748613263565b8160405283815286602085880101111561376157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006080823603121561379357600080fd5b6040516080810167ffffffffffffffff82821081831117156137b7576137b7613263565b81604052843591506137c882612af4565b9082526020840135906137da826136c8565b81602084015260408501359150808211156137f457600080fd5b613800368387016136d6565b6040840152606085013591508082111561381957600080fd5b50613826368286016136d6565b60608301525092915050565b815167ffffffffffffffff81111561384c5761384c613263565b6138608161385a8454612f2e565b84613292565b602080601f8311600181146138b3576000841561387d5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556132da565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613900578886015182559484019460019091019084016138e1565b508582101561393c57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612fe4818460208701612bac565b60006020828403121561397057600080fd5b813567ffffffffffffffff8082111561398857600080fd5b908301906060828603121561399c57600080fd5b6139a461369f565b8235828111156139b357600080fd5b6139bf878286016136d6565b8252506020830135828111156139d457600080fd5b6139e0878286016136d6565b60208301525060408301359250600283106139fa57600080fd5b6040810192909252509392505050565b60008060408385031215613a1d57600080fd5b505080516020909101519092909150565b600060208284031215613a4057600080fd5b5051919050565b808201808211156104a8576104a86133fc565b67ffffffffffffffff83168152604060208201526000825160a06040840152613a8660e0840182612bd0565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080858403016060860152613ac28383612bd0565b92506040860151915080858403016080860152613adf8383612cab565b925073ffffffffffffffffffffffffffffffffffffffff60608701511660a086015260808601519150808584030160c086015250613b1d8282612bd0565b9695505050505050565b600060208284031215613b3957600080fd5b8151611b2f816136c8565b818103818111156104a8576104a86133fc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000818000a",
}

var CCIPReceiverWithACKABI = CCIPReceiverWithACKMetaData.ABI

var CCIPReceiverWithACKBin = CCIPReceiverWithACKMetaData.Bin

func DeployCCIPReceiverWithACK(auth *bind.TransactOpts, backend bind.ContractBackend, router common.Address, feeToken common.Address) (common.Address, *types.Transaction, *CCIPReceiverWithACK, error) {
	parsed, err := CCIPReceiverWithACKMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPReceiverWithACKBin), backend, router, feeToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPReceiverWithACK{address: address, abi: *parsed, CCIPReceiverWithACKCaller: CCIPReceiverWithACKCaller{contract: contract}, CCIPReceiverWithACKTransactor: CCIPReceiverWithACKTransactor{contract: contract}, CCIPReceiverWithACKFilterer: CCIPReceiverWithACKFilterer{contract: contract}}, nil
}

type CCIPReceiverWithACK struct {
	address common.Address
	abi     abi.ABI
	CCIPReceiverWithACKCaller
	CCIPReceiverWithACKTransactor
	CCIPReceiverWithACKFilterer
}

type CCIPReceiverWithACKCaller struct {
	contract *bind.BoundContract
}

type CCIPReceiverWithACKTransactor struct {
	contract *bind.BoundContract
}

type CCIPReceiverWithACKFilterer struct {
	contract *bind.BoundContract
}

type CCIPReceiverWithACKSession struct {
	Contract     *CCIPReceiverWithACK
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPReceiverWithACKCallerSession struct {
	Contract *CCIPReceiverWithACKCaller
	CallOpts bind.CallOpts
}

type CCIPReceiverWithACKTransactorSession struct {
	Contract     *CCIPReceiverWithACKTransactor
	TransactOpts bind.TransactOpts
}

type CCIPReceiverWithACKRaw struct {
	Contract *CCIPReceiverWithACK
}

type CCIPReceiverWithACKCallerRaw struct {
	Contract *CCIPReceiverWithACKCaller
}

type CCIPReceiverWithACKTransactorRaw struct {
	Contract *CCIPReceiverWithACKTransactor
}

func NewCCIPReceiverWithACK(address common.Address, backend bind.ContractBackend) (*CCIPReceiverWithACK, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPReceiverWithACKABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPReceiverWithACK(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACK{address: address, abi: abi, CCIPReceiverWithACKCaller: CCIPReceiverWithACKCaller{contract: contract}, CCIPReceiverWithACKTransactor: CCIPReceiverWithACKTransactor{contract: contract}, CCIPReceiverWithACKFilterer: CCIPReceiverWithACKFilterer{contract: contract}}, nil
}

func NewCCIPReceiverWithACKCaller(address common.Address, caller bind.ContractCaller) (*CCIPReceiverWithACKCaller, error) {
	contract, err := bindCCIPReceiverWithACK(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKCaller{contract: contract}, nil
}

func NewCCIPReceiverWithACKTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPReceiverWithACKTransactor, error) {
	contract, err := bindCCIPReceiverWithACK(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKTransactor{contract: contract}, nil
}

func NewCCIPReceiverWithACKFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPReceiverWithACKFilterer, error) {
	contract, err := bindCCIPReceiverWithACK(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKFilterer{contract: contract}, nil
}

func bindCCIPReceiverWithACK(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPReceiverWithACKMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPReceiverWithACK.Contract.CCIPReceiverWithACKCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.CCIPReceiverWithACKTransactor.contract.Transfer(opts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.CCIPReceiverWithACKTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPReceiverWithACK.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.contract.Transfer(opts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "ACK_MESSAGE_HEADER")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPReceiverWithACK.Contract.ACKMESSAGEHEADER(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) ACKMESSAGEHEADER() ([32]byte, error) {
	return _CCIPReceiverWithACK.Contract.ACKMESSAGEHEADER(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) GetFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "getFeeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) GetFeeToken() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.GetFeeToken(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) GetFeeToken() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.GetFeeToken(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "getMessageContents", messageId)

	if err != nil {
		return *new(ClientAny2EVMMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(ClientAny2EVMMessage)).(*ClientAny2EVMMessage)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPReceiverWithACK.Contract.GetMessageContents(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) GetMessageContents(messageId [32]byte) (ClientAny2EVMMessage, error) {
	return _CCIPReceiverWithACK.Contract.GetMessageContents(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) GetRouter() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.GetRouter(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) GetRouter() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.GetRouter(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "isApprovedSender", sourceChainSelector, senderAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPReceiverWithACK.Contract.IsApprovedSender(&_CCIPReceiverWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) IsApprovedSender(sourceChainSelector uint64, senderAddr []byte) (bool, error) {
	return _CCIPReceiverWithACK.Contract.IsApprovedSender(&_CCIPReceiverWithACK.CallOpts, sourceChainSelector, senderAddr)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "isFailedMessage", messageId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPReceiverWithACK.Contract.IsFailedMessage(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) IsFailedMessage(messageId [32]byte) (bool, error) {
	return _CCIPReceiverWithACK.Contract.IsFailedMessage(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) Owner() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.Owner(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) Owner() (common.Address, error) {
	return _CCIPReceiverWithACK.Contract.Owner(&_CCIPReceiverWithACK.CallOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

	error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "s_chainConfigs", destChainSelector)

	outstruct := new(SChainConfigs)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.ExtraArgsBytes = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPReceiverWithACK.Contract.SChainConfigs(&_CCIPReceiverWithACK.CallOpts, destChainSelector)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) SChainConfigs(destChainSelector uint64) (SChainConfigs,

	error) {
	return _CCIPReceiverWithACK.Contract.SChainConfigs(&_CCIPReceiverWithACK.CallOpts, destChainSelector)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCaller) SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error) {
	var out []interface{}
	err := _CCIPReceiverWithACK.contract.Call(opts, &out, "s_messageStatus", messageId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPReceiverWithACK.Contract.SMessageStatus(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKCallerSession) SMessageStatus(messageId [32]byte) (uint8, error) {
	return _CCIPReceiverWithACK.Contract.SMessageStatus(&_CCIPReceiverWithACK.CallOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "abandonFailedMessage", messageId, receiver)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.AbandonFailedMessage(&_CCIPReceiverWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) AbandonFailedMessage(messageId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.AbandonFailedMessage(&_CCIPReceiverWithACK.TransactOpts, messageId, receiver)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.AcceptOwnership(&_CCIPReceiverWithACK.TransactOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.AcceptOwnership(&_CCIPReceiverWithACK.TransactOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "applyChainUpdates", chains)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.ApplyChainUpdates(&_CCIPReceiverWithACK.TransactOpts, chains)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) ApplyChainUpdates(chains []CCIPBaseChainUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.ApplyChainUpdates(&_CCIPReceiverWithACK.TransactOpts, chains)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "ccipReceive", message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.CcipReceive(&_CCIPReceiverWithACK.TransactOpts, message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) CcipReceive(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.CcipReceive(&_CCIPReceiverWithACK.TransactOpts, message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "processMessage", message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.ProcessMessage(&_CCIPReceiverWithACK.TransactOpts, message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) ProcessMessage(message ClientAny2EVMMessage) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.ProcessMessage(&_CCIPReceiverWithACK.TransactOpts, message)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "retryFailedMessage", messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.RetryFailedMessage(&_CCIPReceiverWithACK.TransactOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) RetryFailedMessage(messageId [32]byte) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.RetryFailedMessage(&_CCIPReceiverWithACK.TransactOpts, messageId)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.TransferOwnership(&_CCIPReceiverWithACK.TransactOpts, to)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.TransferOwnership(&_CCIPReceiverWithACK.TransactOpts, to)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "updateApprovedSenders", adds, removes)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateApprovedSenders(&_CCIPReceiverWithACK.TransactOpts, adds, removes)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) UpdateApprovedSenders(adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateApprovedSenders(&_CCIPReceiverWithACK.TransactOpts, adds, removes)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "updateFeeToken", token)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateFeeToken(&_CCIPReceiverWithACK.TransactOpts, token)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) UpdateFeeToken(token common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateFeeToken(&_CCIPReceiverWithACK.TransactOpts, token)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "updateRouter", newRouter)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateRouter(&_CCIPReceiverWithACK.TransactOpts, newRouter)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) UpdateRouter(newRouter common.Address) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.UpdateRouter(&_CCIPReceiverWithACK.TransactOpts, newRouter)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.Transact(opts, "withdrawTokens", token, to, amount)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.WithdrawTokens(&_CCIPReceiverWithACK.TransactOpts, token, to, amount)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) WithdrawTokens(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.WithdrawTokens(&_CCIPReceiverWithACK.TransactOpts, token, to, amount)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPReceiverWithACK.contract.RawTransact(opts, nil)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKSession) Receive() (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.Receive(&_CCIPReceiverWithACK.TransactOpts)
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKTransactorSession) Receive() (*types.Transaction, error) {
	return _CCIPReceiverWithACK.Contract.Receive(&_CCIPReceiverWithACK.TransactOpts)
}

type CCIPReceiverWithACKApprovedSenderAddedIterator struct {
	Event *CCIPReceiverWithACKApprovedSenderAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKApprovedSenderAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKApprovedSenderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKApprovedSenderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKApprovedSenderAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKApprovedSenderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKApprovedSenderAdded struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKApprovedSenderAddedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKApprovedSenderAddedIterator{contract: _CCIPReceiverWithACK.contract, event: "ApprovedSenderAdded", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "ApprovedSenderAdded", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKApprovedSenderAdded)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseApprovedSenderAdded(log types.Log) (*CCIPReceiverWithACKApprovedSenderAdded, error) {
	event := new(CCIPReceiverWithACKApprovedSenderAdded)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ApprovedSenderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKApprovedSenderRemovedIterator struct {
	Event *CCIPReceiverWithACKApprovedSenderRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKApprovedSenderRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKApprovedSenderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKApprovedSenderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKApprovedSenderRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKApprovedSenderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKApprovedSenderRemoved struct {
	DestChainSelector uint64
	Recipient         common.Hash
	Raw               types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKApprovedSenderRemovedIterator, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKApprovedSenderRemovedIterator{contract: _CCIPReceiverWithACK.contract, event: "ApprovedSenderRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var destChainSelectorRule []interface{}
	for _, destChainSelectorItem := range destChainSelector {
		destChainSelectorRule = append(destChainSelectorRule, destChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "ApprovedSenderRemoved", destChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKApprovedSenderRemoved)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseApprovedSenderRemoved(log types.Log) (*CCIPReceiverWithACKApprovedSenderRemoved, error) {
	event := new(CCIPReceiverWithACKApprovedSenderRemoved)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ApprovedSenderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKCCIPRouterModifiedIterator struct {
	Event *CCIPReceiverWithACKCCIPRouterModified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKCCIPRouterModifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKCCIPRouterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKCCIPRouterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKCCIPRouterModifiedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKCCIPRouterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKCCIPRouterModified struct {
	OldRouter common.Address
	NewRouter common.Address
	Raw       types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPReceiverWithACKCCIPRouterModifiedIterator, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKCCIPRouterModifiedIterator{contract: _CCIPReceiverWithACK.contract, event: "CCIPRouterModified", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "CCIPRouterModified", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKCCIPRouterModified)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseCCIPRouterModified(log types.Log) (*CCIPReceiverWithACKCCIPRouterModified, error) {
	event := new(CCIPReceiverWithACKCCIPRouterModified)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "CCIPRouterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKChainAddedIterator struct {
	Event *CCIPReceiverWithACKChainAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKChainAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKChainAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKChainAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKChainAddedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKChainAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKChainAdded struct {
	RemoteChainSelector uint64
	Recipient           common.Hash
	ExtraArgsBytes      []byte
	Raw                 types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKChainAddedIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKChainAddedIterator{contract: _CCIPReceiverWithACK.contract, event: "ChainAdded", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "ChainAdded", remoteChainSelectorRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKChainAdded)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseChainAdded(log types.Log) (*CCIPReceiverWithACKChainAdded, error) {
	event := new(CCIPReceiverWithACKChainAdded)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ChainAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKChainRemovedIterator struct {
	Event *CCIPReceiverWithACKChainRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKChainRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKChainRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKChainRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKChainRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKChainRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKChainRemoved struct {
	RemoveChainSelector uint64
	Raw                 types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPReceiverWithACKChainRemovedIterator, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKChainRemovedIterator{contract: _CCIPReceiverWithACK.contract, event: "ChainRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error) {

	var removeChainSelectorRule []interface{}
	for _, removeChainSelectorItem := range removeChainSelector {
		removeChainSelectorRule = append(removeChainSelectorRule, removeChainSelectorItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "ChainRemoved", removeChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKChainRemoved)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseChainRemoved(log types.Log) (*CCIPReceiverWithACKChainRemoved, error) {
	event := new(CCIPReceiverWithACKChainRemoved)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "ChainRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKFeeTokenUpdatedIterator struct {
	Event *CCIPReceiverWithACKFeeTokenUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKFeeTokenUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKFeeTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKFeeTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKFeeTokenUpdatedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKFeeTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKFeeTokenUpdated struct {
	OldToken common.Address
	NewToken common.Address
	Raw      types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPReceiverWithACKFeeTokenUpdatedIterator, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKFeeTokenUpdatedIterator{contract: _CCIPReceiverWithACK.contract, event: "FeeTokenUpdated", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error) {

	var oldTokenRule []interface{}
	for _, oldTokenItem := range oldToken {
		oldTokenRule = append(oldTokenRule, oldTokenItem)
	}
	var newTokenRule []interface{}
	for _, newTokenItem := range newToken {
		newTokenRule = append(newTokenRule, newTokenItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "FeeTokenUpdated", oldTokenRule, newTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKFeeTokenUpdated)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseFeeTokenUpdated(log types.Log) (*CCIPReceiverWithACKFeeTokenUpdated, error) {
	event := new(CCIPReceiverWithACKFeeTokenUpdated)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "FeeTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageAbandonedIterator struct {
	Event *CCIPReceiverWithACKMessageAbandoned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageAbandonedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageAbandoned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageAbandoned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageAbandonedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageAbandonedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageAbandoned struct {
	MessageId     [32]byte
	TokenReceiver common.Address
	Raw           types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageAbandonedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageAbandonedIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageAbandoned", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageAbandoned", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageAbandoned)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageAbandoned(log types.Log) (*CCIPReceiverWithACKMessageAbandoned, error) {
	event := new(CCIPReceiverWithACKMessageAbandoned)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAbandoned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageAckReceivedIterator struct {
	Event *CCIPReceiverWithACKMessageAckReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageAckReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageAckReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageAckReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageAckReceivedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageAckReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageAckReceived struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPReceiverWithACKMessageAckReceivedIterator, error) {

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageAckReceivedIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageAckReceived", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAckReceived) (event.Subscription, error) {

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageAckReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageAckReceived)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageAckReceived(log types.Log) (*CCIPReceiverWithACKMessageAckReceived, error) {
	event := new(CCIPReceiverWithACKMessageAckReceived)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAckReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageAckSentIterator struct {
	Event *CCIPReceiverWithACKMessageAckSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageAckSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageAckSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageAckSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageAckSentIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageAckSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageAckSent struct {
	IncomingMessageId [32]byte
	Raw               types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPReceiverWithACKMessageAckSentIterator, error) {

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageAckSentIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageAckSent", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAckSent) (event.Subscription, error) {

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageAckSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageAckSent)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageAckSent(log types.Log) (*CCIPReceiverWithACKMessageAckSent, error) {
	event := new(CCIPReceiverWithACKMessageAckSent)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageAckSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageFailedIterator struct {
	Event *CCIPReceiverWithACKMessageFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageFailedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageFailed struct {
	MessageId [32]byte
	Reason    []byte
	Raw       types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageFailedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageFailedIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageFailed", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageFailed", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageFailed)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageFailed(log types.Log) (*CCIPReceiverWithACKMessageFailed, error) {
	event := new(CCIPReceiverWithACKMessageFailed)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageRecoveredIterator struct {
	Event *CCIPReceiverWithACKMessageRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageRecoveredIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageRecovered struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageRecoveredIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageRecoveredIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageRecovered", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageRecovered", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageRecovered)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageRecovered(log types.Log) (*CCIPReceiverWithACKMessageRecovered, error) {
	event := new(CCIPReceiverWithACKMessageRecovered)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageSentIterator struct {
	Event *CCIPReceiverWithACKMessageSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageSentIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageSent struct {
	IncomingMessageId [32]byte
	ACKMessageId      [32]byte
	Raw               types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPReceiverWithACKMessageSentIterator, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageSentIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error) {

	var incomingMessageIdRule []interface{}
	for _, incomingMessageIdItem := range incomingMessageId {
		incomingMessageIdRule = append(incomingMessageIdRule, incomingMessageIdItem)
	}
	var ACKMessageIdRule []interface{}
	for _, ACKMessageIdItem := range ACKMessageId {
		ACKMessageIdRule = append(ACKMessageIdRule, ACKMessageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageSent", incomingMessageIdRule, ACKMessageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageSent)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageSent(log types.Log) (*CCIPReceiverWithACKMessageSent, error) {
	event := new(CCIPReceiverWithACKMessageSent)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKMessageSucceededIterator struct {
	Event *CCIPReceiverWithACKMessageSucceeded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKMessageSucceededIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKMessageSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKMessageSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKMessageSucceededIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKMessageSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKMessageSucceeded struct {
	MessageId [32]byte
	Raw       types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageSucceededIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKMessageSucceededIterator{contract: _CCIPReceiverWithACK.contract, event: "MessageSucceeded", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "MessageSucceeded", messageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKMessageSucceeded)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseMessageSucceeded(log types.Log) (*CCIPReceiverWithACKMessageSucceeded, error) {
	event := new(CCIPReceiverWithACKMessageSucceeded)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "MessageSucceeded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKOwnershipTransferRequestedIterator struct {
	Event *CCIPReceiverWithACKOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPReceiverWithACKOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKOwnershipTransferRequestedIterator{contract: _CCIPReceiverWithACK.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKOwnershipTransferRequested)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPReceiverWithACKOwnershipTransferRequested, error) {
	event := new(CCIPReceiverWithACKOwnershipTransferRequested)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKOwnershipTransferredIterator struct {
	Event *CCIPReceiverWithACKOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPReceiverWithACKOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKOwnershipTransferredIterator{contract: _CCIPReceiverWithACK.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKOwnershipTransferred)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPReceiverWithACKOwnershipTransferred, error) {
	event := new(CCIPReceiverWithACKOwnershipTransferred)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPReceiverWithACKTokensWithdrawnByOwnerIterator struct {
	Event *CCIPReceiverWithACKTokensWithdrawnByOwner

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPReceiverWithACKTokensWithdrawnByOwnerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPReceiverWithACKTokensWithdrawnByOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPReceiverWithACKTokensWithdrawnByOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPReceiverWithACKTokensWithdrawnByOwnerIterator) Error() error {
	return it.fail
}

func (it *CCIPReceiverWithACKTokensWithdrawnByOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPReceiverWithACKTokensWithdrawnByOwner struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPReceiverWithACKTokensWithdrawnByOwnerIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.FilterLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPReceiverWithACKTokensWithdrawnByOwnerIterator{contract: _CCIPReceiverWithACK.contract, event: "TokensWithdrawnByOwner", logs: logs, sub: sub}, nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPReceiverWithACK.contract.WatchLogs(opts, "TokensWithdrawnByOwner", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPReceiverWithACKTokensWithdrawnByOwner)
				if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACKFilterer) ParseTokensWithdrawnByOwner(log types.Log) (*CCIPReceiverWithACKTokensWithdrawnByOwner, error) {
	event := new(CCIPReceiverWithACKTokensWithdrawnByOwner)
	if err := _CCIPReceiverWithACK.contract.UnpackLog(event, "TokensWithdrawnByOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SChainConfigs struct {
	Recipient      []byte
	ExtraArgsBytes []byte
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACK) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPReceiverWithACK.abi.Events["ApprovedSenderAdded"].ID:
		return _CCIPReceiverWithACK.ParseApprovedSenderAdded(log)
	case _CCIPReceiverWithACK.abi.Events["ApprovedSenderRemoved"].ID:
		return _CCIPReceiverWithACK.ParseApprovedSenderRemoved(log)
	case _CCIPReceiverWithACK.abi.Events["CCIPRouterModified"].ID:
		return _CCIPReceiverWithACK.ParseCCIPRouterModified(log)
	case _CCIPReceiverWithACK.abi.Events["ChainAdded"].ID:
		return _CCIPReceiverWithACK.ParseChainAdded(log)
	case _CCIPReceiverWithACK.abi.Events["ChainRemoved"].ID:
		return _CCIPReceiverWithACK.ParseChainRemoved(log)
	case _CCIPReceiverWithACK.abi.Events["FeeTokenUpdated"].ID:
		return _CCIPReceiverWithACK.ParseFeeTokenUpdated(log)
	case _CCIPReceiverWithACK.abi.Events["MessageAbandoned"].ID:
		return _CCIPReceiverWithACK.ParseMessageAbandoned(log)
	case _CCIPReceiverWithACK.abi.Events["MessageAckReceived"].ID:
		return _CCIPReceiverWithACK.ParseMessageAckReceived(log)
	case _CCIPReceiverWithACK.abi.Events["MessageAckSent"].ID:
		return _CCIPReceiverWithACK.ParseMessageAckSent(log)
	case _CCIPReceiverWithACK.abi.Events["MessageFailed"].ID:
		return _CCIPReceiverWithACK.ParseMessageFailed(log)
	case _CCIPReceiverWithACK.abi.Events["MessageRecovered"].ID:
		return _CCIPReceiverWithACK.ParseMessageRecovered(log)
	case _CCIPReceiverWithACK.abi.Events["MessageSent"].ID:
		return _CCIPReceiverWithACK.ParseMessageSent(log)
	case _CCIPReceiverWithACK.abi.Events["MessageSucceeded"].ID:
		return _CCIPReceiverWithACK.ParseMessageSucceeded(log)
	case _CCIPReceiverWithACK.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPReceiverWithACK.ParseOwnershipTransferRequested(log)
	case _CCIPReceiverWithACK.abi.Events["OwnershipTransferred"].ID:
		return _CCIPReceiverWithACK.ParseOwnershipTransferred(log)
	case _CCIPReceiverWithACK.abi.Events["TokensWithdrawnByOwner"].ID:
		return _CCIPReceiverWithACK.ParseTokensWithdrawnByOwner(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPReceiverWithACKApprovedSenderAdded) Topic() common.Hash {
	return common.HexToHash("0x72d9f73bb7cb11065e15df29d61e803a0eba356d509a7025a6f51ebdea07f9e7")
}

func (CCIPReceiverWithACKApprovedSenderRemoved) Topic() common.Hash {
	return common.HexToHash("0x021290bab0d93f4d9a243bd430e45dd4bc8238451e9abbba6fab4463677dfce9")
}

func (CCIPReceiverWithACKCCIPRouterModified) Topic() common.Hash {
	return common.HexToHash("0x3672b589036f39ac008505b790fcb05d484d70b65680ec64c089a3c173fdc4c8")
}

func (CCIPReceiverWithACKChainAdded) Topic() common.Hash {
	return common.HexToHash("0x1ced5bcae649ed29cebfa0010298ad6794bf3822e8cb754a6eee5353a9a87212")
}

func (CCIPReceiverWithACKChainRemoved) Topic() common.Hash {
	return common.HexToHash("0x5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d859916")
}

func (CCIPReceiverWithACKFeeTokenUpdated) Topic() common.Hash {
	return common.HexToHash("0x91a03e1d689caf891fe531c01e290f7b718f9c6a3af6726d6d837d2b7bd82e67")
}

func (CCIPReceiverWithACKMessageAbandoned) Topic() common.Hash {
	return common.HexToHash("0xd5038100bd3dc9631d3c3f4f61a3e53e9d466f40c47af9897292c7b35e32a957")
}

func (CCIPReceiverWithACKMessageAckReceived) Topic() common.Hash {
	return common.HexToHash("0xef0cb160d3dc564cde61ae97d9981f9c4d92ace727a2ec202b18b223ea832a79")
}

func (CCIPReceiverWithACKMessageAckSent) Topic() common.Hash {
	return common.HexToHash("0x75944f95ba0be568cb30faeb0ef135cb73d07006939da29722d670a97f5c5b26")
}

func (CCIPReceiverWithACKMessageFailed) Topic() common.Hash {
	return common.HexToHash("0x55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f")
}

func (CCIPReceiverWithACKMessageRecovered) Topic() common.Hash {
	return common.HexToHash("0xef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad")
}

func (CCIPReceiverWithACKMessageSent) Topic() common.Hash {
	return common.HexToHash("0x9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b2372")
}

func (CCIPReceiverWithACKMessageSucceeded) Topic() common.Hash {
	return common.HexToHash("0xdf6958669026659bac75ba986685e11a7d271284989f565f2802522663e9a70f")
}

func (CCIPReceiverWithACKOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPReceiverWithACKOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CCIPReceiverWithACKTokensWithdrawnByOwner) Topic() common.Hash {
	return common.HexToHash("0x6832d9be2410a86571981e1e60fd4c1f9ea2a1034d6102a2b7d6c5e480adf02e")
}

func (_CCIPReceiverWithACK *CCIPReceiverWithACK) Address() common.Address {
	return _CCIPReceiverWithACK.address
}

type CCIPReceiverWithACKInterface interface {
	ACKMESSAGEHEADER(opts *bind.CallOpts) ([32]byte, error)

	GetFeeToken(opts *bind.CallOpts) (common.Address, error)

	GetMessageContents(opts *bind.CallOpts, messageId [32]byte) (ClientAny2EVMMessage, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	IsApprovedSender(opts *bind.CallOpts, sourceChainSelector uint64, senderAddr []byte) (bool, error)

	IsFailedMessage(opts *bind.CallOpts, messageId [32]byte) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SChainConfigs(opts *bind.CallOpts, destChainSelector uint64) (SChainConfigs,

		error)

	SMessageStatus(opts *bind.CallOpts, messageId [32]byte) (uint8, error)

	AbandonFailedMessage(opts *bind.TransactOpts, messageId [32]byte, receiver common.Address) (*types.Transaction, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainUpdates(opts *bind.TransactOpts, chains []CCIPBaseChainUpdate) (*types.Transaction, error)

	CcipReceive(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	ProcessMessage(opts *bind.TransactOpts, message ClientAny2EVMMessage) (*types.Transaction, error)

	RetryFailedMessage(opts *bind.TransactOpts, messageId [32]byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UpdateApprovedSenders(opts *bind.TransactOpts, adds []CCIPBaseApprovedSenderUpdate, removes []CCIPBaseApprovedSenderUpdate) (*types.Transaction, error)

	UpdateFeeToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	UpdateRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error)

	WithdrawTokens(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterApprovedSenderAdded(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKApprovedSenderAddedIterator, error)

	WatchApprovedSenderAdded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKApprovedSenderAdded, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderAdded(log types.Log) (*CCIPReceiverWithACKApprovedSenderAdded, error)

	FilterApprovedSenderRemoved(opts *bind.FilterOpts, destChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKApprovedSenderRemovedIterator, error)

	WatchApprovedSenderRemoved(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKApprovedSenderRemoved, destChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseApprovedSenderRemoved(log types.Log) (*CCIPReceiverWithACKApprovedSenderRemoved, error)

	FilterCCIPRouterModified(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*CCIPReceiverWithACKCCIPRouterModifiedIterator, error)

	WatchCCIPRouterModified(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKCCIPRouterModified, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error)

	ParseCCIPRouterModified(log types.Log) (*CCIPReceiverWithACKCCIPRouterModified, error)

	FilterChainAdded(opts *bind.FilterOpts, remoteChainSelector []uint64, recipient [][]byte) (*CCIPReceiverWithACKChainAddedIterator, error)

	WatchChainAdded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKChainAdded, remoteChainSelector []uint64, recipient [][]byte) (event.Subscription, error)

	ParseChainAdded(log types.Log) (*CCIPReceiverWithACKChainAdded, error)

	FilterChainRemoved(opts *bind.FilterOpts, removeChainSelector []uint64) (*CCIPReceiverWithACKChainRemovedIterator, error)

	WatchChainRemoved(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKChainRemoved, removeChainSelector []uint64) (event.Subscription, error)

	ParseChainRemoved(log types.Log) (*CCIPReceiverWithACKChainRemoved, error)

	FilterFeeTokenUpdated(opts *bind.FilterOpts, oldToken []common.Address, newToken []common.Address) (*CCIPReceiverWithACKFeeTokenUpdatedIterator, error)

	WatchFeeTokenUpdated(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKFeeTokenUpdated, oldToken []common.Address, newToken []common.Address) (event.Subscription, error)

	ParseFeeTokenUpdated(log types.Log) (*CCIPReceiverWithACKFeeTokenUpdated, error)

	FilterMessageAbandoned(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageAbandonedIterator, error)

	WatchMessageAbandoned(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAbandoned, messageId [][32]byte) (event.Subscription, error)

	ParseMessageAbandoned(log types.Log) (*CCIPReceiverWithACKMessageAbandoned, error)

	FilterMessageAckReceived(opts *bind.FilterOpts) (*CCIPReceiverWithACKMessageAckReceivedIterator, error)

	WatchMessageAckReceived(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAckReceived) (event.Subscription, error)

	ParseMessageAckReceived(log types.Log) (*CCIPReceiverWithACKMessageAckReceived, error)

	FilterMessageAckSent(opts *bind.FilterOpts) (*CCIPReceiverWithACKMessageAckSentIterator, error)

	WatchMessageAckSent(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageAckSent) (event.Subscription, error)

	ParseMessageAckSent(log types.Log) (*CCIPReceiverWithACKMessageAckSent, error)

	FilterMessageFailed(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageFailedIterator, error)

	WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageFailed, messageId [][32]byte) (event.Subscription, error)

	ParseMessageFailed(log types.Log) (*CCIPReceiverWithACKMessageFailed, error)

	FilterMessageRecovered(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageRecoveredIterator, error)

	WatchMessageRecovered(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageRecovered, messageId [][32]byte) (event.Subscription, error)

	ParseMessageRecovered(log types.Log) (*CCIPReceiverWithACKMessageRecovered, error)

	FilterMessageSent(opts *bind.FilterOpts, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (*CCIPReceiverWithACKMessageSentIterator, error)

	WatchMessageSent(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageSent, incomingMessageId [][32]byte, ACKMessageId [][32]byte) (event.Subscription, error)

	ParseMessageSent(log types.Log) (*CCIPReceiverWithACKMessageSent, error)

	FilterMessageSucceeded(opts *bind.FilterOpts, messageId [][32]byte) (*CCIPReceiverWithACKMessageSucceededIterator, error)

	WatchMessageSucceeded(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKMessageSucceeded, messageId [][32]byte) (event.Subscription, error)

	ParseMessageSucceeded(log types.Log) (*CCIPReceiverWithACKMessageSucceeded, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPReceiverWithACKOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPReceiverWithACKOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPReceiverWithACKOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPReceiverWithACKOwnershipTransferred, error)

	FilterTokensWithdrawnByOwner(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*CCIPReceiverWithACKTokensWithdrawnByOwnerIterator, error)

	WatchTokensWithdrawnByOwner(opts *bind.WatchOpts, sink chan<- *CCIPReceiverWithACKTokensWithdrawnByOwner, token []common.Address, to []common.Address) (event.Subscription, error)

	ParseTokensWithdrawnByOwner(log types.Log) (*CCIPReceiverWithACKTokensWithdrawnByOwner, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
