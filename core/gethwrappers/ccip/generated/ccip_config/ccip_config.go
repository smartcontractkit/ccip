// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_config

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPConfigChainConfig struct {
	Readers [][32]byte
	FChain  uint8
	Config  []byte
}

type CCIPConfigChainConfigInfo struct {
	ChainSelector uint64
	ChainConfig   CCIPConfigChainConfig
}

type CCIPConfigOCR3Config struct {
	PluginType            uint8
	ChainSelector         uint64
	F                     uint8
	OffchainConfigVersion uint64
	OfframpAddress        []byte
	BootstrapP2PIds       [][32]byte
	P2pIds                [][32]byte
	Signers               [][]byte
	Transmitters          [][]byte
	OffchainConfig        []byte
}

type CCIPConfigOCR3ConfigWithMeta struct {
	Config       CCIPConfigOCR3Config
	ConfigCount  uint64
	ConfigDigest [32]byte
}

var CCIPConfigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilitiesRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigNotSetForChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FChainMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPConfig.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPConfig.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTransmitters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfframpAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilitiesRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pIdsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transmittersLength\",\"type\":\"uint256\"}],\"name\":\"P2PIdsLengthNotMatching\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyBootstrapP2PIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPConfig.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainSelectorRemoves\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfig.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPConfig.ChainConfigInfo[]\",\"name\":\"chainConfigAdds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfig.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPConfig.ChainConfigInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"},{\"internalType\":\"enumCCIPConfig.PluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"}],\"name\":\"getOCRConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enumCCIPConfig.PluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"F\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offrampAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"bootstrapP2PIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"p2pIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signers\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"transmitters\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfig.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIPConfig.OCR3ConfigWithMeta[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620041263803806200412683398101604081905262000034916200017e565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000d3565b5050506001600160a01b0316608052620001b0565b336001600160a01b038216036200012d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019157600080fd5b81516001600160a01b0381168114620001a957600080fd5b9392505050565b608051613f53620001d360003960008181610df8015261108d0152613f536000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063f2fde38b1161005b578063f2fde38b146101fe578063f442c89a14610211578063fba64a7c1461022457600080fd5b80638da5cb5b146101c1578063ddc042a8146101e957600080fd5b80634bd0473f116100a75780634bd0473f1461017657806379ba5097146101965780638318ed5d146101a057600080fd5b806301ffc9a7146100c3578063181f5a771461012d575b600080fd5b6101186100d1366004612d09565b7fffffffff00000000000000000000000000000000000000000000000000000000167f78bea721000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b6101696040518060400160405280601481526020017f43434950436f6e66696720312e362e302d64657600000000000000000000000081525081565b6040516101249190612daf565b610189610184366004612df3565b610237565b6040516101249190612f1f565b61019e610708565b005b6101696101ae3660046130fc565b5060408051602081019091526000815290565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101f161080a565b604051610124919061315d565b61019e61020c3660046131ed565b6109fc565b61019e61021f36600461326f565b610a10565b61019e6102323660046132f3565b610de0565b63ffffffff8216600090815260056020526040812060609183600181111561026157610261612e28565b600181111561027257610272612e28565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156106fb57600084815260209020604080516101a08101909152600984029091018054829060608201908390829060ff1660018111156102e5576102e5612e28565b60018111156102f6576102f6612e28565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a010000000000000000000090910416606082015260018201805460809092019161034e906133b0565b80601f016020809104026020016040519081016040528092919081815260200182805461037a906133b0565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561041f57602002820191906000526020600020905b81548152602001906001019080831161040b575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561047757602002820191906000526020600020905b815481526020019060010190808311610463575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156105515783829060005260206000200180546104c4906133b0565b80601f01602080910402602001604051908101604052809291908181526020018280546104f0906133b0565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050815260200190600101906104a5565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b8282101561062a57838290600052602060002001805461059d906133b0565b80601f01602080910402602001604051908101604052809291908181526020018280546105c9906133b0565b80156106165780601f106105eb57610100808354040283529160200191610616565b820191906000526020600020905b8154815290600101906020018083116105f957829003601f168201915b50505050508152602001906001019061057e565b505050508152602001600682018054610642906133b0565b80601f016020809104026020016040519081016040528092919081815260200182805461066e906133b0565b80156106bb5780601f10610690576101008083540402835291602001916106bb565b820191906000526020600020905b81548152906001019060200180831161069e57829003601f168201915b505050919092525050508152600782015467ffffffffffffffff1660208083019190915260089092015460409091015290825260019290920191016102a0565b5050505090505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006108186003610ea1565b905060006108266003610eb5565b67ffffffffffffffff81111561083e5761083e613403565b60405190808252806020026020018201604052801561087757816020015b610864612a9a565b81526020019060019003908161085c5790505b50905060005b82518110156109f557600083828151811061089a5761089a613432565b60209081029190910181015160408051808201825267ffffffffffffffff83168082526000908152600285528290208251815460808188028301810190955260608201818152959750929586019490939192849284919084018282801561092057602002820191906000526020600020905b81548152602001906001019080831161090c575b5050509183525050600182015460ff16602082015260028201805460409092019161094a906133b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610976906133b0565b80156109c35780601f10610998576101008083540402835291602001916109c3565b820191906000526020600020905b8154815290600101906020018083116109a657829003601f168201915b5050505050815250508152508383815181106109e1576109e1613432565b60209081029190910101525060010161087d565b5092915050565b610a04610ebf565b610a0d81610f42565b50565b610a18610ebf565b60005b83811015610bfe57610a5f858583818110610a3857610a38613432565b9050602002016020810190610a4d9190613461565b60039067ffffffffffffffff16611037565b610ac957848482818110610a7557610a75613432565b9050602002016020810190610a8a9190613461565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602401610785565b60026000868684818110610adf57610adf613432565b9050602002016020810190610af49190613461565b67ffffffffffffffff1681526020810191909152604001600090812090610b1b8282612ae2565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610b53600283016000612b00565b5050610b91858583818110610b6a57610b6a613432565b9050602002016020810190610b7f9190613461565b60039067ffffffffffffffff1661104f565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0858583818110610bc557610bc5613432565b9050602002016020810190610bda9190613461565b60405167ffffffffffffffff909116815260200160405180910390a1600101610a1b565b5060005b81811015610dd9576000838383818110610c1e57610c1e613432565b9050602002810190610c30919061347c565b610c3e9060208101906134ba565b610c47906136bc565b80519091506000858585818110610c6057610c60613432565b9050602002810190610c72919061347c565b610c80906020810190613461565b905060005b8251811015610cb857610cb0838281518110610ca357610ca3613432565b602002602001015161105b565b600101610c85565b50826020015160ff16600003610cfa576040517fa9b3766e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff81166000908152600260209081526040909120845180518693610d2a928492910190612b3a565b5060208201516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff90921691909117905560408201516002820190610d7790826137a3565b50610d9191506003905067ffffffffffffffff8316611174565b507f05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e08184604051610dc39291906138bd565b60405180910390a1505050806001019050610c02565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610e4f576040517fac7a7efd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e5d84860186613968565b9050600080610e6b83611180565b8151919350915015610e8357610e83846000846113d9565b805115610e9657610e96846001836113d9565b505050505050505050565b60606000610eae83611bba565b9392505050565b6000610702825490565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610785565b565b3373ffffffffffffffffffffffffffffffffffffffff821603610fc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610785565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008181526001830160205260408120541515610eae565b6000610eae8383611c16565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261112f9190810190613bd9565b6080810151909150611170576040517f8907a4fa00000000000000000000000000000000000000000000000000000000815260048101839052602401610785565b5050565b6000610eae8383611d09565b606080600460ff16835111156111c2576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b6112466040805161014081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b8152602001906001900390816111d857505060408051600280825260608201909252919350602082015b6112de6040805161014081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b81526020019060019003908161127057905050905060008060005b85518110156113cc57600086828151811061131657611316613432565b602002602001015160000151600181111561133357611333612e28565b036113805785818151811061134a5761134a613432565b602002602001015185848151811061136457611364613432565b60200260200101819052508261137990613ce0565b92506113c4565b85818151811061139257611392613432565b60200260200101518483815181106113ac576113ac613432565b6020026020010181905250816113c190613ce0565b91505b6001016112f9565b5090835281529092909150565b63ffffffff831660009081526005602052604081208184600181111561140157611401612e28565b600181111561141257611412612e28565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561189b57600084815260209020604080516101a08101909152600984029091018054829060608201908390829060ff16600181111561148557611485612e28565b600181111561149657611496612e28565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a01000000000000000000009091041660608201526001820180546080909201916114ee906133b0565b80601f016020809104026020016040519081016040528092919081815260200182805461151a906133b0565b80156115675780601f1061153c57610100808354040283529160200191611567565b820191906000526020600020905b81548152906001019060200180831161154a57829003601f168201915b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156115bf57602002820191906000526020600020905b8154815260200190600101908083116115ab575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561161757602002820191906000526020600020905b815481526020019060010190808311611603575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156116f1578382906000526020600020018054611664906133b0565b80601f0160208091040260200160405190810160405280929190818152602001828054611690906133b0565b80156116dd5780601f106116b2576101008083540402835291602001916116dd565b820191906000526020600020905b8154815290600101906020018083116116c057829003601f168201915b505050505081526020019060010190611645565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156117ca57838290600052602060002001805461173d906133b0565b80601f0160208091040260200160405190810160405280929190818152602001828054611769906133b0565b80156117b65780601f1061178b576101008083540402835291602001916117b6565b820191906000526020600020905b81548152906001019060200180831161179957829003601f168201915b50505050508152602001906001019061171e565b5050505081526020016006820180546117e2906133b0565b80601f016020809104026020016040519081016040528092919081815260200182805461180e906133b0565b801561185b5780601f106118305761010080835404028352916020019161185b565b820191906000526020600020905b81548152906001019060200180831161183e57829003601f168201915b505050919092525050508152600782015467ffffffffffffffff166020808301919091526008909201546040909101529082526001929092019101611440565b50505050905060006118ad8251611d58565b905060006118bb8451611d58565b90506118c78282611daa565b60006118d68785878686611e66565b90506118e28482612252565b63ffffffff871660009081526005602052604081209087600181111561190a5761190a612e28565b600181111561191b5761191b612e28565b815260200190815260200160002060006119359190612b85565b60005b8151811015611bb05763ffffffff881660009081526005602052604081209088600181111561196957611969612e28565b600181111561197a5761197a612e28565b815260200190815260200160002082828151811061199a5761199a613432565b6020908102919091018101518254600181810185556000948552929093208151805160099095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115611a0457611a04612e28565b021790555060208201518154604084015160608501517fffffffffffffffffffffffffffffffffffffffffffff000000000000000000ff90921661010067ffffffffffffffff948516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff1617690100000000000000000060ff90921691909102177fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a0100000000000000000000929091169190910217815560808201516001820190611ad390826137a3565b5060a08201518051611aef916002840191602090910190612b3a565b5060c08201518051611b0b916003840191602090910190612b3a565b5060e08201518051611b27916004840191602090910190612ba6565b506101008201518051611b44916005840191602090910190612ba6565b506101208201516006820190611b5a90826137a3565b50505060208201516007820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055604090910151600890910155600101611938565b5050505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611c0a57602002820191906000526020600020905b815481526020019060010190808311611bf6575b50505050509050919050565b60008181526001830160205260408120548015611cff576000611c3a600183613d18565b8554909150600090611c4e90600190613d18565b9050818114611cb3576000866000018281548110611c6e57611c6e613432565b9060005260206000200154905080876000018481548110611c9157611c91613432565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611cc457611cc4613d2b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610702565b6000915050610702565b6000818152600183016020526040812054611d5057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610702565b506000610702565b60006002821115611d98576040517f3e47852600000000000000000000000000000000000000000000000000000000815260048101839052602401610785565b81600281111561070257610702612e28565b6000826002811115611dbe57611dbe612e28565b826002811115611dd057611dd0612e28565b611dda9190613d5a565b90508060011480611e265750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff148015611e2657506002836002811115611e2457611e24612e28565b145b15611e3057505050565b82826040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610785929190613d8a565b60606000845167ffffffffffffffff811115611e8457611e84613403565b604051908082528060200260200182016040528015611ead578160200160208202803683370190505b5090506000846002811115611ec457611ec4612e28565b148015611ee257506001836002811115611ee057611ee0612e28565b145b15611f2357600181600081518110611efc57611efc613432565b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505061208b565b6001846002811115611f3757611f37612e28565b148015611f5557506002836002811115611f5357611f53612e28565b145b15611fec5785600081518110611f6d57611f6d613432565b60200260200101516020015181600081518110611f8c57611f8c613432565b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505085600081518110611fc157611fc1613432565b6020026020010151602001516001611fd99190613da5565b81600181518110611efc57611efc613432565b600284600281111561200057612000612e28565b14801561201e5750600183600281111561201c5761201c612e28565b145b15612055578560018151811061203657612036613432565b60200260200101516020015181600081518110611efc57611efc613432565b83836040517f0a6b675b000000000000000000000000000000000000000000000000000000008152600401610785929190613d8a565b6000855167ffffffffffffffff8111156120a7576120a7613403565b60405190808252806020026020018201604052801561215d57816020015b604080516101a081018252600060608083018281526080840183905260a0840183905260c0840183905260e084018290526101008401829052610120840182905261014084018290526101608401829052610180840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816120c55790505b50905060005b82518110156122465761218e87828151811061218157612181613432565b60200260200101516125d1565b60405180606001604052808883815181106121ab576121ab613432565b602002602001015181526020018483815181106121ca576121ca613432565b602002602001015167ffffffffffffffff16815260200161221e8b8685815181106121f7576121f7613432565b60200260200101518b868151811061221157612211613432565b60200260200101516129c5565b81525082828151811061223357612233613432565b6020908102919091010152600101612163565b50979650505050505050565b81518151811580156122645750806001145b15612306578260008151811061227c5761227c613432565b60200260200101516020015167ffffffffffffffff1660011461230057826000815181106122ac576122ac613432565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260016024820152604401610785565b50505050565b8160011480156123165750806002145b156124cc578360008151811061232e5761232e613432565b6020026020010151604001518360008151811061234d5761234d613432565b602002602001015160400151146123d9578260008151811061237157612371613432565b6020026020010151604001518460008151811061239057612390613432565b6020026020010151604001516040517fc7ccdd7f000000000000000000000000000000000000000000000000000000008152600401610785929190918252602082015260400190565b836000815181106123ec576123ec613432565b60200260200101516020015160016124049190613da5565b67ffffffffffffffff168360018151811061242157612421613432565b60200260200101516020015167ffffffffffffffff1614612300578260018151811061244f5761244f613432565b6020026020010151602001518460008151811061246e5761246e613432565b60200260200101516020015160016124869190613da5565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610785565b8160021480156124dc5750806001145b1561259f57836001815181106124f4576124f4613432565b6020026020010151604001518360008151811061251357612513613432565b60200260200101516040015114612300578260008151811061253757612537613432565b6020026020010151604001518460018151811061255657612556613432565b6020026020010151604001516040517f9e975670000000000000000000000000000000000000000000000000000000008152600401610785929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff16600003612619576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151600181111561262e5761262e612e28565b1415801561264f575060018151600181111561264c5761264c612e28565b14155b15612686576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060800151516000036126c5576040517f358c192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516126e09060039067ffffffffffffffff16611037565b6127285760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9091166004820152602401610785565b60e081015151601f1015612768576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010081015151601f10156127a9576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015167ffffffffffffffff166000908152600290915260408120600101546127d99060ff166003613dc6565b6127e4906001613de2565b60ff1690508082610100015151101561283b57610100820151516040517f548dd21f000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610785565b816040015160ff1660000361287c576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604082015161288c906003613dc6565b60ff168260e0015151116128cc576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160e00151518260c00151511415806128f05750816101000151518260c001515114155b1561294b5760c08201515160e083015151610100840151516040517fba900f6d000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091526044820152606401610785565b8160c00151518260a0015151111561298f576040517f8473d80700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8260e00151518110156129c0576129b88360c001518281518110610ca357610ca3613432565b600101612992565b505050565b60008082602001518584600001518560800151878760a001518860c001518960e001518a61010001518b604001518c606001518d6101200151604051602001612a199c9b9a99989796959493929190613e66565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e0a000000000000000000000000000000000000000000000000000000000000179150509392505050565b6040518060400160405280600067ffffffffffffffff168152602001612add604051806060016040528060608152602001600060ff168152602001606081525090565b905290565b5080546000825590600052602060002090810190610a0d9190612bf8565b508054612b0c906133b0565b6000825580601f10612b1c575050565b601f016020900490600052602060002090810190610a0d9190612bf8565b828054828255906000526020600020908101928215612b75579160200282015b82811115612b75578251825591602001919060010190612b5a565b50612b81929150612bf8565b5090565b5080546000825560090290600052602060002090810190610a0d9190612c0d565b828054828255906000526020600020908101928215612bec579160200282015b82811115612bec5782518290612bdc90826137a3565b5091602001919060010190612bc6565b50612b81929150612cce565b5b80821115612b815760008155600101612bf9565b80821115612b815780547fffffffffffffffffffffffffffff00000000000000000000000000000000000016815560008181612c4c6001830182612b00565b612c5a600283016000612ae2565b612c68600383016000612ae2565b612c76600483016000612ceb565b612c84600583016000612ceb565b612c92600683016000612b00565b5050506007810180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016905560006008820155600901612c0d565b80821115612b81576000612ce28282612b00565b50600101612cce565b5080546000825590600052602060002090810190610a0d9190612cce565b600060208284031215612d1b57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eae57600080fd5b6000815180845260005b81811015612d7157602081850181015186830182015201612d55565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610eae6020830184612d4b565b63ffffffff81168114610a0d57600080fd5b8035612ddf81612dc2565b919050565b803560028110612ddf57600080fd5b60008060408385031215612e0657600080fd5b8235612e1181612dc2565b9150612e1f60208401612de4565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612e6757612e67612e28565b9052565b60008151808452602080850194506020840160005b83811015612e9c57815187529582019590820190600101612e80565b509495945050505050565b60008282518085526020808601955060208260051b8401016020860160005b84811015612f12577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952612f00838351612d4b565b98840198925090830190600101612ec6565b5090979650505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156130ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160608151818652612f8d8287018251612e57565b898101516080612fa88189018367ffffffffffffffff169052565b8a830151915060a0612fbe818a018460ff169052565b938301519360c09250612fdc8984018667ffffffffffffffff169052565b818401519450610140915060e082818b0152612ffc6101a08b0187612d4b565b95508185015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0610100818c890301818d015261303b8885612e6b565b97508587015195506101209350818c890301848d015261305b8887612e6b565b9750828701519550818c890301858d01526130768887612ea7565b975080870151955050808b8803016101608c01526130948786612ea7565b9650828601519550808b8803016101808c015250505050506130b68282612d4b565b915050888201516130d28a87018267ffffffffffffffff169052565b5090870151938701939093529386019390860190600101612f48565b509098975050505050505050565b60006020828403121561310e57600080fd5b8135610eae81612dc2565b600081516060845261312e6060850182612e6b565b905060ff6020840151166020850152604083015184820360408601526131548282612d4b565b95945050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156130ee578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805167ffffffffffffffff1684528701518784018790526131da87850182613119565b9588019593505090860190600101613186565b6000602082840312156131ff57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610eae57600080fd5b60008083601f84011261323557600080fd5b50813567ffffffffffffffff81111561324d57600080fd5b6020830191508360208260051b850101111561326857600080fd5b9250929050565b6000806000806040858703121561328557600080fd5b843567ffffffffffffffff8082111561329d57600080fd5b6132a988838901613223565b909650945060208701359150808211156132c257600080fd5b506132cf87828801613223565b95989497509550505050565b803567ffffffffffffffff81168114612ddf57600080fd5b6000806000806000806080878903121561330c57600080fd5b863567ffffffffffffffff8082111561332457600080fd5b6133308a838b01613223565b9098509650602089013591508082111561334957600080fd5b818901915089601f83011261335d57600080fd5b81358181111561336c57600080fd5b8a602082850101111561337e57600080fd5b602083019650809550505050613396604088016132db565b91506133a460608801612dd4565b90509295509295509295565b600181811c908216806133c457607f821691505b6020821081036133fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561347357600080fd5b610eae826132db565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126134b057600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126134b057600080fd5b604051610140810167ffffffffffffffff8111828210171561351257613512613403565b60405290565b60405160e0810167ffffffffffffffff8111828210171561351257613512613403565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561358257613582613403565b604052919050565b600067ffffffffffffffff8211156135a4576135a4613403565b5060051b60200190565b600082601f8301126135bf57600080fd5b813560206135d46135cf8361358a565b61353b565b8083825260208201915060208460051b8701019350868411156135f657600080fd5b602086015b8481101561361257803583529183019183016135fb565b509695505050505050565b803560ff81168114612ddf57600080fd5b600082601f83011261363f57600080fd5b813567ffffffffffffffff81111561365957613659613403565b61368a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161353b565b81815284602083860101111561369f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000606082360312156136ce57600080fd5b6040516060810167ffffffffffffffff82821081831117156136f2576136f2613403565b81604052843591508082111561370757600080fd5b613713368387016135ae565b83526137216020860161361d565b6020840152604085013591508082111561373a57600080fd5b506137473682860161362e565b60408301525092915050565b601f8211156129c0576000816000526020600020601f850160051c8101602086101561377c5750805b601f850160051c820191505b8181101561379b57828155600101613788565b505050505050565b815167ffffffffffffffff8111156137bd576137bd613403565b6137d1816137cb84546133b0565b84613753565b602080601f83116001811461382457600084156137ee5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561379b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561387157888601518255948401946001909101908401613852565b50858210156138ad57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff831681526040602082015260006138e06040830184613119565b949350505050565b600082601f8301126138f957600080fd5b813560206139096135cf8361358a565b82815260059290921b8401810191818101908684111561392857600080fd5b8286015b8481101561361257803567ffffffffffffffff81111561394c5760008081fd5b61395a8986838b010161362e565b84525091830191830161392c565b6000602080838503121561397b57600080fd5b823567ffffffffffffffff8082111561399357600080fd5b818501915085601f8301126139a757600080fd5b81356139b56135cf8261358a565b81815260059190911b830184019084810190888311156139d457600080fd5b8585015b83811015613b62578035858111156139ef57600080fd5b8601610140818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613a2457600080fd5b613a2c6134ee565b613a37898301612de4565b8152613a45604083016132db565b89820152613a556060830161361d565b6040820152613a66608083016132db565b606082015260a082013587811115613a7d57600080fd5b613a8b8d8b8386010161362e565b60808301525060c082013587811115613aa357600080fd5b613ab18d8b838601016135ae565b60a08301525060e082013587811115613ac957600080fd5b613ad78d8b838601016135ae565b60c0830152506101008083013588811115613af157600080fd5b613aff8e8c838701016138e8565b60e0840152506101208084013589811115613b1957600080fd5b613b278f8d838801016138e8565b8385015250610140840135915088821115613b4157600080fd5b613b4f8e8c8487010161362e565b90830152508452509186019186016139d8565b5098975050505050505050565b8051612ddf81612dc2565b600082601f830112613b8b57600080fd5b81516020613b9b6135cf8361358a565b8083825260208201915060208460051b870101935086841115613bbd57600080fd5b602086015b848110156136125780518352918301918301613bc2565b600060208284031215613beb57600080fd5b815167ffffffffffffffff80821115613c0357600080fd5b9083019060e08286031215613c1757600080fd5b613c1f613518565b613c2883613b6f565b8152613c3660208401613b6f565b6020820152613c4760408401613b6f565b6040820152606083015160608201526080830151608082015260a083015182811115613c7257600080fd5b613c7e87828601613b7a565b60a08301525060c083015182811115613c9657600080fd5b613ca287828601613b7a565b60c08301525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d1157613d11613cb1565b5060010190565b8181038181111561070257610702613cb1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b81810360008312801583831316838312821617156109f5576109f5613cb1565b60038110612e6757612e67612e28565b60408101613d988285613d7a565b610eae6020830184613d7a565b67ffffffffffffffff8181168382160190808211156109f5576109f5613cb1565b60ff81811683821602908116908181146109f5576109f5613cb1565b60ff818116838216019081111561070257610702613cb1565b60008282518085526020808601955060208260051b8401016020860160005b84811015612f12577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952613e54838351612d4b565b98840198925090830190600101613e1a565b67ffffffffffffffff8d16815263ffffffff8c166020820152613e8c604082018c612e57565b61018060608201526000613ea461018083018c612d4b565b67ffffffffffffffff8b16608084015282810360a0840152613ec6818b612e6b565b905082810360c0840152613eda818a612e6b565b905082810360e0840152613eee8189613dfb565b9050828103610100840152613f038188613dfb565b60ff8716610120850152905067ffffffffffffffff8516610140840152828103610160840152613f338185612d4b565b9f9e50505050505050505050505050505056fea164736f6c6343000818000a",
}

var CCIPConfigABI = CCIPConfigMetaData.ABI

var CCIPConfigBin = CCIPConfigMetaData.Bin

func DeployCCIPConfig(auth *bind.TransactOpts, backend bind.ContractBackend, capabilitiesRegistry common.Address) (common.Address, *types.Transaction, *CCIPConfig, error) {
	parsed, err := CCIPConfigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPConfigBin), backend, capabilitiesRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPConfig{address: address, abi: *parsed, CCIPConfigCaller: CCIPConfigCaller{contract: contract}, CCIPConfigTransactor: CCIPConfigTransactor{contract: contract}, CCIPConfigFilterer: CCIPConfigFilterer{contract: contract}}, nil
}

type CCIPConfig struct {
	address common.Address
	abi     abi.ABI
	CCIPConfigCaller
	CCIPConfigTransactor
	CCIPConfigFilterer
}

type CCIPConfigCaller struct {
	contract *bind.BoundContract
}

type CCIPConfigTransactor struct {
	contract *bind.BoundContract
}

type CCIPConfigFilterer struct {
	contract *bind.BoundContract
}

type CCIPConfigSession struct {
	Contract     *CCIPConfig
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPConfigCallerSession struct {
	Contract *CCIPConfigCaller
	CallOpts bind.CallOpts
}

type CCIPConfigTransactorSession struct {
	Contract     *CCIPConfigTransactor
	TransactOpts bind.TransactOpts
}

type CCIPConfigRaw struct {
	Contract *CCIPConfig
}

type CCIPConfigCallerRaw struct {
	Contract *CCIPConfigCaller
}

type CCIPConfigTransactorRaw struct {
	Contract *CCIPConfigTransactor
}

func NewCCIPConfig(address common.Address, backend bind.ContractBackend) (*CCIPConfig, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPConfigABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPConfig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPConfig{address: address, abi: abi, CCIPConfigCaller: CCIPConfigCaller{contract: contract}, CCIPConfigTransactor: CCIPConfigTransactor{contract: contract}, CCIPConfigFilterer: CCIPConfigFilterer{contract: contract}}, nil
}

func NewCCIPConfigCaller(address common.Address, caller bind.ContractCaller) (*CCIPConfigCaller, error) {
	contract, err := bindCCIPConfig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigCaller{contract: contract}, nil
}

func NewCCIPConfigTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPConfigTransactor, error) {
	contract, err := bindCCIPConfig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigTransactor{contract: contract}, nil
}

func NewCCIPConfigFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPConfigFilterer, error) {
	contract, err := bindCCIPConfig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigFilterer{contract: contract}, nil
}

func bindCCIPConfig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPConfigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPConfig *CCIPConfigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPConfig.Contract.CCIPConfigCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPConfig *CCIPConfigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.Contract.CCIPConfigTransactor.contract.Transfer(opts)
}

func (_CCIPConfig *CCIPConfigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPConfig.Contract.CCIPConfigTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPConfig *CCIPConfigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPConfig.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPConfig *CCIPConfigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.Contract.contract.Transfer(opts)
}

func (_CCIPConfig *CCIPConfigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPConfig.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPConfig *CCIPConfigCaller) GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPConfigChainConfigInfo, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getAllChainConfigs")

	if err != nil {
		return *new([]CCIPConfigChainConfigInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPConfigChainConfigInfo)).(*[]CCIPConfigChainConfigInfo)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetAllChainConfigs() ([]CCIPConfigChainConfigInfo, error) {
	return _CCIPConfig.Contract.GetAllChainConfigs(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetAllChainConfigs() ([]CCIPConfigChainConfigInfo, error) {
	return _CCIPConfig.Contract.GetAllChainConfigs(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPConfig.Contract.GetCapabilityConfiguration(&_CCIPConfig.CallOpts, arg0)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPConfig.Contract.GetCapabilityConfiguration(&_CCIPConfig.CallOpts, arg0)
}

func (_CCIPConfig *CCIPConfigCaller) GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPConfigOCR3ConfigWithMeta, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getOCRConfig", donId, pluginType)

	if err != nil {
		return *new([]CCIPConfigOCR3ConfigWithMeta), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPConfigOCR3ConfigWithMeta)).(*[]CCIPConfigOCR3ConfigWithMeta)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPConfigOCR3ConfigWithMeta, error) {
	return _CCIPConfig.Contract.GetOCRConfig(&_CCIPConfig.CallOpts, donId, pluginType)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPConfigOCR3ConfigWithMeta, error) {
	return _CCIPConfig.Contract.GetOCRConfig(&_CCIPConfig.CallOpts, donId, pluginType)
}

func (_CCIPConfig *CCIPConfigCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) Owner() (common.Address, error) {
	return _CCIPConfig.Contract.Owner(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) Owner() (common.Address, error) {
	return _CCIPConfig.Contract.Owner(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPConfig.Contract.SupportsInterface(&_CCIPConfig.CallOpts, interfaceId)
}

func (_CCIPConfig *CCIPConfigCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPConfig.Contract.SupportsInterface(&_CCIPConfig.CallOpts, interfaceId)
}

func (_CCIPConfig *CCIPConfigCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) TypeAndVersion() (string, error) {
	return _CCIPConfig.Contract.TypeAndVersion(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) TypeAndVersion() (string, error) {
	return _CCIPConfig.Contract.TypeAndVersion(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPConfig *CCIPConfigSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPConfig.Contract.AcceptOwnership(&_CCIPConfig.TransactOpts)
}

func (_CCIPConfig *CCIPConfigTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPConfig.Contract.AcceptOwnership(&_CCIPConfig.TransactOpts)
}

func (_CCIPConfig *CCIPConfigTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "applyChainConfigUpdates", chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.Contract.ApplyChainConfigUpdates(&_CCIPConfig.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigTransactorSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.Contract.ApplyChainConfigUpdates(&_CCIPConfig.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.Contract.BeforeCapabilityConfigSet(&_CCIPConfig.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.Contract.BeforeCapabilityConfigSet(&_CCIPConfig.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPConfig *CCIPConfigSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.Contract.TransferOwnership(&_CCIPConfig.TransactOpts, to)
}

func (_CCIPConfig *CCIPConfigTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.Contract.TransferOwnership(&_CCIPConfig.TransactOpts, to)
}

type CCIPConfigCapabilityConfigurationSetIterator struct {
	Event *CCIPConfigCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPConfigCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigCapabilityConfigurationSetIterator{contract: _CCIPConfig.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigCapabilityConfigurationSet)
				if err := _CCIPConfig.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPConfigCapabilityConfigurationSet, error) {
	event := new(CCIPConfigCapabilityConfigurationSet)
	if err := _CCIPConfig.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigChainConfigRemovedIterator struct {
	Event *CCIPConfigChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPConfigChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigChainConfigRemovedIterator{contract: _CCIPConfig.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigChainConfigRemoved)
				if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPConfigChainConfigRemoved, error) {
	event := new(CCIPConfigChainConfigRemoved)
	if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigChainConfigSetIterator struct {
	Event *CCIPConfigChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPConfigChainConfig
	Raw           types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPConfigChainConfigSetIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigChainConfigSetIterator{contract: _CCIPConfig.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigChainConfigSet)
				if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseChainConfigSet(log types.Log) (*CCIPConfigChainConfigSet, error) {
	event := new(CCIPConfigChainConfigSet)
	if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigOwnershipTransferRequestedIterator struct {
	Event *CCIPConfigOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigOwnershipTransferRequestedIterator{contract: _CCIPConfig.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigOwnershipTransferRequested)
				if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPConfigOwnershipTransferRequested, error) {
	event := new(CCIPConfigOwnershipTransferRequested)
	if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigOwnershipTransferredIterator struct {
	Event *CCIPConfigOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigOwnershipTransferredIterator{contract: _CCIPConfig.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigOwnershipTransferred)
				if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPConfigOwnershipTransferred, error) {
	event := new(CCIPConfigOwnershipTransferred)
	if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPConfig *CCIPConfig) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPConfig.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPConfig.ParseCapabilityConfigurationSet(log)
	case _CCIPConfig.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPConfig.ParseChainConfigRemoved(log)
	case _CCIPConfig.abi.Events["ChainConfigSet"].ID:
		return _CCIPConfig.ParseChainConfigSet(log)
	case _CCIPConfig.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPConfig.ParseOwnershipTransferRequested(log)
	case _CCIPConfig.abi.Events["OwnershipTransferred"].ID:
		return _CCIPConfig.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPConfigCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPConfigChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPConfigChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e0")
}

func (CCIPConfigOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPConfigOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPConfig *CCIPConfig) Address() common.Address {
	return _CCIPConfig.address
}

type CCIPConfigInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts) ([]CCIPConfigChainConfigInfo, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error)

	GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPConfigOCR3ConfigWithMeta, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigChainConfigInfo) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPConfigCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPConfigCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPConfigChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPConfigChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPConfigChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPConfigChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPConfigOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPConfigOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
