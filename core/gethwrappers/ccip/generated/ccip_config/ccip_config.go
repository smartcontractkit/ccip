// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ccip_config

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CCIPConfigTypesChainConfig struct {
	Readers [][32]byte
	FChain  uint8
	Config  []byte
}

type CCIPConfigTypesChainConfigInfo struct {
	ChainSelector uint64
	ChainConfig   CCIPConfigTypesChainConfig
}

type CCIPConfigTypesOCR3Config struct {
	PluginType            uint8
	ChainSelector         uint64
	F                     uint8
	OffchainConfigVersion uint64
	OfframpAddress        []byte
	BootstrapP2PIds       [][32]byte
	P2pIds                [][32]byte
	Signers               [][]byte
	Transmitters          [][]byte
	OffchainConfig        []byte
}

type CCIPConfigTypesOCR3ConfigWithMeta struct {
	Config       CCIPConfigTypesOCR3Config
	ConfigCount  uint64
	ConfigDigest [32]byte
}

var CCIPConfigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capabilitiesRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainSelectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FChainMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidConfigLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumCCIPConfigTypes.ConfigState\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"enumCCIPConfigTypes.ConfigState\",\"name\":\"proposedState\",\"type\":\"uint8\"}],\"name\":\"InvalidConfigStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"}],\"name\":\"NodeNotInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentConfigTransition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"set\",\"type\":\"bytes32[]\"}],\"name\":\"NotASortedSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"subset\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"superset\",\"type\":\"bytes32[]\"}],\"name\":\"NotASubset\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTransmitters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfframpAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCapabilitiesRegistryCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pIdsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transmittersLength\",\"type\":\"uint256\"}],\"name\":\"P2PIdsLengthNotMatching\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyBootstrapP2PIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyOCR3Configs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTransmitters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"WrongConfigCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"got\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"WrongConfigDigestBlueGreen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapabilityConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structCCIPConfigTypes.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"chainSelectorRemoves\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfigTypes.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPConfigTypes.ChainConfigInfo[]\",\"name\":\"chainConfigAdds\",\"type\":\"tuple[]\"}],\"name\":\"applyChainConfigUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"}],\"name\":\"beforeCapabilityConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getAllChainConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"readers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"fChain\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfigTypes.ChainConfig\",\"name\":\"chainConfig\",\"type\":\"tuple\"}],\"internalType\":\"structCCIPConfigTypes.ChainConfigInfo[]\",\"name\":\"paginatedChainConfigs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"getCapabilityConfiguration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"configuration\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapabilityRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"capabilitiesRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"donId\",\"type\":\"uint32\"},{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"}],\"name\":\"getOCRConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enumInternal.OCRPluginType\",\"name\":\"pluginType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"F\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offrampAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"bootstrapP2PIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"p2pIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signers\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"transmitters\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"structCCIPConfigTypes.OCR3Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIPConfigTypes.OCR3ConfigWithMeta[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620044bd380380620044bd8339810160408190526200003491620001a6565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000fb565b5050506001600160a01b038116620000e9576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0316608052620001d8565b336001600160a01b03821603620001555760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600060208284031215620001b957600080fd5b81516001600160a01b0381168114620001d157600080fd5b9392505050565b6080516142bc620002016000396000818160f801528181610f2c01526111c101526142bc6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638318ed5d11610081578063f2fde38b1161005b578063f2fde38b1461020f578063f442c89a14610222578063fba64a7c1461023557600080fd5b80638318ed5d146101b05780638da5cb5b146101d1578063b74b2356146101ef57600080fd5b8063181f5a77116100b2578063181f5a771461013d5780634bd0473f1461018657806379ba5097146101a657600080fd5b806301ffc9a7146100ce578063020330e6146100f6575b600080fd5b6100e16100dc366004613059565b610248565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6101796040518060400160405280601481526020017f43434950436f6e66696720312e362e302d64657600000000000000000000000081525081565b6040516100ed91906130ff565b610199610194366004613143565b6102e1565b6040516100ed919061326f565b6101ae6107b1565b005b6101796101be36600461344c565b5060408051602081019091526000815290565b60005473ffffffffffffffffffffffffffffffffffffffff16610118565b6102026101fd366004613469565b6108b3565b6040516100ed91906134cf565b6101ae61021d36600461355f565b610b30565b6101ae6102303660046135e1565b610b44565b6101ae610243366004613665565b610f14565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f78bea7210000000000000000000000000000000000000000000000000000000014806102db57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b63ffffffff8216600090815260056020526040812060609183600181111561030b5761030b613178565b600181111561031c5761031c613178565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156107a557600084815260209020604080516101a08101909152600984029091018054829060608201908390829060ff16600181111561038f5761038f613178565b60018111156103a0576103a0613178565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a01000000000000000000009091041660608201526001820180546080909201916103f890613722565b80601f016020809104026020016040519081016040528092919081815260200182805461042490613722565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156104c957602002820191906000526020600020905b8154815260200190600101908083116104b5575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561052157602002820191906000526020600020905b81548152602001906001019080831161050d575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156105fb57838290600052602060002001805461056e90613722565b80601f016020809104026020016040519081016040528092919081815260200182805461059a90613722565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b50505050508152602001906001019061054f565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156106d457838290600052602060002001805461064790613722565b80601f016020809104026020016040519081016040528092919081815260200182805461067390613722565b80156106c05780601f10610695576101008083540402835291602001916106c0565b820191906000526020600020905b8154815290600101906020018083116106a357829003601f168201915b505050505081526020019060010190610628565b5050505081526020016006820180546106ec90613722565b80601f016020809104026020016040519081016040528092919081815260200182805461071890613722565b80156107655780601f1061073a57610100808354040283529160200191610765565b820191906000526020600020905b81548152906001019060200180831161074857829003601f168201915b505050919092525050508152600782015467ffffffffffffffff16602080830191909152600890920154604090910152908252600192909201910161034a565b50505050905092915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060006108c16003610fd5565b905060006108cf84866137a4565b90508315806108de5750818110155b1561091e576040805160008082526020820190925290610914565b610901612dea565b8152602001906001900390816108f95790505b50925050506102db565b600061092a85836137ea565b9050828111156109375750815b61094182826137fd565b67ffffffffffffffff811115610959576109596137bb565b60405190808252806020026020018201604052801561099257816020015b61097f612dea565b8152602001906001900390816109775790505b50935060006109a16003610fdf565b9050825b82811015610b255760008282815181106109c1576109c1613810565b60209081029190910181015160408051808201825267ffffffffffffffff831680825260009081526002855282902082518154608081880283018101909552606082018181529597509295860194909391928492849190840182828015610a4757602002820191906000526020600020905b815481526020019060010190808311610a33575b5050509183525050600182015460ff166020820152600282018054604090920191610a7190613722565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9d90613722565b8015610aea5780601f10610abf57610100808354040283529160200191610aea565b820191906000526020600020905b815481529060010190602001808311610acd57829003601f168201915b50505091909252505050905287610b0187856137fd565b81518110610b1157610b11613810565b6020908102919091010152506001016109a5565b505050505092915050565b610b38610ff3565b610b4181611076565b50565b610b4c610ff3565b60005b83811015610d3257610b93858583818110610b6c57610b6c613810565b9050602002016020810190610b81919061383f565b60039067ffffffffffffffff1661116b565b610bfd57848482818110610ba957610ba9613810565b9050602002016020810190610bbe919061383f565b6040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260240161082e565b60026000868684818110610c1357610c13613810565b9050602002016020810190610c28919061383f565b67ffffffffffffffff1681526020810191909152604001600090812090610c4f8282612e32565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610c87600283016000612e50565b5050610cc5858583818110610c9e57610c9e613810565b9050602002016020810190610cb3919061383f565b60039067ffffffffffffffff16611183565b507f2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0858583818110610cf957610cf9613810565b9050602002016020810190610d0e919061383f565b60405167ffffffffffffffff909116815260200160405180910390a1600101610b4f565b5060005b81811015610f0d576000838383818110610d5257610d52613810565b9050602002810190610d64919061385a565b610d72906020810190613898565b610d7b90613a9a565b80519091506000858585818110610d9457610d94613810565b9050602002810190610da6919061385a565b610db490602081019061383f565b905060005b8251811015610dec57610de4838281518110610dd757610dd7613810565b602002602001015161118f565b600101610db9565b50826020015160ff16600003610e2e576040517fa9b3766e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff81166000908152600260209081526040909120845180518693610e5e928492910190612e8a565b5060208201516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff90921691909117905560408201516002820190610eab9082613b81565b50610ec591506003905067ffffffffffffffff83166112a8565b507f05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e08184604051610ef7929190613c9b565b60405180910390a1505050806001019050610d36565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610f83576040517fac7a7efd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f9184860186613d46565b9050600080610f9f836112b4565b8151919350915015610fb757610fb78460008461150d565b805115610fca57610fca8460018361150d565b505050505050505050565b60006102db825490565b60606000610fec83611cee565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161082e565b565b3373ffffffffffffffffffffffffffffffffffffffff8216036110f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161082e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008181526001830160205260408120541515610fec565b6000610fec8383611d4a565b6040517f50c946fe000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906350c946fe90602401600060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112639190810190613fb7565b60808101519091506112a4576040517f8907a4fa0000000000000000000000000000000000000000000000000000000081526004810183905260240161082e565b5050565b6000610fec8383611e44565b606080600460ff16835111156112f6576040517f8854586400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820190925290816020015b61137a6040805161014081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b81526020019060019003908161130c57505060408051600280825260608201909252919350602082015b6114126040805161014081019091528060008152602001600067ffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b8152602001906001900390816113a457905050905060008060005b855181101561150057600086828151811061144a5761144a613810565b602002602001015160000151600181111561146757611467613178565b036114b45785818151811061147e5761147e613810565b602002602001015185848151811061149857611498613810565b6020026020010181905250826114ad9061408f565b92506114f8565b8581815181106114c6576114c6613810565b60200260200101518483815181106114e0576114e0613810565b6020026020010181905250816114f59061408f565b91505b60010161142d565b5090835281529092909150565b63ffffffff831660009081526005602052604081208184600181111561153557611535613178565b600181111561154657611546613178565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156119cf57600084815260209020604080516101a08101909152600984029091018054829060608201908390829060ff1660018111156115b9576115b9613178565b60018111156115ca576115ca613178565b8152815467ffffffffffffffff61010082048116602084015260ff690100000000000000000083041660408401526a010000000000000000000090910416606082015260018201805460809092019161162290613722565b80601f016020809104026020016040519081016040528092919081815260200182805461164e90613722565b801561169b5780601f106116705761010080835404028352916020019161169b565b820191906000526020600020905b81548152906001019060200180831161167e57829003601f168201915b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156116f357602002820191906000526020600020905b8154815260200190600101908083116116df575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561174b57602002820191906000526020600020905b815481526020019060010190808311611737575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561182557838290600052602060002001805461179890613722565b80601f01602080910402602001604051908101604052809291908181526020018280546117c490613722565b80156118115780601f106117e657610100808354040283529160200191611811565b820191906000526020600020905b8154815290600101906020018083116117f457829003601f168201915b505050505081526020019060010190611779565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156118fe57838290600052602060002001805461187190613722565b80601f016020809104026020016040519081016040528092919081815260200182805461189d90613722565b80156118ea5780601f106118bf576101008083540402835291602001916118ea565b820191906000526020600020905b8154815290600101906020018083116118cd57829003601f168201915b505050505081526020019060010190611852565b50505050815260200160068201805461191690613722565b80601f016020809104026020016040519081016040528092919081815260200182805461194290613722565b801561198f5780601f106119645761010080835404028352916020019161198f565b820191906000526020600020905b81548152906001019060200180831161197257829003601f168201915b505050919092525050508152600782015467ffffffffffffffff166020808301919091526008909201546040909101529082526001929092019101611574565b50505050905060006119e18251611e93565b905060006119ef8451611e93565b90506119fb8282611ee5565b6000611a0a8785878686611fa1565b9050611a16848261238a565b63ffffffff8716600090815260056020526040812090876001811115611a3e57611a3e613178565b6001811115611a4f57611a4f613178565b81526020019081526020016000206000611a699190612ed5565b60005b8151811015611ce45763ffffffff8816600090815260056020526040812090886001811115611a9d57611a9d613178565b6001811115611aae57611aae613178565b8152602001908152602001600020828281518110611ace57611ace613810565b6020908102919091018101518254600181810185556000948552929093208151805160099095029091018054929490939192849283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115611b3857611b38613178565b021790555060208201518154604084015160608501517fffffffffffffffffffffffffffffffffffffffffffff000000000000000000ff90921661010067ffffffffffffffff948516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff1617690100000000000000000060ff90921691909102177fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a0100000000000000000000929091169190910217815560808201516001820190611c079082613b81565b5060a08201518051611c23916002840191602090910190612e8a565b5060c08201518051611c3f916003840191602090910190612e8a565b5060e08201518051611c5b916004840191602090910190612ef6565b506101008201518051611c78916005840191602090910190612ef6565b506101208201516006820190611c8e9082613b81565b50505060208201516007820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055604090910151600890910155600101611a6c565b5050505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611d3e57602002820191906000526020600020905b815481526020019060010190808311611d2a575b50505050509050919050565b60008181526001830160205260408120548015611e33576000611d6e6001836137fd565b8554909150600090611d82906001906137fd565b9050808214611de7576000866000018281548110611da257611da2613810565b9060005260206000200154905080876000018481548110611dc557611dc5613810565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611df857611df86140c7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102db565b60009150506102db565b5092915050565b6000818152600183016020526040812054611e8b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102db565b5060006102db565b60006002821115611ed3576040517f3e4785260000000000000000000000000000000000000000000000000000000081526004810183905260240161082e565b8160028111156102db576102db613178565b6000826002811115611ef957611ef9613178565b826002811115611f0b57611f0b613178565b611f1591906140f6565b90508060011480611f615750807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff148015611f6157506002836002811115611f5f57611f5f613178565b145b15611f6b57505050565b82826040517f0a6b675b00000000000000000000000000000000000000000000000000000000815260040161082e929190614126565b60606000845167ffffffffffffffff811115611fbf57611fbf6137bb565b604051908082528060200260200182016040528015611fe8578160200160208202803683370190505b5090506000846002811115611fff57611fff613178565b14801561201d5750600183600281111561201b5761201b613178565b145b1561205e5760018160008151811061203757612037613810565b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250506121c6565b600184600281111561207257612072613178565b1480156120905750600283600281111561208e5761208e613178565b145b1561212757856000815181106120a8576120a8613810565b602002602001015160200151816000815181106120c7576120c7613810565b602002602001019067ffffffffffffffff16908167ffffffffffffffff1681525050856000815181106120fc576120fc613810565b60200260200101516020015160016121149190614141565b8160018151811061203757612037613810565b600284600281111561213b5761213b613178565b1480156121595750600183600281111561215757612157613178565b145b15612190578560018151811061217157612171613810565b6020026020010151602001518160008151811061203757612037613810565b83836040517f0a6b675b00000000000000000000000000000000000000000000000000000000815260040161082e929190614126565b845167ffffffffffffffff8111156121e0576121e06137bb565b60405190808252806020026020018201604052801561229657816020015b604080516101a081018252600060608083018281526080840183905260a0840183905260c0840183905260e084018290526101008401829052610120840182905261014084018290526101608401829052610180840191909152825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816121fe5790505b50915060005b815181101561237f576122c78682815181106122ba576122ba613810565b6020026020010151612709565b60405180606001604052808783815181106122e4576122e4613810565b6020026020010151815260200183838151811061230357612303613810565b602002602001015167ffffffffffffffff1681526020016123578a85858151811061233057612330613810565b60200260200101518a868151811061234a5761234a613810565b6020026020010151612b0f565b81525083828151811061236c5761236c613810565b602090810291909101015260010161229c565b505095945050505050565b815181518115801561239c5750806001145b1561243e57826000815181106123b4576123b4613810565b60200260200101516020015167ffffffffffffffff1660011461243857826000815181106123e4576123e4613810565b60209081029190910181015101516040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526001602482015260440161082e565b50505050565b81600114801561244e5750806002145b15612604578360008151811061246657612466613810565b6020026020010151604001518360008151811061248557612485613810565b6020026020010151604001511461251157826000815181106124a9576124a9613810565b602002602001015160400151846000815181106124c8576124c8613810565b6020026020010151604001516040517fc7ccdd7f00000000000000000000000000000000000000000000000000000000815260040161082e929190918252602082015260400190565b8360008151811061252457612524613810565b602002602001015160200151600161253c9190614141565b67ffffffffffffffff168360018151811061255957612559613810565b60200260200101516020015167ffffffffffffffff1614612438578260018151811061258757612587613810565b602002602001015160200151846000815181106125a6576125a6613810565b60200260200101516020015160016125be9190614141565b6040517fc1658eb800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015260440161082e565b8160021480156126145750806001145b156126d7578360018151811061262c5761262c613810565b6020026020010151604001518360008151811061264b5761264b613810565b60200260200101516040015114612438578260008151811061266f5761266f613810565b6020026020010151604001518460018151811061268e5761268e613810565b6020026020010151604001516040517f9e97567000000000000000000000000000000000000000000000000000000000815260040161082e929190918252602082015260400190565b6040517f1f1b2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff16600003612751576040517f698cf8e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151600181111561276657612766613178565b14158015612787575060018151600181111561278457612784613178565b14155b156127be576040517f3302dbd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060800151516000036127fd576040517f358c192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516128189060039067ffffffffffffffff1661116b565b6128605760208101516040517f1bd4d2d200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015260240161082e565b60e081015151601f10156128a0576040517f1b925da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010081015151601f10156128e1576040517f645960ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015167ffffffffffffffff166000908152600290915260408120600101546129119060ff166003614162565b61291c90600161417e565b60ff1690508082610100015151101561297357610100820151516040517f548dd21f00000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161082e565b816040015160ff166000036129b4576040517f39d1a4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201516129c4906003614162565b60ff168260e001515111612a04576040517f4856694e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160e00151518260c0015151141580612a285750816101000151518260c001515114155b15612a835760c08201515160e083015151610100840151516040517fba900f6d00000000000000000000000000000000000000000000000000000000815260048101939093526024830191909152604482015260640161082e565b8160c00151518260a00151511115612ac7576040517f8473d80700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ad98260a001518360c00151612be4565b60005b8260e0015151811015612b0a57612b028360c001518281518110610dd757610dd7613810565b600101612adc565b505050565b60008082602001518584600001518560800151878760a001518860c001518960e001518a61010001518b604001518c606001518d6101200151604051602001612b639c9b9a99989796959493929190614197565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e0a000000000000000000000000000000000000000000000000000000000000179150509392505050565b81511580612bf157508051155b15612c28576040517fe249684100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c3182612d5f565b612c3a81612d5f565b6000805b835182108015612c4e5750825181105b15612d2057828181518110612c6557612c65613810565b6020026020010151848381518110612c7f57612c7f613810565b60200260200101511115612c9d57612c968161408f565b9050612c3e565b828181518110612caf57612caf613810565b6020026020010151848381518110612cc957612cc9613810565b602002602001015103612cea57612cdf8261408f565b9150612c968161408f565b83836040517fd671700c00000000000000000000000000000000000000000000000000000000815260040161082e929190614277565b83518210156124385783836040517fd671700c00000000000000000000000000000000000000000000000000000000815260040161082e929190614277565b60015b81518110156112a45781612d776001836137fd565b81518110612d8757612d87613810565b6020026020010151828281518110612da157612da1613810565b602002602001015111612de257816040517f1bc41b4200000000000000000000000000000000000000000000000000000000815260040161082e919061429c565b600101612d62565b6040518060400160405280600067ffffffffffffffff168152602001612e2d604051806060016040528060608152602001600060ff168152602001606081525090565b905290565b5080546000825590600052602060002090810190610b419190612f48565b508054612e5c90613722565b6000825580601f10612e6c575050565b601f016020900490600052602060002090810190610b419190612f48565b828054828255906000526020600020908101928215612ec5579160200282015b82811115612ec5578251825591602001919060010190612eaa565b50612ed1929150612f48565b5090565b5080546000825560090290600052602060002090810190610b419190612f5d565b828054828255906000526020600020908101928215612f3c579160200282015b82811115612f3c5782518290612f2c9082613b81565b5091602001919060010190612f16565b50612ed192915061301e565b5b80821115612ed15760008155600101612f49565b80821115612ed15780547fffffffffffffffffffffffffffff00000000000000000000000000000000000016815560008181612f9c6001830182612e50565b612faa600283016000612e32565b612fb8600383016000612e32565b612fc660048301600061303b565b612fd460058301600061303b565b612fe2600683016000612e50565b5050506007810180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016905560006008820155600901612f5d565b80821115612ed15760006130328282612e50565b5060010161301e565b5080546000825590600052602060002090810190610b41919061301e565b60006020828403121561306b57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fec57600080fd5b6000815180845260005b818110156130c1576020818501810151868301820152016130a5565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610fec602083018461309b565b63ffffffff81168114610b4157600080fd5b803561312f81613112565b919050565b80356002811061312f57600080fd5b6000806040838503121561315657600080fd5b823561316181613112565b915061316f60208401613134565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106131b7576131b7613178565b9052565b60008151808452602080850194506020840160005b838110156131ec578151875295820195908201906001016131d0565b509495945050505050565b60008282518085526020808601955060208260051b8401016020860160005b84811015613262577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086840301895261325083835161309b565b98840198925090830190600101613216565b5090979650505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561343e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08984030185528151606081518186526132dd82870182516131a7565b8981015160806132f88189018367ffffffffffffffff169052565b8a830151915060a061330e818a018460ff169052565b938301519360c0925061332c8984018667ffffffffffffffff169052565b818401519450610140915060e082818b015261334c6101a08b018761309b565b95508185015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0610100818c890301818d015261338b88856131bb565b97508587015195506101209350818c890301848d01526133ab88876131bb565b9750828701519550818c890301858d01526133c688876131f7565b975080870151955050808b8803016101608c01526133e487866131f7565b9650828601519550808b8803016101808c01525050505050613406828261309b565b915050888201516134228a87018267ffffffffffffffff169052565b5090870151938701939093529386019390860190600101613298565b509098975050505050505050565b60006020828403121561345e57600080fd5b8135610fec81613112565b6000806040838503121561347c57600080fd5b50508035926020909101359150565b60008151606084526134a060608501826131bb565b905060ff6020840151166020850152604083015184820360408601526134c6828261309b565b95945050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561343e578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805167ffffffffffffffff16845287015187840187905261354c8785018261348b565b95880195935050908601906001016134f8565b60006020828403121561357157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610fec57600080fd5b60008083601f8401126135a757600080fd5b50813567ffffffffffffffff8111156135bf57600080fd5b6020830191508360208260051b85010111156135da57600080fd5b9250929050565b600080600080604085870312156135f757600080fd5b843567ffffffffffffffff8082111561360f57600080fd5b61361b88838901613595565b9096509450602087013591508082111561363457600080fd5b5061364187828801613595565b95989497509550505050565b803567ffffffffffffffff8116811461312f57600080fd5b6000806000806000806080878903121561367e57600080fd5b863567ffffffffffffffff8082111561369657600080fd5b6136a28a838b01613595565b909850965060208901359150808211156136bb57600080fd5b818901915089601f8301126136cf57600080fd5b8135818111156136de57600080fd5b8a60208285010111156136f057600080fd5b6020830196508095505050506137086040880161364d565b915061371660608801613124565b90509295509295509295565b600181811c9082168061373657607f821691505b60208210810361376f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102db576102db613775565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b808201808211156102db576102db613775565b818103818111156102db576102db613775565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561385157600080fd5b610fec8261364d565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261388e57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261388e57600080fd5b604051610140810167ffffffffffffffff811182821017156138f0576138f06137bb565b60405290565b60405160e0810167ffffffffffffffff811182821017156138f0576138f06137bb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613960576139606137bb565b604052919050565b600067ffffffffffffffff821115613982576139826137bb565b5060051b60200190565b600082601f83011261399d57600080fd5b813560206139b26139ad83613968565b613919565b8083825260208201915060208460051b8701019350868411156139d457600080fd5b602086015b848110156139f057803583529183019183016139d9565b509695505050505050565b803560ff8116811461312f57600080fd5b600082601f830112613a1d57600080fd5b813567ffffffffffffffff811115613a3757613a376137bb565b613a6860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613919565b818152846020838601011115613a7d57600080fd5b816020850160208301376000918101602001919091529392505050565b600060608236031215613aac57600080fd5b6040516060810167ffffffffffffffff8282108183111715613ad057613ad06137bb565b816040528435915080821115613ae557600080fd5b613af13683870161398c565b8352613aff602086016139fb565b60208401526040850135915080821115613b1857600080fd5b50613b2536828601613a0c565b60408301525092915050565b601f821115612b0a576000816000526020600020601f850160051c81016020861015613b5a5750805b601f850160051c820191505b81811015613b7957828155600101613b66565b505050505050565b815167ffffffffffffffff811115613b9b57613b9b6137bb565b613baf81613ba98454613722565b84613b31565b602080601f831160018114613c025760008415613bcc5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613b79565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613c4f57888601518255948401946001909101908401613c30565b5085821015613c8b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83168152604060208201526000613cbe604083018461348b565b949350505050565b600082601f830112613cd757600080fd5b81356020613ce76139ad83613968565b82815260059290921b84018101918181019086841115613d0657600080fd5b8286015b848110156139f057803567ffffffffffffffff811115613d2a5760008081fd5b613d388986838b0101613a0c565b845250918301918301613d0a565b60006020808385031215613d5957600080fd5b823567ffffffffffffffff80821115613d7157600080fd5b818501915085601f830112613d8557600080fd5b8135613d936139ad82613968565b81815260059190911b83018401908481019088831115613db257600080fd5b8585015b83811015613f4057803585811115613dcd57600080fd5b8601610140818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613e0257600080fd5b613e0a6138cc565b613e15898301613134565b8152613e236040830161364d565b89820152613e33606083016139fb565b6040820152613e446080830161364d565b606082015260a082013587811115613e5b57600080fd5b613e698d8b83860101613a0c565b60808301525060c082013587811115613e8157600080fd5b613e8f8d8b8386010161398c565b60a08301525060e082013587811115613ea757600080fd5b613eb58d8b8386010161398c565b60c0830152506101008083013588811115613ecf57600080fd5b613edd8e8c83870101613cc6565b60e0840152506101208084013589811115613ef757600080fd5b613f058f8d83880101613cc6565b8385015250610140840135915088821115613f1f57600080fd5b613f2d8e8c84870101613a0c565b9083015250845250918601918601613db6565b5098975050505050505050565b805161312f81613112565b600082601f830112613f6957600080fd5b81516020613f796139ad83613968565b8083825260208201915060208460051b870101935086841115613f9b57600080fd5b602086015b848110156139f05780518352918301918301613fa0565b600060208284031215613fc957600080fd5b815167ffffffffffffffff80821115613fe157600080fd5b9083019060e08286031215613ff557600080fd5b613ffd6138f6565b61400683613f4d565b815261401460208401613f4d565b602082015261402560408401613f4d565b6040820152606083015160608201526080830151608082015260a08301518281111561405057600080fd5b61405c87828601613f58565b60a08301525060c08301518281111561407457600080fd5b61408087828601613f58565b60c08301525095945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140c0576140c0613775565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b8181036000831280158383131683831282161715611e3d57611e3d613775565b600381106131b7576131b7613178565b604081016141348285614116565b610fec6020830184614116565b67ffffffffffffffff818116838216019080821115611e3d57611e3d613775565b60ff8181168382160290811690818114611e3d57611e3d613775565b60ff81811683821601908111156102db576102db613775565b67ffffffffffffffff8d16815263ffffffff8c1660208201526141bd604082018c6131a7565b610180606082015260006141d561018083018c61309b565b67ffffffffffffffff8b16608084015282810360a08401526141f7818b6131bb565b905082810360c084015261420b818a6131bb565b905082810360e084015261421f81896131f7565b905082810361010084015261423481886131f7565b60ff8716610120850152905067ffffffffffffffff8516610140840152828103610160840152614264818561309b565b9f9e505050505050505050505050505050565b60408152600061428a60408301856131bb565b82810360208401526134c681856131bb565b602081526000610fec60208301846131bb56fea164736f6c6343000818000a",
}

var CCIPConfigABI = CCIPConfigMetaData.ABI

var CCIPConfigBin = CCIPConfigMetaData.Bin

func DeployCCIPConfig(auth *bind.TransactOpts, backend bind.ContractBackend, capabilitiesRegistry common.Address) (common.Address, *types.Transaction, *CCIPConfig, error) {
	parsed, err := CCIPConfigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CCIPConfigBin), backend, capabilitiesRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CCIPConfig{address: address, abi: *parsed, CCIPConfigCaller: CCIPConfigCaller{contract: contract}, CCIPConfigTransactor: CCIPConfigTransactor{contract: contract}, CCIPConfigFilterer: CCIPConfigFilterer{contract: contract}}, nil
}

type CCIPConfig struct {
	address common.Address
	abi     abi.ABI
	CCIPConfigCaller
	CCIPConfigTransactor
	CCIPConfigFilterer
}

type CCIPConfigCaller struct {
	contract *bind.BoundContract
}

type CCIPConfigTransactor struct {
	contract *bind.BoundContract
}

type CCIPConfigFilterer struct {
	contract *bind.BoundContract
}

type CCIPConfigSession struct {
	Contract     *CCIPConfig
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CCIPConfigCallerSession struct {
	Contract *CCIPConfigCaller
	CallOpts bind.CallOpts
}

type CCIPConfigTransactorSession struct {
	Contract     *CCIPConfigTransactor
	TransactOpts bind.TransactOpts
}

type CCIPConfigRaw struct {
	Contract *CCIPConfig
}

type CCIPConfigCallerRaw struct {
	Contract *CCIPConfigCaller
}

type CCIPConfigTransactorRaw struct {
	Contract *CCIPConfigTransactor
}

func NewCCIPConfig(address common.Address, backend bind.ContractBackend) (*CCIPConfig, error) {
	abi, err := abi.JSON(strings.NewReader(CCIPConfigABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCCIPConfig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CCIPConfig{address: address, abi: abi, CCIPConfigCaller: CCIPConfigCaller{contract: contract}, CCIPConfigTransactor: CCIPConfigTransactor{contract: contract}, CCIPConfigFilterer: CCIPConfigFilterer{contract: contract}}, nil
}

func NewCCIPConfigCaller(address common.Address, caller bind.ContractCaller) (*CCIPConfigCaller, error) {
	contract, err := bindCCIPConfig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigCaller{contract: contract}, nil
}

func NewCCIPConfigTransactor(address common.Address, transactor bind.ContractTransactor) (*CCIPConfigTransactor, error) {
	contract, err := bindCCIPConfig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigTransactor{contract: contract}, nil
}

func NewCCIPConfigFilterer(address common.Address, filterer bind.ContractFilterer) (*CCIPConfigFilterer, error) {
	contract, err := bindCCIPConfig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigFilterer{contract: contract}, nil
}

func bindCCIPConfig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CCIPConfigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CCIPConfig *CCIPConfigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPConfig.Contract.CCIPConfigCaller.contract.Call(opts, result, method, params...)
}

func (_CCIPConfig *CCIPConfigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.Contract.CCIPConfigTransactor.contract.Transfer(opts)
}

func (_CCIPConfig *CCIPConfigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPConfig.Contract.CCIPConfigTransactor.contract.Transact(opts, method, params...)
}

func (_CCIPConfig *CCIPConfigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CCIPConfig.Contract.contract.Call(opts, result, method, params...)
}

func (_CCIPConfig *CCIPConfigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.Contract.contract.Transfer(opts)
}

func (_CCIPConfig *CCIPConfigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CCIPConfig.Contract.contract.Transact(opts, method, params...)
}

func (_CCIPConfig *CCIPConfigCaller) GetAllChainConfigs(opts *bind.CallOpts, pageIndex *big.Int, pageSize *big.Int) ([]CCIPConfigTypesChainConfigInfo, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getAllChainConfigs", pageIndex, pageSize)

	if err != nil {
		return *new([]CCIPConfigTypesChainConfigInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPConfigTypesChainConfigInfo)).(*[]CCIPConfigTypesChainConfigInfo)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetAllChainConfigs(pageIndex *big.Int, pageSize *big.Int) ([]CCIPConfigTypesChainConfigInfo, error) {
	return _CCIPConfig.Contract.GetAllChainConfigs(&_CCIPConfig.CallOpts, pageIndex, pageSize)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetAllChainConfigs(pageIndex *big.Int, pageSize *big.Int) ([]CCIPConfigTypesChainConfigInfo, error) {
	return _CCIPConfig.Contract.GetAllChainConfigs(&_CCIPConfig.CallOpts, pageIndex, pageSize)
}

func (_CCIPConfig *CCIPConfigCaller) GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getCapabilityConfiguration", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPConfig.Contract.GetCapabilityConfiguration(&_CCIPConfig.CallOpts, arg0)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetCapabilityConfiguration(arg0 uint32) ([]byte, error) {
	return _CCIPConfig.Contract.GetCapabilityConfiguration(&_CCIPConfig.CallOpts, arg0)
}

func (_CCIPConfig *CCIPConfigCaller) GetCapabilityRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getCapabilityRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetCapabilityRegistry() (common.Address, error) {
	return _CCIPConfig.Contract.GetCapabilityRegistry(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetCapabilityRegistry() (common.Address, error) {
	return _CCIPConfig.Contract.GetCapabilityRegistry(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCaller) GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPConfigTypesOCR3ConfigWithMeta, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "getOCRConfig", donId, pluginType)

	if err != nil {
		return *new([]CCIPConfigTypesOCR3ConfigWithMeta), err
	}

	out0 := *abi.ConvertType(out[0], new([]CCIPConfigTypesOCR3ConfigWithMeta)).(*[]CCIPConfigTypesOCR3ConfigWithMeta)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPConfigTypesOCR3ConfigWithMeta, error) {
	return _CCIPConfig.Contract.GetOCRConfig(&_CCIPConfig.CallOpts, donId, pluginType)
}

func (_CCIPConfig *CCIPConfigCallerSession) GetOCRConfig(donId uint32, pluginType uint8) ([]CCIPConfigTypesOCR3ConfigWithMeta, error) {
	return _CCIPConfig.Contract.GetOCRConfig(&_CCIPConfig.CallOpts, donId, pluginType)
}

func (_CCIPConfig *CCIPConfigCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) Owner() (common.Address, error) {
	return _CCIPConfig.Contract.Owner(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) Owner() (common.Address, error) {
	return _CCIPConfig.Contract.Owner(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPConfig.Contract.SupportsInterface(&_CCIPConfig.CallOpts, interfaceId)
}

func (_CCIPConfig *CCIPConfigCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CCIPConfig.Contract.SupportsInterface(&_CCIPConfig.CallOpts, interfaceId)
}

func (_CCIPConfig *CCIPConfigCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CCIPConfig.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CCIPConfig *CCIPConfigSession) TypeAndVersion() (string, error) {
	return _CCIPConfig.Contract.TypeAndVersion(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigCallerSession) TypeAndVersion() (string, error) {
	return _CCIPConfig.Contract.TypeAndVersion(&_CCIPConfig.CallOpts)
}

func (_CCIPConfig *CCIPConfigTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "acceptOwnership")
}

func (_CCIPConfig *CCIPConfigSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPConfig.Contract.AcceptOwnership(&_CCIPConfig.TransactOpts)
}

func (_CCIPConfig *CCIPConfigTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CCIPConfig.Contract.AcceptOwnership(&_CCIPConfig.TransactOpts)
}

func (_CCIPConfig *CCIPConfigTransactor) ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigTypesChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "applyChainConfigUpdates", chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigTypesChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.Contract.ApplyChainConfigUpdates(&_CCIPConfig.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigTransactorSession) ApplyChainConfigUpdates(chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigTypesChainConfigInfo) (*types.Transaction, error) {
	return _CCIPConfig.Contract.ApplyChainConfigUpdates(&_CCIPConfig.TransactOpts, chainSelectorRemoves, chainConfigAdds)
}

func (_CCIPConfig *CCIPConfigTransactor) BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "beforeCapabilityConfigSet", arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.Contract.BeforeCapabilityConfigSet(&_CCIPConfig.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigTransactorSession) BeforeCapabilityConfigSet(arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error) {
	return _CCIPConfig.Contract.BeforeCapabilityConfigSet(&_CCIPConfig.TransactOpts, arg0, config, arg2, donId)
}

func (_CCIPConfig *CCIPConfigTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.contract.Transact(opts, "transferOwnership", to)
}

func (_CCIPConfig *CCIPConfigSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.Contract.TransferOwnership(&_CCIPConfig.TransactOpts, to)
}

func (_CCIPConfig *CCIPConfigTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CCIPConfig.Contract.TransferOwnership(&_CCIPConfig.TransactOpts, to)
}

type CCIPConfigCapabilityConfigurationSetIterator struct {
	Event *CCIPConfigCapabilityConfigurationSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigCapabilityConfigurationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigCapabilityConfigurationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigCapabilityConfigurationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigCapabilityConfigurationSet struct {
	Raw types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPConfigCapabilityConfigurationSetIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigCapabilityConfigurationSetIterator{contract: _CCIPConfig.contract, event: "CapabilityConfigurationSet", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigCapabilityConfigurationSet) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "CapabilityConfigurationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigCapabilityConfigurationSet)
				if err := _CCIPConfig.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseCapabilityConfigurationSet(log types.Log) (*CCIPConfigCapabilityConfigurationSet, error) {
	event := new(CCIPConfigCapabilityConfigurationSet)
	if err := _CCIPConfig.contract.UnpackLog(event, "CapabilityConfigurationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigChainConfigRemovedIterator struct {
	Event *CCIPConfigChainConfigRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigChainConfigRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigChainConfigRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigChainConfigRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigChainConfigRemovedIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigChainConfigRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigChainConfigRemoved struct {
	ChainSelector uint64
	Raw           types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPConfigChainConfigRemovedIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigChainConfigRemovedIterator{contract: _CCIPConfig.contract, event: "ChainConfigRemoved", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigRemoved) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "ChainConfigRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigChainConfigRemoved)
				if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseChainConfigRemoved(log types.Log) (*CCIPConfigChainConfigRemoved, error) {
	event := new(CCIPConfigChainConfigRemoved)
	if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigChainConfigSetIterator struct {
	Event *CCIPConfigChainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigChainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigChainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigChainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigChainConfigSetIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigChainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigChainConfigSet struct {
	ChainSelector uint64
	ChainConfig   CCIPConfigTypesChainConfig
	Raw           types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPConfigChainConfigSetIterator, error) {

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return &CCIPConfigChainConfigSetIterator{contract: _CCIPConfig.contract, event: "ChainConfigSet", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigSet) (event.Subscription, error) {

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "ChainConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigChainConfigSet)
				if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseChainConfigSet(log types.Log) (*CCIPConfigChainConfigSet, error) {
	event := new(CCIPConfigChainConfigSet)
	if err := _CCIPConfig.contract.UnpackLog(event, "ChainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigOwnershipTransferRequestedIterator struct {
	Event *CCIPConfigOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigOwnershipTransferRequestedIterator{contract: _CCIPConfig.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigOwnershipTransferRequested)
				if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseOwnershipTransferRequested(log types.Log) (*CCIPConfigOwnershipTransferRequested, error) {
	event := new(CCIPConfigOwnershipTransferRequested)
	if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CCIPConfigOwnershipTransferredIterator struct {
	Event *CCIPConfigOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CCIPConfigOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CCIPConfigOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CCIPConfigOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CCIPConfigOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CCIPConfigOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CCIPConfigOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CCIPConfig *CCIPConfigFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CCIPConfigOwnershipTransferredIterator{contract: _CCIPConfig.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CCIPConfig *CCIPConfigFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CCIPConfig.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CCIPConfigOwnershipTransferred)
				if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CCIPConfig *CCIPConfigFilterer) ParseOwnershipTransferred(log types.Log) (*CCIPConfigOwnershipTransferred, error) {
	event := new(CCIPConfigOwnershipTransferred)
	if err := _CCIPConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CCIPConfig *CCIPConfig) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CCIPConfig.abi.Events["CapabilityConfigurationSet"].ID:
		return _CCIPConfig.ParseCapabilityConfigurationSet(log)
	case _CCIPConfig.abi.Events["ChainConfigRemoved"].ID:
		return _CCIPConfig.ParseChainConfigRemoved(log)
	case _CCIPConfig.abi.Events["ChainConfigSet"].ID:
		return _CCIPConfig.ParseChainConfigSet(log)
	case _CCIPConfig.abi.Events["OwnershipTransferRequested"].ID:
		return _CCIPConfig.ParseOwnershipTransferRequested(log)
	case _CCIPConfig.abi.Events["OwnershipTransferred"].ID:
		return _CCIPConfig.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CCIPConfigCapabilityConfigurationSet) Topic() common.Hash {
	return common.HexToHash("0x84ad7751b744c9e2ee77da1d902b428aec7f0a343d67a24bbe2142e6f58a8d0f")
}

func (CCIPConfigChainConfigRemoved) Topic() common.Hash {
	return common.HexToHash("0x2a680691fef3b2d105196805935232c661ce703e92d464ef0b94a7bc62d714f0")
}

func (CCIPConfigChainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x05dd57854af2c291a94ea52e7c43d80bc3be7fa73022f98b735dea86642fa5e0")
}

func (CCIPConfigOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CCIPConfigOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_CCIPConfig *CCIPConfig) Address() common.Address {
	return _CCIPConfig.address
}

type CCIPConfigInterface interface {
	GetAllChainConfigs(opts *bind.CallOpts, pageIndex *big.Int, pageSize *big.Int) ([]CCIPConfigTypesChainConfigInfo, error)

	GetCapabilityConfiguration(opts *bind.CallOpts, arg0 uint32) ([]byte, error)

	GetCapabilityRegistry(opts *bind.CallOpts) (common.Address, error)

	GetOCRConfig(opts *bind.CallOpts, donId uint32, pluginType uint8) ([]CCIPConfigTypesOCR3ConfigWithMeta, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyChainConfigUpdates(opts *bind.TransactOpts, chainSelectorRemoves []uint64, chainConfigAdds []CCIPConfigTypesChainConfigInfo) (*types.Transaction, error)

	BeforeCapabilityConfigSet(opts *bind.TransactOpts, arg0 [][32]byte, config []byte, arg2 uint64, donId uint32) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterCapabilityConfigurationSet(opts *bind.FilterOpts) (*CCIPConfigCapabilityConfigurationSetIterator, error)

	WatchCapabilityConfigurationSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigCapabilityConfigurationSet) (event.Subscription, error)

	ParseCapabilityConfigurationSet(log types.Log) (*CCIPConfigCapabilityConfigurationSet, error)

	FilterChainConfigRemoved(opts *bind.FilterOpts) (*CCIPConfigChainConfigRemovedIterator, error)

	WatchChainConfigRemoved(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigRemoved) (event.Subscription, error)

	ParseChainConfigRemoved(log types.Log) (*CCIPConfigChainConfigRemoved, error)

	FilterChainConfigSet(opts *bind.FilterOpts) (*CCIPConfigChainConfigSetIterator, error)

	WatchChainConfigSet(opts *bind.WatchOpts, sink chan<- *CCIPConfigChainConfigSet) (event.Subscription, error)

	ParseChainConfigSet(log types.Log) (*CCIPConfigChainConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CCIPConfigOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CCIPConfigOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CCIPConfigOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CCIPConfigOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
