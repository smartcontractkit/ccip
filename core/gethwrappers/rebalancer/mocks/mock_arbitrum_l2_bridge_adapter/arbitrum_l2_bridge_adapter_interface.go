// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_arbitrum_l2_bridge_adapter

import (
	big "math/big"

	arbitrum_l2_bridge_adapter "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/rebalancer/generated/arbitrum_l2_bridge_adapter"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	generated "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ArbitrumL2BridgeAdapterInterface is an autogenerated mock type for the ArbitrumL2BridgeAdapterInterface type
type ArbitrumL2BridgeAdapterInterface struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *ArbitrumL2BridgeAdapterInterface) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// DepositNativeToL1 provides a mock function with given fields: opts, recipient
func (_m *ArbitrumL2BridgeAdapterInterface) DepositNativeToL1(opts *bind.TransactOpts, recipient common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, recipient)

	if len(ret) == 0 {
		panic("no return value specified for DepositNativeToL1")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, recipient)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, recipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterArbitrumL1ToL2ERC20Finalized provides a mock function with given fields: opts
func (_m *ArbitrumL2BridgeAdapterInterface) FilterArbitrumL1ToL2ERC20Finalized(opts *bind.FilterOpts) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20FinalizedIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterArbitrumL1ToL2ERC20Finalized")
	}

	var r0 *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20FinalizedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20FinalizedIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20FinalizedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20FinalizedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterArbitrumL2ToL1ERC20Sent provides a mock function with given fields: opts, localToken, remoteToken, recipient
func (_m *ArbitrumL2BridgeAdapterInterface) FilterArbitrumL2ToL1ERC20Sent(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, recipient []common.Address) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20SentIterator, error) {
	ret := _m.Called(opts, localToken, remoteToken, recipient)

	if len(ret) == 0 {
		panic("no return value specified for FilterArbitrumL2ToL1ERC20Sent")
	}

	var r0 *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20SentIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20SentIterator, error)); ok {
		return rf(opts, localToken, remoteToken, recipient)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20SentIterator); ok {
		r0 = rf(opts, localToken, remoteToken, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20SentIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, localToken, remoteToken, recipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeWithdrawERC20 provides a mock function with given fields: opts, arg0, arg1, arg2
func (_m *ArbitrumL2BridgeAdapterInterface) FinalizeWithdrawERC20(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, arg0, arg1, arg2)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeWithdrawERC20")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, []byte) (*types.Transaction, error)); ok {
		return rf(opts, arg0, arg1, arg2)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, []byte) *types.Transaction); ok {
		r0 = rf(opts, arg0, arg1, arg2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address, []byte) error); ok {
		r1 = rf(opts, arg0, arg1, arg2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBridgeFeeInNative provides a mock function with given fields: opts
func (_m *ArbitrumL2BridgeAdapterInterface) GetBridgeFeeInNative(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetBridgeFeeInNative")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseArbitrumL1ToL2ERC20Finalized provides a mock function with given fields: log
func (_m *ArbitrumL2BridgeAdapterInterface) ParseArbitrumL1ToL2ERC20Finalized(log types.Log) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseArbitrumL1ToL2ERC20Finalized")
	}

	var r0 *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseArbitrumL2ToL1ERC20Sent provides a mock function with given fields: log
func (_m *ArbitrumL2BridgeAdapterInterface) ParseArbitrumL2ToL1ERC20Sent(log types.Log) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseArbitrumL2ToL1ERC20Sent")
	}

	var r0 *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseLog provides a mock function with given fields: log
func (_m *ArbitrumL2BridgeAdapterInterface) ParseLog(log types.Log) (generated.AbigenLog, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseLog")
	}

	var r0 generated.AbigenLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (generated.AbigenLog, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) generated.AbigenLog); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.AbigenLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendERC20 provides a mock function with given fields: opts, localToken, remoteToken, recipient, amount, arg4
func (_m *ArbitrumL2BridgeAdapterInterface) SendERC20(opts *bind.TransactOpts, localToken common.Address, remoteToken common.Address, recipient common.Address, amount *big.Int, arg4 []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, localToken, remoteToken, recipient, amount, arg4)

	if len(ret) == 0 {
		panic("no return value specified for SendERC20")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)); ok {
		return rf(opts, localToken, remoteToken, recipient, amount, arg4)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, localToken, remoteToken, recipient, amount, arg4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, *big.Int, []byte) error); ok {
		r1 = rf(opts, localToken, remoteToken, recipient, amount, arg4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchArbitrumL1ToL2ERC20Finalized provides a mock function with given fields: opts, sink
func (_m *ArbitrumL2BridgeAdapterInterface) WatchArbitrumL1ToL2ERC20Finalized(opts *bind.WatchOpts, sink chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	if len(ret) == 0 {
		panic("no return value specified for WatchArbitrumL1ToL2ERC20Finalized")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL1ToL2ERC20Finalized) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchArbitrumL2ToL1ERC20Sent provides a mock function with given fields: opts, sink, localToken, remoteToken, recipient
func (_m *ArbitrumL2BridgeAdapterInterface) WatchArbitrumL2ToL1ERC20Sent(opts *bind.WatchOpts, sink chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, localToken []common.Address, remoteToken []common.Address, recipient []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, localToken, remoteToken, recipient)

	if len(ret) == 0 {
		panic("no return value specified for WatchArbitrumL2ToL1ERC20Sent")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, []common.Address, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, localToken, remoteToken, recipient)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, []common.Address, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, localToken, remoteToken, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *arbitrum_l2_bridge_adapter.ArbitrumL2BridgeAdapterArbitrumL2ToL1ERC20Sent, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, localToken, remoteToken, recipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArbitrumL2BridgeAdapterInterface creates a new instance of ArbitrumL2BridgeAdapterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArbitrumL2BridgeAdapterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArbitrumL2BridgeAdapterInterface {
	mock := &ArbitrumL2BridgeAdapterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
