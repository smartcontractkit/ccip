// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rebalancer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IRebalancerCrossChainRebalancerArgs struct {
	RemoteRebalancer    common.Address
	LocalBridge         common.Address
	RemoteToken         common.Address
	RemoteChainSelector uint64
	Enabled             bool
}

type RebalancerCrossChainRebalancer struct {
	RemoteRebalancer common.Address
	LocalBridge      common.Address
	RemoteToken      common.Address
	Enabled          bool
}

var RebalancerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"localChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidRemoteChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestSequenceNumber\",\"type\":\"uint64\"}],\"name\":\"NonIncreasingSequenceNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CrossChainRebalancerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeSpecificData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FinalizationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAddedToContainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityContainer\",\"type\":\"address\"}],\"name\":\"LiquidityContainerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemovedFromContainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fromChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"toChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeSpecificData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeReturnData\",\"type\":\"bytes\"}],\"name\":\"LiquidityTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetBalance\",\"type\":\"uint256\"}],\"name\":\"TargetBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCrossChainRebalancers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getCrossChainRebalancer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structRebalancer.CrossChainRebalancer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalLiquidityContainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedDestChains\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_localToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeSpecificPayload\",\"type\":\"bytes\"}],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeSpecificPayload\",\"type\":\"bytes\"}],\"name\":\"receiveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs\",\"name\":\"crossChainLiqManager\",\"type\":\"tuple\"}],\"name\":\"setCrossChainRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"crossChainRebalancers\",\"type\":\"tuple[]\"}],\"name\":\"setCrossChainRebalancers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"name\":\"setLocalLiquidityContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR3Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetBalance\",\"type\":\"uint256\"}],\"name\":\"setTargetBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b506040516200455c3803806200455c833981016040819052620000349162000218565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000154565b505046608052506001600160401b038316600003620000f05760405163f89d762960e01b815260040160405180910390fd5b6001600160a01b038416620001185760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0393841660a0526001600160401b039290921660c052600b80546001600160a01b03191691909316179091556008556200027d565b336001600160a01b03821603620001ae5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b03811681146200021557600080fd5b50565b600080600080608085870312156200022f57600080fd5b84516200023c81620001ff565b60208601519094506001600160401b03811681146200025a57600080fd5b60408601519093506200026d81620001ff565b6060959095015193969295505050565b60805160a05160c051614269620002f3600039600081816127840152612e530152600081816103a10152818161069a015281816107c40152818161083b0152818161140501528181611554015281816126d501528181612ce80152612db20152600081816116f1015261173d01526142696000f3fe60806040526004361061018f5760003560e01c806381ff7048116100d6578063b7e7fa051161007f578063f491c00211610059578063f491c002146105ed578063f8c2d8fa1461060d578063fe65d5af1461062d57600080fd5b8063b7e7fa0514610598578063eb175b7e146105b8578063f2fde38b146105cd57600080fd5b80639c8f9f23116100b05780639c8f9f2314610512578063afcb95d714610532578063b1dc65a41461057857600080fd5b806381ff70481461048a5780638da5cb5b146104c7578063958e31b6146104f257600080fd5b80636511d91911610138578063706bf64511610112578063706bf6451461042a578063791781f51461044a57806379ba50971461047557600080fd5b80636511d9191461038f578063666cab8d146103e85780636a11ee901461040a57600080fd5b8063348759c111610169578063348759c11461023b57806351c6590a1461025d578063568446e71461027d57600080fd5b80630910a5101461019b578063181f5a77146101c35780633275636e1461021957600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506101b061064f565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b5061020c6040518060400160405280601481526020017f526562616c616e63657220312e302e302d64657600000000000000000000000081525081565b6040516101ba9190613417565b34801561022557600080fd5b50610239610234366004613431565b61070a565b005b34801561024757600080fd5b5061025061071e565b6040516101ba9190613449565b34801561026957600080fd5b50610239610278366004613497565b6107aa565b34801561028957600080fd5b506103406102983660046134cd565b6040805160808101825260008082526020820181905291810182905260608101919091525067ffffffffffffffff166000908152600960209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff161515606082015290565b60408051825173ffffffffffffffffffffffffffffffffffffffff90811682526020808501518216908301528383015116918101919091526060918201511515918101919091526080016101ba565b34801561039b57600080fd5b506103c37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b3480156103f457600080fd5b506103fd61095f565b6040516101ba9190613539565b34801561041657600080fd5b5061023961042536600461379b565b6109cd565b34801561043657600080fd5b50610239610445366004613868565b6111e5565b34801561045657600080fd5b50600b5473ffffffffffffffffffffffffffffffffffffffff166103c3565b34801561048157600080fd5b5061023961125c565b34801561049657600080fd5b506004546002546040805163ffffffff808516825264010000000090940490931660208401528201526060016101ba565b3480156104d357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103c3565b3480156104fe57600080fd5b5061023961050d3660046138ce565b611359565b34801561051e57600080fd5b5061023961052d366004613497565b6113b2565b34801561053e57600080fd5b50600254600454604080516001815260208101939093526801000000000000000090910467ffffffffffffffff16908201526060016101ba565b34801561058457600080fd5b5061023961059336600461396d565b6115ae565b3480156105a457600080fd5b506102396105b3366004613a24565b611c28565b3480156105c457600080fd5b506008546101b0565b3480156105d957600080fd5b506102396105e8366004613868565b611c70565b3480156105f957600080fd5b50610239610608366004613497565b611c81565b34801561061957600080fd5b50610239610628366004613a99565b611cbc565b34801561063957600080fd5b50610642611d16565b6040516101ba9190613b01565b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190613b96565b905090565b610712611ee0565b61071b81611f63565b50565b6060600a8054806020026020016040519081016040528092919081815260200182805480156107a057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161075b5790505b5050505050905090565b6107ec73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308461235f565b600b546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190613bbd565b50600b546040517feb521a4c0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063eb521a4c90602401600060405180830381600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b50506040518392503391507f5414b81d05ac3542606f164e16a9a107d05d21e906539cc5ceb61d7b6b707eb590600090a350565b606060078054806020026020016040519081016040528092919081815260200182805480156107a057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610999575050505050905090565b855185518560ff16601f831115610a45576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610aaf576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610a3c565b818314610b3d576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610a3c565b610b48816003613c09565b8311610bb0576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610a3c565b610bb8611ee0565b60065460005b81811015610cb4576005600060068381548110610bdd57610bdd613c26565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905560078054600592919084908110610c4d57610c4d613c26565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055610cad81613c55565b9050610bbe565b50895160005b8181101561108d5760008c8281518110610cd657610cd6613c26565b6020026020010151905060006002811115610cf357610cf3613c8d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610d3257610d32613c8d565b14610d99576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610a3c565b73ffffffffffffffffffffffffffffffffffffffff8116610de6576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610e9657610e96613c8d565b021790555090505060008c8381518110610eb257610eb2613c26565b6020026020010151905060006002811115610ecf57610ecf613c8d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610f0e57610f0e613c8d565b14610f75576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610a3c565b73ffffffffffffffffffffffffffffffffffffffff8116610fc2576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561107257611072613c8d565b021790555090505050508061108690613c55565b9050610cba565b508a516110a19060069060208e01906132eb565b5089516110b59060079060208d01906132eb565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c16171790556004805461113b91469130919060009061110d9063ffffffff16613cbc565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e61243b565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f6040516111cf99989796959493929190613cdf565b60405180910390a1505050505050505050505050565b6111ed611ee0565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f07dc474694ac40123aadcd2445f1b38d2eb353edd9319dcea043548ab34990ec90600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff1633146112dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610a3c565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611361611ee0565b6113ac848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525067ffffffffffffffff92506124e6915050565b50505050565b6113ba611ee0565b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190613b96565b9050818110156114b6576040517fa17e11d50000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610a3c565b600b546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690630a861f2a90602401600060405180830381600087803b15801561152257600080fd5b505af1158015611536573d6000803e3d6000fd5b5061157d92505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690503384612816565b604051829033907f2bda316674f8d73d289689d7a3acdf8e353b7a142fb5a68ac2aa475104039c1890600090a35050565b60045460208901359067ffffffffffffffff6801000000000000000090910481169082161161163157600480546040517f6e376b6600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff80851693820193909352680100000000000000009091049091166024820152604401610a3c565b61163c88888361286c565b600480547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416021790556040805160608101825260025480825260035460ff808216602085015261010090910416928201929092528a359182146116ee5780516040517f93df584c000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610a3c565b467f00000000000000000000000000000000000000000000000000000000000000001461176f576040517f0f01ce850000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152466024820152604401610a3c565b6040805183815267ffffffffffffffff851660208201527fe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2910160405180910390a160208101516117c1906001613d75565b60ff1687146117fc576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868514611835576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561187857611878613c8d565b600281111561188957611889613c8d565b90525090506002816020015160028111156118a6576118a6613c8d565b1480156118ed57506007816000015160ff16815481106118c8576118c8613c26565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b611923576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000611931866020613c09565b61193c896020613c09565b6119488c610144613d8e565b6119529190613d8e565b61195c9190613d8e565b90503681146119a0576040517f8e1192e100000000000000000000000000000000000000000000000000000000815260048101829052366024820152604401610a3c565b5060008a8a6040516119b3929190613da1565b6040519081900381206119ca918e90602001613db1565b6040516020818303038152906040528051906020012090506119ea613375565b8860005b81811015611c175760006001858a8460208110611a0d57611a0d613c26565b611a1a91901a601b613d75565b8f8f86818110611a2c57611a2c613c26565b905060200201358e8e87818110611a4557611a45613c26565b9050602002013560405160008152602001604052604051611a82949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611aa4573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff8082168652939750919550929392840191610100909104166002811115611b2757611b27613c8d565b6002811115611b3857611b38613c8d565b9052509050600181602001516002811115611b5557611b55613c8d565b14611b8c576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f8110611ba357611ba3613c26565b602002015115611bdf576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f8110611bfa57611bfa613c26565b9115156020909202015250611c10905081613c55565b90506119ee565b505050505050505050505050505050565b611c30611ee0565b60005b81811015611c6b57611c5b838383818110611c5057611c50613c26565b905060a00201611f63565b611c6481613c55565b9050611c33565b505050565b611c78611ee0565b61071b81612a09565b611c89611ee0565b600881905560405181907f65e69acd924a1a76eecbf2904e4d75f27e18f76276b116b0e5a87a447768383090600090a250565b611cc4611ee0565b611d0f85858567ffffffffffffffff86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612afe92505050565b5050505050565b600a5460609060008167ffffffffffffffff811115611d3757611d3761354c565b604051908082528060200260200182016040528015611dae57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181611d555790505b50905060005b82811015611ed9576000600a8281548110611dd157611dd1613c26565b6000918252602080832060048304015460039092166008026101000a90910467ffffffffffffffff1680835260098252604092839020835160808082018652825473ffffffffffffffffffffffffffffffffffffffff9081168352600184015481168387019081526002909401548082168489019081527401000000000000000000000000000000000000000090910460ff1615156060808601918252895160a081018b52865185168152965184169887019890985290519091169684019690965293820183905293511515928101929092528551909350859085908110611ebb57611ebb613c26565b6020026020010181905250505080611ed290613c55565b9050611db4565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611f61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610a3c565b565b611f7360808201606083016134cd565b67ffffffffffffffff16600003611fb6576040517ff89d762900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611fc56020830183613868565b73ffffffffffffffffffffffffffffffffffffffff16148061200c57506000611ff46040830160208401613868565b73ffffffffffffffffffffffffffffffffffffffff16145b8061203c575060006120246060830160408401613868565b73ffffffffffffffffffffffffffffffffffffffff16145b15612073576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060098161208860808501606086016134cd565b67ffffffffffffffff16815260208101919091526040016000206002015473ffffffffffffffffffffffffffffffffffffffff160361211457600a6120d360808301606084016134cd565b8154600181018355600092835260209092206004830401805460039093166008026101000a67ffffffffffffffff8181021990941692909316929092021790555b60408051608081019091528061212d6020840184613868565b73ffffffffffffffffffffffffffffffffffffffff16815260200182602001602081019061215b9190613868565b73ffffffffffffffffffffffffffffffffffffffff1681526020016121866060840160408501613868565b73ffffffffffffffffffffffffffffffffffffffff1681526020016121b160a0840160808501613dc5565b15159052600960006121c960808501606086016134cd565b67ffffffffffffffff16815260208082019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559385015160018301805491831691909516179093559083015160029091018054606094850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911692909316919091179190911790556122aa90608083019083016134cd565b67ffffffffffffffff167fab9bd0e4888101232b8f09dae2952ff59a6eea4a19fbddf2a8ca7b23f0e4cb406122e56040840160208501613868565b6122f56060850160408601613868565b6123026020860186613868565b61231260a0870160808801613dc5565b604051612354949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152901515606082015260800190565b60405180910390a250565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526113ac9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ed2565b6000808a8a8a8a8a8a8a8a8a60405160200161245f99989796959493929190613de2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b67ffffffffffffffff84166000908152600960209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff161515606082018190526125ab576040517fc9ff038f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86166004820152602401610a3c565b602081015181516040517f38314bb200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916338314bb2916126079130908890600401613e77565b600060405180830381600087803b15801561262157600080fd5b505af1925050508015612632575060015b6126b7573d808015612660576040519150601f19603f3d011682016040523d82523d6000602084013e612665565b606091505b508567ffffffffffffffff168367ffffffffffffffff167fa481d91c3f9574c23ee84fef85246354b760a0527a535d6382354e4684703ce386846040516126ad929190613eb9565b60405180910390a3505b600b546126fe9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911686612fde565b600b546040517feb521a4c0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063eb521a4c90602401600060405180830381600087803b15801561276a57600080fd5b505af115801561277e573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168567ffffffffffffffff168367ffffffffffffffff167f2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a8308888604051806020016040528060008152506040516128079493929190613ede565b60405180910390a45050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611c6b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016123b9565b600061287a83850185614017565b8051516020820151519192509081158015612893575080155b156128c9576040517ebf199700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8281101561297557612965846000015182815181106128ed576128ed613c26565b6020026020010151604001518560000151838151811061290f5761290f613c26565b6020026020010151600001518660000151848151811061293157612931613c26565b602002602001015160200151888860000151868151811061295457612954613c26565b602002602001015160600151612afe565b61296e81613c55565b90506128cc565b5060005b81811015612a00576129f08460200151828151811061299a5761299a613c26565b602002602001015160200151856020015183815181106129bc576129bc613c26565b602002602001015160000151866020015184815181106129de576129de613c26565b602002602001015160400151886124e6565b6129f981613c55565b9050612979565b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603612a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610a3c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612b0861064f565b905084811015612b4e576040517fa17e11d50000000000000000000000000000000000000000000000000000000081526004810186905260248101829052604401610a3c565b67ffffffffffffffff86166000908152600960209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff16151560608201819052612c13576040517fc9ff038f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff88166004820152602401610a3c565b600b546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff90911690630a861f2a90602401600060405180830381600087803b158015612c7f57600080fd5b505af1158015612c93573d6000803e3d6000fd5b5050505060208101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190613bbd565b506020810151604080830151835191517fa71d98b700000000000000000000000000000000000000000000000000000000815260009373ffffffffffffffffffffffffffffffffffffffff169263a71d98b7928a92612ddf927f000000000000000000000000000000000000000000000000000000000000000092918e908c9060040161418b565b60006040518083038185885af1158015612dfd573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612e4491908101906141d2565b90508767ffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168667ffffffffffffffff167f2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a885600001518b8987604051612ec09493929190613ede565b60405180910390a45050505050505050565b6000612f34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130dc9092919063ffffffff16565b805190915015611c6b5780806020019051810190612f529190613bbd565b611c6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a3c565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015613055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130799190613b96565b6130839190613d8e565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506113ac9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016123b9565b60606130eb84846000856130f3565b949350505050565b606082471015613185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a3c565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131ae9190614240565b60006040518083038185875af1925050503d80600081146131eb576040519150601f19603f3d011682016040523d82523d6000602084013e6131f0565b606091505b50915091506132018783838761320c565b979650505050505050565b606083156132a257825160000361329b5773ffffffffffffffffffffffffffffffffffffffff85163b61329b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a3c565b50816130eb565b6130eb83838151156132b75781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c9190613417565b828054828255906000526020600020908101928215613365579160200282015b8281111561336557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061330b565b50613371929150613394565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b808211156133715760008155600101613395565b60005b838110156133c45781810151838201526020016133ac565b50506000910152565b600081518084526133e58160208601602086016133a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061342a60208301846133cd565b9392505050565b600060a0828403121561344357600080fd5b50919050565b6020808252825182820181905260009190848201906040850190845b8181101561348b57835167ffffffffffffffff1683529284019291840191600101613465565b50909695505050505050565b6000602082840312156134a957600080fd5b5035919050565b803567ffffffffffffffff811681146134c857600080fd5b919050565b6000602082840312156134df57600080fd5b61342a826134b0565b600081518084526020808501945080840160005b8381101561352e57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016134fc565b509495945050505050565b60208152600061342a60208301846134e8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561359e5761359e61354c565b60405290565b6040805190810167ffffffffffffffff8111828210171561359e5761359e61354c565b6040516080810167ffffffffffffffff8111828210171561359e5761359e61354c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136315761363161354c565b604052919050565b600067ffffffffffffffff8211156136535761365361354c565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461071b57600080fd5b600082601f83011261369057600080fd5b813560206136a56136a083613639565b6135ea565b82815260059290921b840181019181810190868411156136c457600080fd5b8286015b848110156136e85780356136db8161365d565b83529183019183016136c8565b509695505050505050565b803560ff811681146134c857600080fd5b600067ffffffffffffffff82111561371e5761371e61354c565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261375b57600080fd5b81356137696136a082613704565b81815284602083860101111561377e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156137b457600080fd5b863567ffffffffffffffff808211156137cc57600080fd5b6137d88a838b0161367f565b975060208901359150808211156137ee57600080fd5b6137fa8a838b0161367f565b965061380860408a016136f3565b9550606089013591508082111561381e57600080fd5b61382a8a838b0161374a565b945061383860808a016134b0565b935060a089013591508082111561384e57600080fd5b5061385b89828a0161374a565b9150509295509295509295565b60006020828403121561387a57600080fd5b813561342a8161365d565b60008083601f84011261389757600080fd5b50813567ffffffffffffffff8111156138af57600080fd5b6020830191508360208285010111156138c757600080fd5b9250929050565b600080600080606085870312156138e457600080fd5b6138ed856134b0565b935060208501359250604085013567ffffffffffffffff81111561391057600080fd5b61391c87828801613885565b95989497509550505050565b60008083601f84011261393a57600080fd5b50813567ffffffffffffffff81111561395257600080fd5b6020830191508360208260051b85010111156138c757600080fd5b60008060008060008060008060e0898b03121561398957600080fd5b606089018a81111561399a57600080fd5b8998503567ffffffffffffffff808211156139b457600080fd5b6139c08c838d01613885565b909950975060808b01359150808211156139d957600080fd5b6139e58c838d01613928565b909750955060a08b01359150808211156139fe57600080fd5b50613a0b8b828c01613928565b999c989b50969995989497949560c00135949350505050565b60008060208385031215613a3757600080fd5b823567ffffffffffffffff80821115613a4f57600080fd5b818501915085601f830112613a6357600080fd5b813581811115613a7257600080fd5b86602060a083028501011115613a8757600080fd5b60209290920196919550909350505050565b600080600080600060808688031215613ab157600080fd5b613aba866134b0565b94506020860135935060408601359250606086013567ffffffffffffffff811115613ae457600080fd5b613af088828901613885565b969995985093965092949392505050565b602080825282518282018190526000919060409081850190868401855b82811015613b89578151805173ffffffffffffffffffffffffffffffffffffffff90811686528782015181168887015286820151168686015260608082015167ffffffffffffffff169086015260809081015115159085015260a09093019290850190600101613b1e565b5091979650505050505050565b600060208284031215613ba857600080fd5b5051919050565b801515811461071b57600080fd5b600060208284031215613bcf57600080fd5b815161342a81613baf565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417613c2057613c20613bda565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c8657613c86613bda565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818103613cd557613cd5613bda565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613d0f8184018a6134e8565b90508281036080840152613d2381896134e8565b905060ff871660a084015282810360c0840152613d4081876133cd565b905067ffffffffffffffff851660e0840152828103610100840152613d6581856133cd565b9c9b505050505050505050505050565b60ff8181168382160190811115613c2057613c20613bda565b80820180821115613c2057613c20613bda565b8183823760009101908152919050565b828152606082602083013760800192915050565b600060208284031215613dd757600080fd5b813561342a81613baf565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152613e298285018b6134e8565b91508382036080850152613e3d828a6134e8565b915060ff881660a085015283820360c0850152613e5a82886133cd565b90861660e08501528381036101008501529050613d6581856133cd565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152613eb060608301846133cd565b95945050505050565b604081526000613ecc60408301856133cd565b8281036020840152613eb081856133cd565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152608060408201526000613f1360808301856133cd565b828103606084015261320181856133cd565b600082601f830112613f3657600080fd5b81356020613f466136a083613639565b82815260059290921b84018101918181019086841115613f6557600080fd5b8286015b848110156136e857803567ffffffffffffffff80821115613f8a5760008081fd5b81890191506060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215613fc35760008081fd5b613fcb61357b565b8784013581526040613fde8186016134b0565b828a0152918401359183831115613ff55760008081fd5b6140038d8a8588010161374a565b908201528652505050918301918301613f69565b6000602080838503121561402a57600080fd5b823567ffffffffffffffff8082111561404257600080fd5b908401906040828703121561405657600080fd5b61405e6135a4565b82358281111561406d57600080fd5b8301601f8101881361407e57600080fd5b803561408c6136a082613639565b81815260059190911b8201860190868101908a8311156140ab57600080fd5b8784015b83811015614157578035878111156140c657600080fd5b85016080818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156140fa57600080fd5b6141026135c7565b8a820135815260408201358b82015261411d606083016134b0565b60408201526080820135898111156141355760008081fd5b6141438f8d8386010161374a565b6060830152508452509188019188016140af565b508452505050828401358281111561416e57600080fd5b61417a88828601613f25565b948201949094529695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a0608083015261320160a08301846133cd565b6000602082840312156141e457600080fd5b815167ffffffffffffffff8111156141fb57600080fd5b8201601f8101841361420c57600080fd5b805161421a6136a082613704565b81815285602083850101111561422f57600080fd5b613eb08260208301602086016133a9565b600082516142528184602087016133a9565b919091019291505056fea164736f6c6343000813000a",
}

var RebalancerABI = RebalancerMetaData.ABI

var RebalancerBin = RebalancerMetaData.Bin

func DeployRebalancer(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, localChainSelector uint64, localLiquidityContainer common.Address, targetBalance *big.Int) (common.Address, *types.Transaction, *Rebalancer, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RebalancerBin), backend, token, localChainSelector, localLiquidityContainer, targetBalance)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rebalancer{address: address, abi: *parsed, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

type Rebalancer struct {
	address common.Address
	abi     abi.ABI
	RebalancerCaller
	RebalancerTransactor
	RebalancerFilterer
}

type RebalancerCaller struct {
	contract *bind.BoundContract
}

type RebalancerTransactor struct {
	contract *bind.BoundContract
}

type RebalancerFilterer struct {
	contract *bind.BoundContract
}

type RebalancerSession struct {
	Contract     *Rebalancer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type RebalancerCallerSession struct {
	Contract *RebalancerCaller
	CallOpts bind.CallOpts
}

type RebalancerTransactorSession struct {
	Contract     *RebalancerTransactor
	TransactOpts bind.TransactOpts
}

type RebalancerRaw struct {
	Contract *Rebalancer
}

type RebalancerCallerRaw struct {
	Contract *RebalancerCaller
}

type RebalancerTransactorRaw struct {
	Contract *RebalancerTransactor
}

func NewRebalancer(address common.Address, backend bind.ContractBackend) (*Rebalancer, error) {
	abi, err := abi.JSON(strings.NewReader(RebalancerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindRebalancer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rebalancer{address: address, abi: abi, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

func NewRebalancerCaller(address common.Address, caller bind.ContractCaller) (*RebalancerCaller, error) {
	contract, err := bindRebalancer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerCaller{contract: contract}, nil
}

func NewRebalancerTransactor(address common.Address, transactor bind.ContractTransactor) (*RebalancerTransactor, error) {
	contract, err := bindRebalancer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerTransactor{contract: contract}, nil
}

func NewRebalancerFilterer(address common.Address, filterer bind.ContractFilterer) (*RebalancerFilterer, error) {
	contract, err := bindRebalancer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RebalancerFilterer{contract: contract}, nil
}

func bindRebalancer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_Rebalancer *RebalancerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.RebalancerCaller.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCaller) GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getAllCrossChainRebalancers")

	if err != nil {
		return *new([]IRebalancerCrossChainRebalancerArgs), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRebalancerCrossChainRebalancerArgs)).(*[]IRebalancerCrossChainRebalancerArgs)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getCrossChainRebalancer", chainSelector)

	if err != nil {
		return *new(RebalancerCrossChainRebalancer), err
	}

	out0 := *abi.ConvertType(out[0], new(RebalancerCrossChainRebalancer)).(*RebalancerCrossChainRebalancer)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCallerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCaller) GetLiquidity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLiquidity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLocalLiquidityContainer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getSupportedDestChains")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetTargetBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getTargetBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetTargetBalance() (*big.Int, error) {
	return _Rebalancer.Contract.GetTargetBalance(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetTargetBalance() (*big.Int, error) {
	return _Rebalancer.Contract.GetTargetBalance(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) ILocalToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "i_localToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SequenceNumber = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_Rebalancer *RebalancerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "acceptOwnership")
}

func (_Rebalancer *RebalancerSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactor) AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "addLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "rebalanceLiquidity", chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactorSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactor) ReceiveLiquidity(opts *bind.TransactOpts, remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "receiveLiquidity", remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerSession) ReceiveLiquidity(remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.ReceiveLiquidity(&_Rebalancer.TransactOpts, remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactorSession) ReceiveLiquidity(remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.ReceiveLiquidity(&_Rebalancer.TransactOpts, remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactor) RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "removeLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancer", crossChainLiqManager)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancers(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancers", crossChainRebalancers)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancers(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancers(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancers(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancers(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactor) SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setLocalLiquidityContainer", localLiquidityContainer)
}

func (_Rebalancer *RebalancerSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactorSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactor) SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setOCR3Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactorSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactor) SetTargetBalance(opts *bind.TransactOpts, targetBalance *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setTargetBalance", targetBalance)
}

func (_Rebalancer *RebalancerSession) SetTargetBalance(targetBalance *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetTargetBalance(&_Rebalancer.TransactOpts, targetBalance)
}

func (_Rebalancer *RebalancerTransactorSession) SetTargetBalance(targetBalance *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetTargetBalance(&_Rebalancer.TransactOpts, targetBalance)
}

func (_Rebalancer *RebalancerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transferOwnership", to)
}

func (_Rebalancer *RebalancerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.RawTransact(opts, nil)
}

func (_Rebalancer *RebalancerSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

type RebalancerConfigSetIterator struct {
	Event *RebalancerConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerConfigSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &RebalancerConfigSetIterator{contract: _Rebalancer.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerConfigSet)
				if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseConfigSet(log types.Log) (*RebalancerConfigSet, error) {
	event := new(RebalancerConfigSet)
	if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerCrossChainRebalancerSetIterator struct {
	Event *RebalancerCrossChainRebalancerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerCrossChainRebalancerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerCrossChainRebalancerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerCrossChainRebalancerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerCrossChainRebalancerSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerCrossChainRebalancerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerCrossChainRebalancerSet struct {
	RemoteChainSelector uint64
	LocalBridge         common.Address
	RemoteToken         common.Address
	RemoteRebalancer    common.Address
	Enabled             bool
	Raw                 types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterCrossChainRebalancerSet(opts *bind.FilterOpts, remoteChainSelector []uint64) (*RebalancerCrossChainRebalancerSetIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "CrossChainRebalancerSet", remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerCrossChainRebalancerSetIterator{contract: _Rebalancer.contract, event: "CrossChainRebalancerSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchCrossChainRebalancerSet(opts *bind.WatchOpts, sink chan<- *RebalancerCrossChainRebalancerSet, remoteChainSelector []uint64) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "CrossChainRebalancerSet", remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerCrossChainRebalancerSet)
				if err := _Rebalancer.contract.UnpackLog(event, "CrossChainRebalancerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseCrossChainRebalancerSet(log types.Log) (*RebalancerCrossChainRebalancerSet, error) {
	event := new(RebalancerCrossChainRebalancerSet)
	if err := _Rebalancer.contract.UnpackLog(event, "CrossChainRebalancerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerFinalizationFailedIterator struct {
	Event *RebalancerFinalizationFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerFinalizationFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerFinalizationFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerFinalizationFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerFinalizationFailedIterator) Error() error {
	return it.fail
}

func (it *RebalancerFinalizationFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerFinalizationFailed struct {
	OcrSeqNum           uint64
	RemoteChainSelector uint64
	BridgeSpecificData  []byte
	Reason              []byte
	Raw                 types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterFinalizationFailed(opts *bind.FilterOpts, ocrSeqNum []uint64, remoteChainSelector []uint64) (*RebalancerFinalizationFailedIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "FinalizationFailed", ocrSeqNumRule, remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerFinalizationFailedIterator{contract: _Rebalancer.contract, event: "FinalizationFailed", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchFinalizationFailed(opts *bind.WatchOpts, sink chan<- *RebalancerFinalizationFailed, ocrSeqNum []uint64, remoteChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "FinalizationFailed", ocrSeqNumRule, remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerFinalizationFailed)
				if err := _Rebalancer.contract.UnpackLog(event, "FinalizationFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseFinalizationFailed(log types.Log) (*RebalancerFinalizationFailed, error) {
	event := new(RebalancerFinalizationFailed)
	if err := _Rebalancer.contract.UnpackLog(event, "FinalizationFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityAddedToContainerIterator struct {
	Event *RebalancerLiquidityAddedToContainer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityAddedToContainerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityAddedToContainer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityAddedToContainer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityAddedToContainerIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityAddedToContainerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityAddedToContainer struct {
	Provider common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityAddedToContainer(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedToContainerIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityAddedToContainer", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityAddedToContainerIterator{contract: _Rebalancer.contract, event: "LiquidityAddedToContainer", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityAddedToContainer(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAddedToContainer, provider []common.Address, amount []*big.Int) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityAddedToContainer", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityAddedToContainer)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAddedToContainer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityAddedToContainer(log types.Log) (*RebalancerLiquidityAddedToContainer, error) {
	event := new(RebalancerLiquidityAddedToContainer)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAddedToContainer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityContainerSetIterator struct {
	Event *RebalancerLiquidityContainerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityContainerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityContainerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityContainerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityContainerSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityContainerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityContainerSet struct {
	NewLiquidityContainer common.Address
	Raw                   types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityContainerSet(opts *bind.FilterOpts, newLiquidityContainer []common.Address) (*RebalancerLiquidityContainerSetIterator, error) {

	var newLiquidityContainerRule []interface{}
	for _, newLiquidityContainerItem := range newLiquidityContainer {
		newLiquidityContainerRule = append(newLiquidityContainerRule, newLiquidityContainerItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityContainerSet", newLiquidityContainerRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityContainerSetIterator{contract: _Rebalancer.contract, event: "LiquidityContainerSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityContainerSet(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityContainerSet, newLiquidityContainer []common.Address) (event.Subscription, error) {

	var newLiquidityContainerRule []interface{}
	for _, newLiquidityContainerItem := range newLiquidityContainer {
		newLiquidityContainerRule = append(newLiquidityContainerRule, newLiquidityContainerItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityContainerSet", newLiquidityContainerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityContainerSet)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityContainerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityContainerSet(log types.Log) (*RebalancerLiquidityContainerSet, error) {
	event := new(RebalancerLiquidityContainerSet)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityContainerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityRemovedFromContainerIterator struct {
	Event *RebalancerLiquidityRemovedFromContainer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityRemovedFromContainerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityRemovedFromContainer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityRemovedFromContainer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityRemovedFromContainerIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityRemovedFromContainerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityRemovedFromContainer struct {
	Remover common.Address
	Amount  *big.Int
	Raw     types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityRemovedFromContainer(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedFromContainerIterator, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityRemovedFromContainer", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityRemovedFromContainerIterator{contract: _Rebalancer.contract, event: "LiquidityRemovedFromContainer", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityRemovedFromContainer(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemovedFromContainer, remover []common.Address, amount []*big.Int) (event.Subscription, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityRemovedFromContainer", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityRemovedFromContainer)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemovedFromContainer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityRemovedFromContainer(log types.Log) (*RebalancerLiquidityRemovedFromContainer, error) {
	event := new(RebalancerLiquidityRemovedFromContainer)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemovedFromContainer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityTransferredIterator struct {
	Event *RebalancerLiquidityTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityTransferred struct {
	OcrSeqNum          uint64
	FromChainSelector  uint64
	ToChainSelector    uint64
	To                 common.Address
	Amount             *big.Int
	BridgeSpecificData []byte
	BridgeReturnData   []byte
	Raw                types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityTransferredIterator{contract: _Rebalancer.contract, event: "LiquidityTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error) {
	event := new(RebalancerLiquidityTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferRequestedIterator struct {
	Event *RebalancerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferRequestedIterator{contract: _Rebalancer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferRequested)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error) {
	event := new(RebalancerOwnershipTransferRequested)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferredIterator struct {
	Event *RebalancerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferredIterator{contract: _Rebalancer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error) {
	event := new(RebalancerOwnershipTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerTargetBalanceSetIterator struct {
	Event *RebalancerTargetBalanceSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerTargetBalanceSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerTargetBalanceSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerTargetBalanceSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerTargetBalanceSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerTargetBalanceSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerTargetBalanceSet struct {
	TargetBalance *big.Int
	Raw           types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterTargetBalanceSet(opts *bind.FilterOpts, targetBalance []*big.Int) (*RebalancerTargetBalanceSetIterator, error) {

	var targetBalanceRule []interface{}
	for _, targetBalanceItem := range targetBalance {
		targetBalanceRule = append(targetBalanceRule, targetBalanceItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "TargetBalanceSet", targetBalanceRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerTargetBalanceSetIterator{contract: _Rebalancer.contract, event: "TargetBalanceSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchTargetBalanceSet(opts *bind.WatchOpts, sink chan<- *RebalancerTargetBalanceSet, targetBalance []*big.Int) (event.Subscription, error) {

	var targetBalanceRule []interface{}
	for _, targetBalanceItem := range targetBalance {
		targetBalanceRule = append(targetBalanceRule, targetBalanceItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "TargetBalanceSet", targetBalanceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerTargetBalanceSet)
				if err := _Rebalancer.contract.UnpackLog(event, "TargetBalanceSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseTargetBalanceSet(log types.Log) (*RebalancerTargetBalanceSet, error) {
	event := new(RebalancerTargetBalanceSet)
	if err := _Rebalancer.contract.UnpackLog(event, "TargetBalanceSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerTransmittedIterator struct {
	Event *RebalancerTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerTransmittedIterator) Error() error {
	return it.fail
}

func (it *RebalancerTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerTransmitted struct {
	ConfigDigest   [32]byte
	SequenceNumber uint64
	Raw            types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &RebalancerTransmittedIterator{contract: _Rebalancer.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerTransmitted)
				if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseTransmitted(log types.Log) (*RebalancerTransmitted, error) {
	event := new(RebalancerTransmitted)
	if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs       bool
	ConfigDigest   [32]byte
	SequenceNumber uint64
}

func (_Rebalancer *Rebalancer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Rebalancer.abi.Events["ConfigSet"].ID:
		return _Rebalancer.ParseConfigSet(log)
	case _Rebalancer.abi.Events["CrossChainRebalancerSet"].ID:
		return _Rebalancer.ParseCrossChainRebalancerSet(log)
	case _Rebalancer.abi.Events["FinalizationFailed"].ID:
		return _Rebalancer.ParseFinalizationFailed(log)
	case _Rebalancer.abi.Events["LiquidityAddedToContainer"].ID:
		return _Rebalancer.ParseLiquidityAddedToContainer(log)
	case _Rebalancer.abi.Events["LiquidityContainerSet"].ID:
		return _Rebalancer.ParseLiquidityContainerSet(log)
	case _Rebalancer.abi.Events["LiquidityRemovedFromContainer"].ID:
		return _Rebalancer.ParseLiquidityRemovedFromContainer(log)
	case _Rebalancer.abi.Events["LiquidityTransferred"].ID:
		return _Rebalancer.ParseLiquidityTransferred(log)
	case _Rebalancer.abi.Events["OwnershipTransferRequested"].ID:
		return _Rebalancer.ParseOwnershipTransferRequested(log)
	case _Rebalancer.abi.Events["OwnershipTransferred"].ID:
		return _Rebalancer.ParseOwnershipTransferred(log)
	case _Rebalancer.abi.Events["TargetBalanceSet"].ID:
		return _Rebalancer.ParseTargetBalanceSet(log)
	case _Rebalancer.abi.Events["Transmitted"].ID:
		return _Rebalancer.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (RebalancerConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (RebalancerCrossChainRebalancerSet) Topic() common.Hash {
	return common.HexToHash("0xab9bd0e4888101232b8f09dae2952ff59a6eea4a19fbddf2a8ca7b23f0e4cb40")
}

func (RebalancerFinalizationFailed) Topic() common.Hash {
	return common.HexToHash("0xa481d91c3f9574c23ee84fef85246354b760a0527a535d6382354e4684703ce3")
}

func (RebalancerLiquidityAddedToContainer) Topic() common.Hash {
	return common.HexToHash("0x5414b81d05ac3542606f164e16a9a107d05d21e906539cc5ceb61d7b6b707eb5")
}

func (RebalancerLiquidityContainerSet) Topic() common.Hash {
	return common.HexToHash("0x07dc474694ac40123aadcd2445f1b38d2eb353edd9319dcea043548ab34990ec")
}

func (RebalancerLiquidityRemovedFromContainer) Topic() common.Hash {
	return common.HexToHash("0x2bda316674f8d73d289689d7a3acdf8e353b7a142fb5a68ac2aa475104039c18")
}

func (RebalancerLiquidityTransferred) Topic() common.Hash {
	return common.HexToHash("0x2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a8")
}

func (RebalancerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (RebalancerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (RebalancerTargetBalanceSet) Topic() common.Hash {
	return common.HexToHash("0x65e69acd924a1a76eecbf2904e4d75f27e18f76276b116b0e5a87a4477683830")
}

func (RebalancerTransmitted) Topic() common.Hash {
	return common.HexToHash("0xe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2")
}

func (_Rebalancer *Rebalancer) Address() common.Address {
	return _Rebalancer.address
}

type RebalancerInterface interface {
	GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error)

	GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error)

	GetLiquidity(opts *bind.CallOpts) (*big.Int, error)

	GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error)

	GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error)

	GetTargetBalance(opts *bind.CallOpts) (*big.Int, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	ILocalToken(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error)

	ReceiveLiquidity(opts *bind.TransactOpts, remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error)

	RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetCrossChainRebalancers(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error)

	SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	SetTargetBalance(opts *bind.TransactOpts, targetBalance *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*RebalancerConfigSet, error)

	FilterCrossChainRebalancerSet(opts *bind.FilterOpts, remoteChainSelector []uint64) (*RebalancerCrossChainRebalancerSetIterator, error)

	WatchCrossChainRebalancerSet(opts *bind.WatchOpts, sink chan<- *RebalancerCrossChainRebalancerSet, remoteChainSelector []uint64) (event.Subscription, error)

	ParseCrossChainRebalancerSet(log types.Log) (*RebalancerCrossChainRebalancerSet, error)

	FilterFinalizationFailed(opts *bind.FilterOpts, ocrSeqNum []uint64, remoteChainSelector []uint64) (*RebalancerFinalizationFailedIterator, error)

	WatchFinalizationFailed(opts *bind.WatchOpts, sink chan<- *RebalancerFinalizationFailed, ocrSeqNum []uint64, remoteChainSelector []uint64) (event.Subscription, error)

	ParseFinalizationFailed(log types.Log) (*RebalancerFinalizationFailed, error)

	FilterLiquidityAddedToContainer(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedToContainerIterator, error)

	WatchLiquidityAddedToContainer(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAddedToContainer, provider []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityAddedToContainer(log types.Log) (*RebalancerLiquidityAddedToContainer, error)

	FilterLiquidityContainerSet(opts *bind.FilterOpts, newLiquidityContainer []common.Address) (*RebalancerLiquidityContainerSetIterator, error)

	WatchLiquidityContainerSet(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityContainerSet, newLiquidityContainer []common.Address) (event.Subscription, error)

	ParseLiquidityContainerSet(log types.Log) (*RebalancerLiquidityContainerSet, error)

	FilterLiquidityRemovedFromContainer(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedFromContainerIterator, error)

	WatchLiquidityRemovedFromContainer(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemovedFromContainer, remover []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityRemovedFromContainer(log types.Log) (*RebalancerLiquidityRemovedFromContainer, error)

	FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error)

	WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error)

	ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error)

	FilterTargetBalanceSet(opts *bind.FilterOpts, targetBalance []*big.Int) (*RebalancerTargetBalanceSetIterator, error)

	WatchTargetBalanceSet(opts *bind.WatchOpts, sink chan<- *RebalancerTargetBalanceSet, targetBalance []*big.Int) (event.Subscription, error)

	ParseTargetBalanceSet(log types.Log) (*RebalancerTargetBalanceSet, error)

	FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*RebalancerTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
