// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rebalancer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IRebalancerCrossChainRebalancerArgs struct {
	RemoteRebalancer    common.Address
	LocalBridge         common.Address
	RemoteToken         common.Address
	RemoteChainSelector uint64
	Enabled             bool
}

type RebalancerCrossChainRebalancer struct {
	RemoteRebalancer common.Address
	LocalBridge      common.Address
	RemoteToken      common.Address
	Enabled          bool
}

var RebalancerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"localChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidRemoteChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestSequenceNumber\",\"type\":\"uint64\"}],\"name\":\"NonIncreasingSequenceNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fromChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"toChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeSpecificData\",\"type\":\"bytes\"}],\"name\":\"LiquidityTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCrossChainRebalancers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getCrossChainRebalancer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structRebalancer.CrossChainRebalancer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalLiquidityContainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedDestChains\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_localToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeSpecificPayload\",\"type\":\"bytes\"}],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs\",\"name\":\"crossChainLiqManager\",\"type\":\"tuple\"}],\"name\":\"setCrossChainRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"crossChainRebalancers\",\"type\":\"tuple[]\"}],\"name\":\"setCrossChainRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"name\":\"setLocalLiquidityContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR3Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

var RebalancerABI = RebalancerMetaData.ABI

var RebalancerBin = RebalancerMetaData.Bin

func DeployRebalancer(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, localChainSelector uint64, localLiquidityContainer common.Address) (common.Address, *types.Transaction, *Rebalancer, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RebalancerBin), backend, token, localChainSelector, localLiquidityContainer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rebalancer{address: address, abi: *parsed, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

type Rebalancer struct {
	address common.Address
	abi     abi.ABI
	RebalancerCaller
	RebalancerTransactor
	RebalancerFilterer
}

type RebalancerCaller struct {
	contract *bind.BoundContract
}

type RebalancerTransactor struct {
	contract *bind.BoundContract
}

type RebalancerFilterer struct {
	contract *bind.BoundContract
}

type RebalancerSession struct {
	Contract     *Rebalancer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type RebalancerCallerSession struct {
	Contract *RebalancerCaller
	CallOpts bind.CallOpts
}

type RebalancerTransactorSession struct {
	Contract     *RebalancerTransactor
	TransactOpts bind.TransactOpts
}

type RebalancerRaw struct {
	Contract *Rebalancer
}

type RebalancerCallerRaw struct {
	Contract *RebalancerCaller
}

type RebalancerTransactorRaw struct {
	Contract *RebalancerTransactor
}

func NewRebalancer(address common.Address, backend bind.ContractBackend) (*Rebalancer, error) {
	abi, err := abi.JSON(strings.NewReader(RebalancerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindRebalancer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rebalancer{address: address, abi: abi, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

func NewRebalancerCaller(address common.Address, caller bind.ContractCaller) (*RebalancerCaller, error) {
	contract, err := bindRebalancer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerCaller{contract: contract}, nil
}

func NewRebalancerTransactor(address common.Address, transactor bind.ContractTransactor) (*RebalancerTransactor, error) {
	contract, err := bindRebalancer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerTransactor{contract: contract}, nil
}

func NewRebalancerFilterer(address common.Address, filterer bind.ContractFilterer) (*RebalancerFilterer, error) {
	contract, err := bindRebalancer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RebalancerFilterer{contract: contract}, nil
}

func bindRebalancer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_Rebalancer *RebalancerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.RebalancerCaller.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCaller) GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getAllCrossChainRebalancers")

	if err != nil {
		return *new([]IRebalancerCrossChainRebalancerArgs), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRebalancerCrossChainRebalancerArgs)).(*[]IRebalancerCrossChainRebalancerArgs)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getCrossChainRebalancer", chainSelector)

	if err != nil {
		return *new(RebalancerCrossChainRebalancer), err
	}

	out0 := *abi.ConvertType(out[0], new(RebalancerCrossChainRebalancer)).(*RebalancerCrossChainRebalancer)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCallerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCaller) GetLiquidity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLiquidity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLocalLiquidityContainer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getSupportedDestChains")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) ILocalToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "i_localToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SequenceNumber = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_Rebalancer *RebalancerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "acceptOwnership")
}

func (_Rebalancer *RebalancerSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactor) AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "addLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "rebalanceLiquidity", chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactorSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactor) RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "removeLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancer", crossChainLiqManager)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancer0(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancer0", crossChainRebalancers)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancer0(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer0(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancer0(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer0(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactor) SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setLocalLiquidityContainer", localLiquidityContainer)
}

func (_Rebalancer *RebalancerSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactorSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactor) SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setOCR3Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactorSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transferOwnership", to)
}

func (_Rebalancer *RebalancerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.RawTransact(opts, nil)
}

func (_Rebalancer *RebalancerSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

type RebalancerConfigSetIterator struct {
	Event *RebalancerConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerConfigSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &RebalancerConfigSetIterator{contract: _Rebalancer.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerConfigSet)
				if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseConfigSet(log types.Log) (*RebalancerConfigSet, error) {
	event := new(RebalancerConfigSet)
	if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityAddedIterator struct {
	Event *RebalancerLiquidityAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityAddedIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityAdded struct {
	Provider common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityAddedIterator{contract: _Rebalancer.contract, event: "LiquidityAdded", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityAdded)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityAdded(log types.Log) (*RebalancerLiquidityAdded, error) {
	event := new(RebalancerLiquidityAdded)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityRemovedIterator struct {
	Event *RebalancerLiquidityRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityRemovedIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityRemoved struct {
	Remover common.Address
	Amount  *big.Int
	Raw     types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedIterator, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityRemovedIterator{contract: _Rebalancer.contract, event: "LiquidityRemoved", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityRemoved)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityRemoved(log types.Log) (*RebalancerLiquidityRemoved, error) {
	event := new(RebalancerLiquidityRemoved)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityTransferredIterator struct {
	Event *RebalancerLiquidityTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityTransferred struct {
	OcrSeqNum          uint64
	FromChainSelector  uint64
	ToChainSelector    uint64
	To                 common.Address
	Amount             *big.Int
	BridgeSpecificData []byte
	Raw                types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityTransferredIterator{contract: _Rebalancer.contract, event: "LiquidityTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error) {
	event := new(RebalancerLiquidityTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferRequestedIterator struct {
	Event *RebalancerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferRequestedIterator{contract: _Rebalancer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferRequested)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error) {
	event := new(RebalancerOwnershipTransferRequested)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferredIterator struct {
	Event *RebalancerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferredIterator{contract: _Rebalancer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error) {
	event := new(RebalancerOwnershipTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerTransmittedIterator struct {
	Event *RebalancerTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerTransmittedIterator) Error() error {
	return it.fail
}

func (it *RebalancerTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerTransmitted struct {
	ConfigDigest   [32]byte
	SequenceNumber uint64
	Raw            types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &RebalancerTransmittedIterator{contract: _Rebalancer.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerTransmitted)
				if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseTransmitted(log types.Log) (*RebalancerTransmitted, error) {
	event := new(RebalancerTransmitted)
	if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs       bool
	ConfigDigest   [32]byte
	SequenceNumber uint64
}

func (_Rebalancer *Rebalancer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Rebalancer.abi.Events["ConfigSet"].ID:
		return _Rebalancer.ParseConfigSet(log)
	case _Rebalancer.abi.Events["LiquidityAdded"].ID:
		return _Rebalancer.ParseLiquidityAdded(log)
	case _Rebalancer.abi.Events["LiquidityRemoved"].ID:
		return _Rebalancer.ParseLiquidityRemoved(log)
	case _Rebalancer.abi.Events["LiquidityTransferred"].ID:
		return _Rebalancer.ParseLiquidityTransferred(log)
	case _Rebalancer.abi.Events["OwnershipTransferRequested"].ID:
		return _Rebalancer.ParseOwnershipTransferRequested(log)
	case _Rebalancer.abi.Events["OwnershipTransferred"].ID:
		return _Rebalancer.ParseOwnershipTransferred(log)
	case _Rebalancer.abi.Events["Transmitted"].ID:
		return _Rebalancer.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (RebalancerConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (RebalancerLiquidityAdded) Topic() common.Hash {
	return common.HexToHash("0xc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb312088")
}

func (RebalancerLiquidityRemoved) Topic() common.Hash {
	return common.HexToHash("0xc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719")
}

func (RebalancerLiquidityTransferred) Topic() common.Hash {
	return common.HexToHash("0x84427a21242059e57b9ffbecbdb5e833641343523291662895b971309ec75c89")
}

func (RebalancerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (RebalancerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (RebalancerTransmitted) Topic() common.Hash {
	return common.HexToHash("0xe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2")
}

func (_Rebalancer *Rebalancer) Address() common.Address {
	return _Rebalancer.address
}

type RebalancerInterface interface {
	GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error)

	GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error)

	GetLiquidity(opts *bind.CallOpts) (*big.Int, error)

	GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error)

	GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	ILocalToken(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error)

	RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetCrossChainRebalancer0(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error)

	SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*RebalancerConfigSet, error)

	FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedIterator, error)

	WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityAdded(log types.Log) (*RebalancerLiquidityAdded, error)

	FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedIterator, error)

	WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityRemoved(log types.Log) (*RebalancerLiquidityRemoved, error)

	FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error)

	WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error)

	ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*RebalancerTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
