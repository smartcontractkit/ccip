// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rebalancer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type IRebalancerCrossChainRebalancerArgs struct {
	RemoteRebalancer    common.Address
	LocalBridge         common.Address
	RemoteToken         common.Address
	RemoteChainSelector uint64
	Enabled             bool
}

type RebalancerCrossChainRebalancer struct {
	RemoteRebalancer common.Address
	LocalBridge      common.Address
	RemoteToken      common.Address
	Enabled          bool
}

var RebalancerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"localChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidRemoteChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestSequenceNumber\",\"type\":\"uint64\"}],\"name\":\"NonIncreasingSequenceNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CrossChainRebalancerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeSpecificData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FinalizationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityContainer\",\"type\":\"address\"}],\"name\":\"LiquidityContainerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fromChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"toChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeSpecificData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeReturnData\",\"type\":\"bytes\"}],\"name\":\"LiquidityTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCrossChainRebalancers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getCrossChainRebalancer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structRebalancer.CrossChainRebalancer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalLiquidityContainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedDestChains\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_localToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeSpecificPayload\",\"type\":\"bytes\"}],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeSpecificPayload\",\"type\":\"bytes\"}],\"name\":\"receiveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs\",\"name\":\"crossChainLiqManager\",\"type\":\"tuple\"}],\"name\":\"setCrossChainRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteRebalancer\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structIRebalancer.CrossChainRebalancerArgs[]\",\"name\":\"crossChainRebalancers\",\"type\":\"tuple[]\"}],\"name\":\"setCrossChainRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"name\":\"setLocalLiquidityContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR3Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620044c5380380620044c5833981016040819052620000349162000214565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000150565b505046608052506001600160401b038216600003620000f05760405163f89d762960e01b815260040160405180910390fd5b6001600160a01b038316620001185760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0392831660a0526001600160401b039190911660c052600a80546001600160a01b0319169190921617905562000273565b336001600160a01b03821603620001aa5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b03811681146200021157600080fd5b50565b6000806000606084860312156200022a57600080fd5b83516200023781620001fb565b60208501519093506001600160401b03811681146200025557600080fd5b60408501519092506200026881620001fb565b809150509250925092565b60805160a05160c0516141dc620002e9600039600081816127000152612dc601526000818161038b0152818161064f01528181610779015281816107f0015281816113ba015281816115090152818161265101528181612c5b0152612d250152600081816116ee015261173a01526141dc6000f3fe6080604052600436106101795760003560e01c806379ba5097116100cb578063a720da8b1161007f578063f2fde38b11610059578063f2fde38b146105a2578063f8c2d8fa146105c2578063fe65d5af146105e257600080fd5b8063a720da8b1461051c578063afcb95d71461053c578063b1dc65a41461058257600080fd5b80638da5cb5b116100b05780638da5cb5b146104b1578063958e31b6146104dc5780639c8f9f23146104fc57600080fd5b806379ba50971461045f57806381ff70481461047457600080fd5b8063568446e71161012d5780636a11ee90116101075780636a11ee90146103f4578063706bf64514610414578063791781f51461043457600080fd5b8063568446e7146102675780636511d91914610379578063666cab8d146103d257600080fd5b80633275636e1161015e5780633275636e14610203578063348759c11461022557806351c6590a1461024757600080fd5b80630910a51014610185578063181f5a77146101ad57600080fd5b3661018057005b600080fd5b34801561019157600080fd5b5061019a610604565b6040519081526020015b60405180910390f35b3480156101b957600080fd5b506101f66040518060400160405280601481526020017f526562616c616e63657220312e302e302d64657600000000000000000000000081525081565b6040516101a4919061338a565b34801561020f57600080fd5b5061022361021e3660046133a4565b6106bf565b005b34801561023157600080fd5b5061023a6106d3565b6040516101a491906133bc565b34801561025357600080fd5b5061022361026236600461340a565b61075f565b34801561027357600080fd5b5061032a610282366004613440565b6040805160808101825260008082526020820181905291810182905260608101919091525067ffffffffffffffff166000908152600860209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff161515606082015290565b60408051825173ffffffffffffffffffffffffffffffffffffffff90811682526020808501518216908301528383015116918101919091526060918201511515918101919091526080016101a4565b34801561038557600080fd5b506103ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a4565b3480156103de57600080fd5b506103e7610914565b6040516101a491906134ac565b34801561040057600080fd5b5061022361040f36600461370e565b610982565b34801561042057600080fd5b5061022361042f3660046137db565b61119a565b34801561044057600080fd5b50600a5473ffffffffffffffffffffffffffffffffffffffff166103ad565b34801561046b57600080fd5b50610223611211565b34801561048057600080fd5b506004546002546040805163ffffffff808516825264010000000090940490931660208401528201526060016101a4565b3480156104bd57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103ad565b3480156104e857600080fd5b506102236104f7366004613841565b61130e565b34801561050857600080fd5b5061022361051736600461340a565b611367565b34801561052857600080fd5b5061022361053736600461389b565b611563565b34801561054857600080fd5b50600254600454604080516001815260208101939093526801000000000000000090910467ffffffffffffffff16908201526060016101a4565b34801561058e57600080fd5b5061022361059d366004613955565b6115ab565b3480156105ae57600080fd5b506102236105bd3660046137db565b611c25565b3480156105ce57600080fd5b506102236105dd366004613a0c565b611c36565b3480156105ee57600080fd5b506105f7611c90565b6040516101a49190613a74565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613b09565b905090565b6106c7611e5c565b6106d081611edf565b50565b6060600980548060200260200160405190810160405280929190818152602001828054801561075557602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116107105790505b5050505050905090565b6107a173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846122db565b600a546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190613b30565b50600a546040517feb521a4c0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063eb521a4c90602401600060405180830381600087803b1580156108cc57600080fd5b505af11580156108e0573d6000803e3d6000fd5b50506040518392503391507fc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb31208890600090a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561075557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161094e575050505050905090565b855185518560ff16601f8311156109fa576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610a64576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016109f1565b818314610af2576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016109f1565b610afd816003613b7c565b8311610b65576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016109f1565b610b6d611e5c565b60065460005b81811015610c69576005600060068381548110610b9257610b92613b99565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905560078054600592919084908110610c0257610c02613b99565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055610c6281613bc8565b9050610b73565b50895160005b818110156110425760008c8281518110610c8b57610c8b613b99565b6020026020010151905060006002811115610ca857610ca8613c00565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610ce757610ce7613c00565b14610d4e576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff8116610d9b576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610e4b57610e4b613c00565b021790555090505060008c8381518110610e6757610e67613b99565b6020026020010151905060006002811115610e8457610e84613c00565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610ec357610ec3613c00565b14610f2a576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff8116610f77576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561102757611027613c00565b021790555090505050508061103b90613bc8565b9050610c6f565b508a516110569060069060208e019061325e565b50895161106a9060079060208d019061325e565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c1617179055600480546110f09146913091906000906110c29063ffffffff16613c2f565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e6123b7565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f60405161118499989796959493929190613c52565b60405180910390a1505050505050505050505050565b6111a2611e5c565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f07dc474694ac40123aadcd2445f1b38d2eb353edd9319dcea043548ab34990ec90600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff163314611292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016109f1565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611316611e5c565b611361848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525067ffffffffffffffff9250612462915050565b50505050565b61136f611e5c565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190613b09565b90508181101561146b576040517fa17e11d500000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044016109f1565b600a546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690630a861f2a90602401600060405180830381600087803b1580156114d757600080fd5b505af11580156114eb573d6000803e3d6000fd5b5061153292505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690503384612792565b604051829033907fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf984017171990600090a35050565b61156b611e5c565b60005b818110156115a65761159683838381811061158b5761158b613b99565b905060a00201611edf565b61159f81613bc8565b905061156e565b505050565b60045460208901359067ffffffffffffffff6801000000000000000090910481169082161161162e57600480546040517f6e376b6600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808516938201939093526801000000000000000090910490911660248201526044016109f1565b6116398888836127e8565b600480547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416021790556040805160608101825260025480825260035460ff808216602085015261010090910416928201929092528a359182146116eb5780516040517f93df584c0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016109f1565b467f00000000000000000000000000000000000000000000000000000000000000001461176c576040517f0f01ce850000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201524660248201526044016109f1565b6040805183815267ffffffffffffffff851660208201527fe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2910160405180910390a160208101516117be906001613ce8565b60ff1687146117f9576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868514611832576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561187557611875613c00565b600281111561188657611886613c00565b90525090506002816020015160028111156118a3576118a3613c00565b1480156118ea57506007816000015160ff16815481106118c5576118c5613b99565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b611920576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600061192e866020613b7c565b611939896020613b7c565b6119458c610144613d01565b61194f9190613d01565b6119599190613d01565b905036811461199d576040517f8e1192e1000000000000000000000000000000000000000000000000000000008152600481018290523660248201526044016109f1565b5060008a8a6040516119b0929190613d14565b6040519081900381206119c7918e90602001613d24565b6040516020818303038152906040528051906020012090506119e76132e8565b8860005b81811015611c145760006001858a8460208110611a0a57611a0a613b99565b611a1791901a601b613ce8565b8f8f86818110611a2957611a29613b99565b905060200201358e8e87818110611a4257611a42613b99565b9050602002013560405160008152602001604052604051611a7f949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611aa1573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff8082168652939750919550929392840191610100909104166002811115611b2457611b24613c00565b6002811115611b3557611b35613c00565b9052509050600181602001516002811115611b5257611b52613c00565b14611b89576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f8110611ba057611ba0613b99565b602002015115611bdc576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f8110611bf757611bf7613b99565b9115156020909202015250611c0d905081613bc8565b90506119eb565b505050505050505050505050505050565b611c2d611e5c565b6106d08161297c565b611c3e611e5c565b611c8985858567ffffffffffffffff86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a7192505050565b5050505050565b60095460609060008167ffffffffffffffff811115611cb157611cb16134bf565b604051908082528060200260200182016040528015611d2857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181611ccf5790505b50905060005b82811015611e5557600060098281548110611d4b57611d4b613b99565b60009182526020808320600483040154600390921660089081026101000a90920467ffffffffffffffff16808452918152604092839020835160808082018652825473ffffffffffffffffffffffffffffffffffffffff9081168352600184015481168386019081526002909401548082168489019081527401000000000000000000000000000000000000000090910460ff1615156060808601918252895160a081018b5286518516815296518416978701979097529051909116968401969096529282018490529351151591810191909152855191935090859085908110611e3757611e37613b99565b6020026020010181905250505080611e4e90613bc8565b9050611d2e565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611edd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016109f1565b565b611eef6080820160608301613440565b67ffffffffffffffff16600003611f32576040517ff89d762900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611f4160208301836137db565b73ffffffffffffffffffffffffffffffffffffffff161480611f8857506000611f7060408301602084016137db565b73ffffffffffffffffffffffffffffffffffffffff16145b80611fb857506000611fa060608301604084016137db565b73ffffffffffffffffffffffffffffffffffffffff16145b15611fef576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008816120046080850160608601613440565b67ffffffffffffffff16815260208101919091526040016000206002015473ffffffffffffffffffffffffffffffffffffffff160361209057600961204f6080830160608401613440565b8154600181018355600092835260209092206004830401805460039093166008026101000a67ffffffffffffffff8181021990941692909316929092021790555b6040805160808101909152806120a960208401846137db565b73ffffffffffffffffffffffffffffffffffffffff1681526020018260200160208101906120d791906137db565b73ffffffffffffffffffffffffffffffffffffffff16815260200161210260608401604085016137db565b73ffffffffffffffffffffffffffffffffffffffff16815260200161212d60a0840160808501613d38565b15159052600860006121456080850160608601613440565b67ffffffffffffffff16815260208082019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559385015160018301805491831691909516179093559083015160029091018054606094850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090911692909316919091179190911790556122269060808301908301613440565b67ffffffffffffffff167fab9bd0e4888101232b8f09dae2952ff59a6eea4a19fbddf2a8ca7b23f0e4cb4061226160408401602085016137db565b61227160608501604086016137db565b61227e60208601866137db565b61228e60a0870160808801613d38565b6040516122d0949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152901515606082015260800190565b60405180910390a250565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526113619085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e45565b6000808a8a8a8a8a8a8a8a8a6040516020016123db99989796959493929190613d55565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b67ffffffffffffffff84166000908152600860209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff16151560608201819052612527576040517fc9ff038f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526024016109f1565b602081015181516040517f38314bb200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916338314bb2916125839130908890600401613dea565b600060405180830381600087803b15801561259d57600080fd5b505af19250505080156125ae575060015b612633573d8080156125dc576040519150601f19603f3d011682016040523d82523d6000602084013e6125e1565b606091505b508567ffffffffffffffff168367ffffffffffffffff167fa481d91c3f9574c23ee84fef85246354b760a0527a535d6382354e4684703ce38684604051612629929190613e2c565b60405180910390a3505b600a5461267a9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911686612f51565b600a546040517feb521a4c0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063eb521a4c90602401600060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168567ffffffffffffffff168367ffffffffffffffff167f2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a8308888604051806020016040528060008152506040516127839493929190613e51565b60405180910390a45050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526115a69084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612335565b60006127f683850185613f8a565b8051519091506000819003612836576040517ebf199700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156128e2576128d28360000151828151811061285a5761285a613b99565b6020026020010151604001518460000151838151811061287c5761287c613b99565b6020026020010151600001518560000151848151811061289e5761289e613b99565b60200260200101516020015187876000015186815181106128c1576128c1613b99565b602002602001015160600151612a71565b6128db81613bc8565b9050612839565b5060208201515160005b81811015612973576129638460200151828151811061290d5761290d613b99565b6020026020010151602001518560200151838151811061292f5761292f613b99565b6020026020010151600001518660200151848151811061295157612951613b99565b60200260200101516040015188612462565b61296c81613bc8565b90506128ec565b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036129fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016109f1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612a7b610604565b905084811015612ac1576040517fa17e11d500000000000000000000000000000000000000000000000000000000815260048101869052602481018290526044016109f1565b67ffffffffffffffff86166000908152600860209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff16151560608201819052612b86576040517fc9ff038f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff881660048201526024016109f1565b600a546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff90911690630a861f2a90602401600060405180830381600087803b158015612bf257600080fd5b505af1158015612c06573d6000803e3d6000fd5b5050505060208101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca9190613b30565b506020810151604080830151835191517fa71d98b700000000000000000000000000000000000000000000000000000000815260009373ffffffffffffffffffffffffffffffffffffffff169263a71d98b7928a92612d52927f000000000000000000000000000000000000000000000000000000000000000092918e908c906004016140fe565b60006040518083038185885af1158015612d70573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612db79190810190614145565b90508767ffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168667ffffffffffffffff167f2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a885600001518b8987604051612e339493929190613e51565b60405180910390a45050505050505050565b6000612ea7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661304f9092919063ffffffff16565b8051909150156115a65780806020019051810190612ec59190613b30565b6115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109f1565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fec9190613b09565b612ff69190613d01565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506113619085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612335565b606061305e8484600085613066565b949350505050565b6060824710156130f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109f1565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161312191906141b3565b60006040518083038185875af1925050503d806000811461315e576040519150601f19603f3d011682016040523d82523d6000602084013e613163565b606091505b50915091506131748783838761317f565b979650505050505050565b6060831561321557825160000361320e5773ffffffffffffffffffffffffffffffffffffffff85163b61320e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109f1565b508161305e565b61305e838381511561322a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f1919061338a565b8280548282559060005260206000209081019282156132d8579160200282015b828111156132d857825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061327e565b506132e4929150613307565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b808211156132e45760008155600101613308565b60005b8381101561333757818101518382015260200161331f565b50506000910152565b6000815180845261335881602086016020860161331c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061339d6020830184613340565b9392505050565b600060a082840312156133b657600080fd5b50919050565b6020808252825182820181905260009190848201906040850190845b818110156133fe57835167ffffffffffffffff16835292840192918401916001016133d8565b50909695505050505050565b60006020828403121561341c57600080fd5b5035919050565b803567ffffffffffffffff8116811461343b57600080fd5b919050565b60006020828403121561345257600080fd5b61339d82613423565b600081518084526020808501945080840160005b838110156134a157815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161346f565b509495945050505050565b60208152600061339d602083018461345b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715613511576135116134bf565b60405290565b6040805190810167ffffffffffffffff81118282101715613511576135116134bf565b6040516080810167ffffffffffffffff81118282101715613511576135116134bf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135a4576135a46134bf565b604052919050565b600067ffffffffffffffff8211156135c6576135c66134bf565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff811681146106d057600080fd5b600082601f83011261360357600080fd5b81356020613618613613836135ac565b61355d565b82815260059290921b8401810191818101908684111561363757600080fd5b8286015b8481101561365b57803561364e816135d0565b835291830191830161363b565b509695505050505050565b803560ff8116811461343b57600080fd5b600067ffffffffffffffff821115613691576136916134bf565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126136ce57600080fd5b81356136dc61361382613677565b8181528460208386010111156136f157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561372757600080fd5b863567ffffffffffffffff8082111561373f57600080fd5b61374b8a838b016135f2565b9750602089013591508082111561376157600080fd5b61376d8a838b016135f2565b965061377b60408a01613666565b9550606089013591508082111561379157600080fd5b61379d8a838b016136bd565b94506137ab60808a01613423565b935060a08901359150808211156137c157600080fd5b506137ce89828a016136bd565b9150509295509295509295565b6000602082840312156137ed57600080fd5b813561339d816135d0565b60008083601f84011261380a57600080fd5b50813567ffffffffffffffff81111561382257600080fd5b60208301915083602082850101111561383a57600080fd5b9250929050565b6000806000806060858703121561385757600080fd5b61386085613423565b935060208501359250604085013567ffffffffffffffff81111561388357600080fd5b61388f878288016137f8565b95989497509550505050565b600080602083850312156138ae57600080fd5b823567ffffffffffffffff808211156138c657600080fd5b818501915085601f8301126138da57600080fd5b8135818111156138e957600080fd5b86602060a0830285010111156138fe57600080fd5b60209290920196919550909350505050565b60008083601f84011261392257600080fd5b50813567ffffffffffffffff81111561393a57600080fd5b6020830191508360208260051b850101111561383a57600080fd5b60008060008060008060008060e0898b03121561397157600080fd5b606089018a81111561398257600080fd5b8998503567ffffffffffffffff8082111561399c57600080fd5b6139a88c838d016137f8565b909950975060808b01359150808211156139c157600080fd5b6139cd8c838d01613910565b909750955060a08b01359150808211156139e657600080fd5b506139f38b828c01613910565b999c989b50969995989497949560c00135949350505050565b600080600080600060808688031215613a2457600080fd5b613a2d86613423565b94506020860135935060408601359250606086013567ffffffffffffffff811115613a5757600080fd5b613a63888289016137f8565b969995985093965092949392505050565b602080825282518282018190526000919060409081850190868401855b82811015613afc578151805173ffffffffffffffffffffffffffffffffffffffff90811686528782015181168887015286820151168686015260608082015167ffffffffffffffff169086015260809081015115159085015260a09093019290850190600101613a91565b5091979650505050505050565b600060208284031215613b1b57600080fd5b5051919050565b80151581146106d057600080fd5b600060208284031215613b4257600080fd5b815161339d81613b22565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417613b9357613b93613b4d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bf957613bf9613b4d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818103613c4857613c48613b4d565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613c828184018a61345b565b90508281036080840152613c96818961345b565b905060ff871660a084015282810360c0840152613cb38187613340565b905067ffffffffffffffff851660e0840152828103610100840152613cd88185613340565b9c9b505050505050505050505050565b60ff8181168382160190811115613b9357613b93613b4d565b80820180821115613b9357613b93613b4d565b8183823760009101908152919050565b828152606082602083013760800192915050565b600060208284031215613d4a57600080fd5b813561339d81613b22565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152613d9c8285018b61345b565b91508382036080850152613db0828a61345b565b915060ff881660a085015283820360c0850152613dcd8288613340565b90861660e08501528381036101008501529050613cd88185613340565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152613e236060830184613340565b95945050505050565b604081526000613e3f6040830185613340565b8281036020840152613e238185613340565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152608060408201526000613e866080830185613340565b82810360608401526131748185613340565b600082601f830112613ea957600080fd5b81356020613eb9613613836135ac565b82815260059290921b84018101918181019086841115613ed857600080fd5b8286015b8481101561365b57803567ffffffffffffffff80821115613efd5760008081fd5b81890191506060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215613f365760008081fd5b613f3e6134ee565b8784013581526040613f51818601613423565b828a0152918401359183831115613f685760008081fd5b613f768d8a858801016136bd565b908201528652505050918301918301613edc565b60006020808385031215613f9d57600080fd5b823567ffffffffffffffff80821115613fb557600080fd5b9084019060408287031215613fc957600080fd5b613fd1613517565b823582811115613fe057600080fd5b8301601f81018813613ff157600080fd5b8035613fff613613826135ac565b81815260059190911b8201860190868101908a83111561401e57600080fd5b8784015b838110156140ca5780358781111561403957600080fd5b85016080818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561406d57600080fd5b61407561353a565b8a820135815260408201358b82015261409060608301613423565b60408201526080820135898111156140a85760008081fd5b6140b68f8d838601016136bd565b606083015250845250918801918801614022565b50845250505082840135828111156140e157600080fd5b6140ed88828601613e98565b948201949094529695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a0608083015261317460a0830184613340565b60006020828403121561415757600080fd5b815167ffffffffffffffff81111561416e57600080fd5b8201601f8101841361417f57600080fd5b805161418d61361382613677565b8181528560208385010111156141a257600080fd5b613e2382602083016020860161331c565b600082516141c581846020870161331c565b919091019291505056fea164736f6c6343000813000a",
}

var RebalancerABI = RebalancerMetaData.ABI

var RebalancerBin = RebalancerMetaData.Bin

func DeployRebalancer(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, localChainSelector uint64, localLiquidityContainer common.Address) (common.Address, *types.Transaction, *Rebalancer, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RebalancerBin), backend, token, localChainSelector, localLiquidityContainer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rebalancer{address: address, abi: *parsed, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

type Rebalancer struct {
	address common.Address
	abi     abi.ABI
	RebalancerCaller
	RebalancerTransactor
	RebalancerFilterer
}

type RebalancerCaller struct {
	contract *bind.BoundContract
}

type RebalancerTransactor struct {
	contract *bind.BoundContract
}

type RebalancerFilterer struct {
	contract *bind.BoundContract
}

type RebalancerSession struct {
	Contract     *Rebalancer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type RebalancerCallerSession struct {
	Contract *RebalancerCaller
	CallOpts bind.CallOpts
}

type RebalancerTransactorSession struct {
	Contract     *RebalancerTransactor
	TransactOpts bind.TransactOpts
}

type RebalancerRaw struct {
	Contract *Rebalancer
}

type RebalancerCallerRaw struct {
	Contract *RebalancerCaller
}

type RebalancerTransactorRaw struct {
	Contract *RebalancerTransactor
}

func NewRebalancer(address common.Address, backend bind.ContractBackend) (*Rebalancer, error) {
	abi, err := abi.JSON(strings.NewReader(RebalancerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindRebalancer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rebalancer{address: address, abi: abi, RebalancerCaller: RebalancerCaller{contract: contract}, RebalancerTransactor: RebalancerTransactor{contract: contract}, RebalancerFilterer: RebalancerFilterer{contract: contract}}, nil
}

func NewRebalancerCaller(address common.Address, caller bind.ContractCaller) (*RebalancerCaller, error) {
	contract, err := bindRebalancer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerCaller{contract: contract}, nil
}

func NewRebalancerTransactor(address common.Address, transactor bind.ContractTransactor) (*RebalancerTransactor, error) {
	contract, err := bindRebalancer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RebalancerTransactor{contract: contract}, nil
}

func NewRebalancerFilterer(address common.Address, filterer bind.ContractFilterer) (*RebalancerFilterer, error) {
	contract, err := bindRebalancer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RebalancerFilterer{contract: contract}, nil
}

func bindRebalancer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RebalancerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_Rebalancer *RebalancerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.RebalancerCaller.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalancerTransactor.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rebalancer.Contract.contract.Call(opts, result, method, params...)
}

func (_Rebalancer *RebalancerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transfer(opts)
}

func (_Rebalancer *RebalancerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rebalancer.Contract.contract.Transact(opts, method, params...)
}

func (_Rebalancer *RebalancerCaller) GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getAllCrossChainRebalancers")

	if err != nil {
		return *new([]IRebalancerCrossChainRebalancerArgs), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRebalancerCrossChainRebalancerArgs)).(*[]IRebalancerCrossChainRebalancerArgs)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetAllCrossChainRebalancers() ([]IRebalancerCrossChainRebalancerArgs, error) {
	return _Rebalancer.Contract.GetAllCrossChainRebalancers(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getCrossChainRebalancer", chainSelector)

	if err != nil {
		return *new(RebalancerCrossChainRebalancer), err
	}

	out0 := *abi.ConvertType(out[0], new(RebalancerCrossChainRebalancer)).(*RebalancerCrossChainRebalancer)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCallerSession) GetCrossChainRebalancer(chainSelector uint64) (RebalancerCrossChainRebalancer, error) {
	return _Rebalancer.Contract.GetCrossChainRebalancer(&_Rebalancer.CallOpts, chainSelector)
}

func (_Rebalancer *RebalancerCaller) GetLiquidity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLiquidity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLiquidity() (*big.Int, error) {
	return _Rebalancer.Contract.GetLiquidity(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getLocalLiquidityContainer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _Rebalancer.Contract.GetLocalLiquidityContainer(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getSupportedDestChains")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetSupportedDestChains() ([]uint64, error) {
	return _Rebalancer.Contract.GetSupportedDestChains(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) GetTransmitters() ([]common.Address, error) {
	return _Rebalancer.Contract.GetTransmitters(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) ILocalToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "i_localToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) ILocalToken() (common.Address, error) {
	return _Rebalancer.Contract.ILocalToken(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _Rebalancer.Contract.LatestConfigDetails(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SequenceNumber = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

func (_Rebalancer *RebalancerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _Rebalancer.Contract.LatestConfigDigestAndEpoch(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Rebalancer *RebalancerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) Owner() (common.Address, error) {
	return _Rebalancer.Contract.Owner(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rebalancer.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_Rebalancer *RebalancerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerCallerSession) TypeAndVersion() (string, error) {
	return _Rebalancer.Contract.TypeAndVersion(&_Rebalancer.CallOpts)
}

func (_Rebalancer *RebalancerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "acceptOwnership")
}

func (_Rebalancer *RebalancerSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Rebalancer.Contract.AcceptOwnership(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactor) AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "addLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.AddLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "rebalanceLiquidity", chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactorSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.RebalanceLiquidity(&_Rebalancer.TransactOpts, chainSelector, amount, nativeBridgeFee, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactor) ReceiveLiquidity(opts *bind.TransactOpts, remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "receiveLiquidity", remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerSession) ReceiveLiquidity(remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.ReceiveLiquidity(&_Rebalancer.TransactOpts, remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactorSession) ReceiveLiquidity(remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.ReceiveLiquidity(&_Rebalancer.TransactOpts, remoteChainSelector, amount, bridgeSpecificPayload)
}

func (_Rebalancer *RebalancerTransactor) RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "removeLiquidity", amount)
}

func (_Rebalancer *RebalancerSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactorSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _Rebalancer.Contract.RemoveLiquidity(&_Rebalancer.TransactOpts, amount)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancer", crossChainLiqManager)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancer(crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer(&_Rebalancer.TransactOpts, crossChainLiqManager)
}

func (_Rebalancer *RebalancerTransactor) SetCrossChainRebalancer0(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setCrossChainRebalancer0", crossChainRebalancers)
}

func (_Rebalancer *RebalancerSession) SetCrossChainRebalancer0(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer0(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactorSession) SetCrossChainRebalancer0(crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetCrossChainRebalancer0(&_Rebalancer.TransactOpts, crossChainRebalancers)
}

func (_Rebalancer *RebalancerTransactor) SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setLocalLiquidityContainer", localLiquidityContainer)
}

func (_Rebalancer *RebalancerSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactorSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetLocalLiquidityContainer(&_Rebalancer.TransactOpts, localLiquidityContainer)
}

func (_Rebalancer *RebalancerTransactor) SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "setOCR3Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactorSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.SetOCR3Config(&_Rebalancer.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_Rebalancer *RebalancerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transferOwnership", to)
}

func (_Rebalancer *RebalancerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Rebalancer.Contract.TransferOwnership(&_Rebalancer.TransactOpts, to)
}

func (_Rebalancer *RebalancerTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _Rebalancer.Contract.Transmit(&_Rebalancer.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_Rebalancer *RebalancerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rebalancer.contract.RawTransact(opts, nil)
}

func (_Rebalancer *RebalancerSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

func (_Rebalancer *RebalancerTransactorSession) Receive() (*types.Transaction, error) {
	return _Rebalancer.Contract.Receive(&_Rebalancer.TransactOpts)
}

type RebalancerConfigSetIterator struct {
	Event *RebalancerConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerConfigSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &RebalancerConfigSetIterator{contract: _Rebalancer.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerConfigSet)
				if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseConfigSet(log types.Log) (*RebalancerConfigSet, error) {
	event := new(RebalancerConfigSet)
	if err := _Rebalancer.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerCrossChainRebalancerSetIterator struct {
	Event *RebalancerCrossChainRebalancerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerCrossChainRebalancerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerCrossChainRebalancerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerCrossChainRebalancerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerCrossChainRebalancerSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerCrossChainRebalancerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerCrossChainRebalancerSet struct {
	RemoteChainSelector uint64
	LocalBridge         common.Address
	RemoteToken         common.Address
	RemoteRebalancer    common.Address
	Enabled             bool
	Raw                 types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterCrossChainRebalancerSet(opts *bind.FilterOpts, remoteChainSelector []uint64) (*RebalancerCrossChainRebalancerSetIterator, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "CrossChainRebalancerSet", remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerCrossChainRebalancerSetIterator{contract: _Rebalancer.contract, event: "CrossChainRebalancerSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchCrossChainRebalancerSet(opts *bind.WatchOpts, sink chan<- *RebalancerCrossChainRebalancerSet, remoteChainSelector []uint64) (event.Subscription, error) {

	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "CrossChainRebalancerSet", remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerCrossChainRebalancerSet)
				if err := _Rebalancer.contract.UnpackLog(event, "CrossChainRebalancerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseCrossChainRebalancerSet(log types.Log) (*RebalancerCrossChainRebalancerSet, error) {
	event := new(RebalancerCrossChainRebalancerSet)
	if err := _Rebalancer.contract.UnpackLog(event, "CrossChainRebalancerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerFinalizationFailedIterator struct {
	Event *RebalancerFinalizationFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerFinalizationFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerFinalizationFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerFinalizationFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerFinalizationFailedIterator) Error() error {
	return it.fail
}

func (it *RebalancerFinalizationFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerFinalizationFailed struct {
	OcrSeqNum           uint64
	RemoteChainSelector uint64
	BridgeSpecificData  []byte
	Reason              []byte
	Raw                 types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterFinalizationFailed(opts *bind.FilterOpts, ocrSeqNum []uint64, remoteChainSelector []uint64) (*RebalancerFinalizationFailedIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "FinalizationFailed", ocrSeqNumRule, remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerFinalizationFailedIterator{contract: _Rebalancer.contract, event: "FinalizationFailed", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchFinalizationFailed(opts *bind.WatchOpts, sink chan<- *RebalancerFinalizationFailed, ocrSeqNum []uint64, remoteChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var remoteChainSelectorRule []interface{}
	for _, remoteChainSelectorItem := range remoteChainSelector {
		remoteChainSelectorRule = append(remoteChainSelectorRule, remoteChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "FinalizationFailed", ocrSeqNumRule, remoteChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerFinalizationFailed)
				if err := _Rebalancer.contract.UnpackLog(event, "FinalizationFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseFinalizationFailed(log types.Log) (*RebalancerFinalizationFailed, error) {
	event := new(RebalancerFinalizationFailed)
	if err := _Rebalancer.contract.UnpackLog(event, "FinalizationFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityAddedIterator struct {
	Event *RebalancerLiquidityAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityAddedIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityAdded struct {
	Provider common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityAddedIterator{contract: _Rebalancer.contract, event: "LiquidityAdded", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityAdded)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityAdded(log types.Log) (*RebalancerLiquidityAdded, error) {
	event := new(RebalancerLiquidityAdded)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityContainerSetIterator struct {
	Event *RebalancerLiquidityContainerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityContainerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityContainerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityContainerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityContainerSetIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityContainerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityContainerSet struct {
	NewLiquidityContainer common.Address
	Raw                   types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityContainerSet(opts *bind.FilterOpts, newLiquidityContainer []common.Address) (*RebalancerLiquidityContainerSetIterator, error) {

	var newLiquidityContainerRule []interface{}
	for _, newLiquidityContainerItem := range newLiquidityContainer {
		newLiquidityContainerRule = append(newLiquidityContainerRule, newLiquidityContainerItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityContainerSet", newLiquidityContainerRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityContainerSetIterator{contract: _Rebalancer.contract, event: "LiquidityContainerSet", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityContainerSet(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityContainerSet, newLiquidityContainer []common.Address) (event.Subscription, error) {

	var newLiquidityContainerRule []interface{}
	for _, newLiquidityContainerItem := range newLiquidityContainer {
		newLiquidityContainerRule = append(newLiquidityContainerRule, newLiquidityContainerItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityContainerSet", newLiquidityContainerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityContainerSet)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityContainerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityContainerSet(log types.Log) (*RebalancerLiquidityContainerSet, error) {
	event := new(RebalancerLiquidityContainerSet)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityContainerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityRemovedIterator struct {
	Event *RebalancerLiquidityRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityRemovedIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityRemoved struct {
	Remover common.Address
	Amount  *big.Int
	Raw     types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedIterator, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityRemovedIterator{contract: _Rebalancer.contract, event: "LiquidityRemoved", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityRemoved)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityRemoved(log types.Log) (*RebalancerLiquidityRemoved, error) {
	event := new(RebalancerLiquidityRemoved)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerLiquidityTransferredIterator struct {
	Event *RebalancerLiquidityTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerLiquidityTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerLiquidityTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerLiquidityTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerLiquidityTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerLiquidityTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerLiquidityTransferred struct {
	OcrSeqNum          uint64
	FromChainSelector  uint64
	ToChainSelector    uint64
	To                 common.Address
	Amount             *big.Int
	BridgeSpecificData []byte
	BridgeReturnData   []byte
	Raw                types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerLiquidityTransferredIterator{contract: _Rebalancer.contract, event: "LiquidityTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerLiquidityTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error) {
	event := new(RebalancerLiquidityTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferRequestedIterator struct {
	Event *RebalancerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferRequestedIterator{contract: _Rebalancer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferRequested)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error) {
	event := new(RebalancerOwnershipTransferRequested)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerOwnershipTransferredIterator struct {
	Event *RebalancerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *RebalancerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RebalancerOwnershipTransferredIterator{contract: _Rebalancer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerOwnershipTransferred)
				if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error) {
	event := new(RebalancerOwnershipTransferred)
	if err := _Rebalancer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RebalancerTransmittedIterator struct {
	Event *RebalancerTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RebalancerTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RebalancerTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RebalancerTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RebalancerTransmittedIterator) Error() error {
	return it.fail
}

func (it *RebalancerTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RebalancerTransmitted struct {
	ConfigDigest   [32]byte
	SequenceNumber uint64
	Raw            types.Log
}

func (_Rebalancer *RebalancerFilterer) FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error) {

	logs, sub, err := _Rebalancer.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &RebalancerTransmittedIterator{contract: _Rebalancer.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_Rebalancer *RebalancerFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error) {

	logs, sub, err := _Rebalancer.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RebalancerTransmitted)
				if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Rebalancer *RebalancerFilterer) ParseTransmitted(log types.Log) (*RebalancerTransmitted, error) {
	event := new(RebalancerTransmitted)
	if err := _Rebalancer.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs       bool
	ConfigDigest   [32]byte
	SequenceNumber uint64
}

func (_Rebalancer *Rebalancer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Rebalancer.abi.Events["ConfigSet"].ID:
		return _Rebalancer.ParseConfigSet(log)
	case _Rebalancer.abi.Events["CrossChainRebalancerSet"].ID:
		return _Rebalancer.ParseCrossChainRebalancerSet(log)
	case _Rebalancer.abi.Events["FinalizationFailed"].ID:
		return _Rebalancer.ParseFinalizationFailed(log)
	case _Rebalancer.abi.Events["LiquidityAdded"].ID:
		return _Rebalancer.ParseLiquidityAdded(log)
	case _Rebalancer.abi.Events["LiquidityContainerSet"].ID:
		return _Rebalancer.ParseLiquidityContainerSet(log)
	case _Rebalancer.abi.Events["LiquidityRemoved"].ID:
		return _Rebalancer.ParseLiquidityRemoved(log)
	case _Rebalancer.abi.Events["LiquidityTransferred"].ID:
		return _Rebalancer.ParseLiquidityTransferred(log)
	case _Rebalancer.abi.Events["OwnershipTransferRequested"].ID:
		return _Rebalancer.ParseOwnershipTransferRequested(log)
	case _Rebalancer.abi.Events["OwnershipTransferred"].ID:
		return _Rebalancer.ParseOwnershipTransferred(log)
	case _Rebalancer.abi.Events["Transmitted"].ID:
		return _Rebalancer.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (RebalancerConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (RebalancerCrossChainRebalancerSet) Topic() common.Hash {
	return common.HexToHash("0xab9bd0e4888101232b8f09dae2952ff59a6eea4a19fbddf2a8ca7b23f0e4cb40")
}

func (RebalancerFinalizationFailed) Topic() common.Hash {
	return common.HexToHash("0xa481d91c3f9574c23ee84fef85246354b760a0527a535d6382354e4684703ce3")
}

func (RebalancerLiquidityAdded) Topic() common.Hash {
	return common.HexToHash("0xc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb312088")
}

func (RebalancerLiquidityContainerSet) Topic() common.Hash {
	return common.HexToHash("0x07dc474694ac40123aadcd2445f1b38d2eb353edd9319dcea043548ab34990ec")
}

func (RebalancerLiquidityRemoved) Topic() common.Hash {
	return common.HexToHash("0xc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719")
}

func (RebalancerLiquidityTransferred) Topic() common.Hash {
	return common.HexToHash("0x2a0b69eaf1b415ca57005b4f87582ddefc6d960325ff30dc62a9b3e1e1e5b8a8")
}

func (RebalancerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (RebalancerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (RebalancerTransmitted) Topic() common.Hash {
	return common.HexToHash("0xe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2")
}

func (_Rebalancer *Rebalancer) Address() common.Address {
	return _Rebalancer.address
}

type RebalancerInterface interface {
	GetAllCrossChainRebalancers(opts *bind.CallOpts) ([]IRebalancerCrossChainRebalancerArgs, error)

	GetCrossChainRebalancer(opts *bind.CallOpts, chainSelector uint64) (RebalancerCrossChainRebalancer, error)

	GetLiquidity(opts *bind.CallOpts) (*big.Int, error)

	GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error)

	GetSupportedDestChains(opts *bind.CallOpts) ([]uint64, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	ILocalToken(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int, nativeBridgeFee *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error)

	ReceiveLiquidity(opts *bind.TransactOpts, remoteChainSelector uint64, amount *big.Int, bridgeSpecificPayload []byte) (*types.Transaction, error)

	RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	SetCrossChainRebalancer(opts *bind.TransactOpts, crossChainLiqManager IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetCrossChainRebalancer0(opts *bind.TransactOpts, crossChainRebalancers []IRebalancerCrossChainRebalancerArgs) (*types.Transaction, error)

	SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error)

	SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*RebalancerConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *RebalancerConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*RebalancerConfigSet, error)

	FilterCrossChainRebalancerSet(opts *bind.FilterOpts, remoteChainSelector []uint64) (*RebalancerCrossChainRebalancerSetIterator, error)

	WatchCrossChainRebalancerSet(opts *bind.WatchOpts, sink chan<- *RebalancerCrossChainRebalancerSet, remoteChainSelector []uint64) (event.Subscription, error)

	ParseCrossChainRebalancerSet(log types.Log) (*RebalancerCrossChainRebalancerSet, error)

	FilterFinalizationFailed(opts *bind.FilterOpts, ocrSeqNum []uint64, remoteChainSelector []uint64) (*RebalancerFinalizationFailedIterator, error)

	WatchFinalizationFailed(opts *bind.WatchOpts, sink chan<- *RebalancerFinalizationFailed, ocrSeqNum []uint64, remoteChainSelector []uint64) (event.Subscription, error)

	ParseFinalizationFailed(log types.Log) (*RebalancerFinalizationFailed, error)

	FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*RebalancerLiquidityAddedIterator, error)

	WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityAdded(log types.Log) (*RebalancerLiquidityAdded, error)

	FilterLiquidityContainerSet(opts *bind.FilterOpts, newLiquidityContainer []common.Address) (*RebalancerLiquidityContainerSetIterator, error)

	WatchLiquidityContainerSet(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityContainerSet, newLiquidityContainer []common.Address) (event.Subscription, error)

	ParseLiquidityContainerSet(log types.Log) (*RebalancerLiquidityContainerSet, error)

	FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*RebalancerLiquidityRemovedIterator, error)

	WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityRemoved(log types.Log) (*RebalancerLiquidityRemoved, error)

	FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*RebalancerLiquidityTransferredIterator, error)

	WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error)

	ParseLiquidityTransferred(log types.Log) (*RebalancerLiquidityTransferred, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*RebalancerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RebalancerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RebalancerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*RebalancerOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*RebalancerTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *RebalancerTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*RebalancerTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
