// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package liquidity_manager

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type ILiquidityManagerCrossChainLiquidityManagerArgs struct {
	RemoteLiquidityManager common.Address
	LocalBridge            common.Address
	RemoteToken            common.Address
	RemoteChainSelector    uint64
	Enabled                bool
}

type LiquidityManagerCrossChainLiquidityManager struct {
	RemoteLiquidityManager common.Address
	LocalBridge            common.Address
	RemoteToken            common.Address
	Enabled                bool
}

var LiquidityManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"localChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ForkedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidRemoteChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestSequenceNumber\",\"type\":\"uint64\"}],\"name\":\"NonIncreasingSequenceNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ocrSeqNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fromChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"toChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCrossChainLiquidityMangers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getCrossChainLiquidityManager\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structLiquidityManager.CrossChainLiquidityManager\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalLiquidityContainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_localToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs\",\"name\":\"crossChainLiqManager\",\"type\":\"tuple\"}],\"name\":\"setCrossChainLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"remoteLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"contractIBridgeAdapter\",\"name\":\"localBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"structILiquidityManager.CrossChainLiquidityManagerArgs[]\",\"name\":\"crossChainLiquidityManagers\",\"type\":\"tuple[]\"}],\"name\":\"setCrossChainLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILiquidityContainer\",\"name\":\"localLiquidityContainer\",\"type\":\"address\"}],\"name\":\"setLocalLiquidityContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR3Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b506040516200395a3803806200395a833981016040819052620000349162000214565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000150565b505046608052506001600160401b038216600003620000f05760405163f89d762960e01b815260040160405180910390fd5b6001600160a01b038316620001185760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0392831660a0526001600160401b039190911660c052600a80546001600160a01b0319169190921617905562000273565b336001600160a01b03821603620001aa5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b03811681146200021157600080fd5b50565b6000806000606084860312156200022a57600080fd5b83516200023781620001fb565b60208501519093506001600160401b03811681146200025557600080fd5b60408501519092506200026881620001fb565b809150509250925092565b60805160a05160c05161367f620002db60003960006122a001526000818161031a015281816104f5015281816108dd01528181610954015281816114e6015281816116350152818161213501526121ee0152600081816117d2015261181e015261367f6000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063791781f5116100cd5780639c8f9f2311610081578063b1dc65a411610066578063b1dc65a41461046f578063def51dde14610482578063f2fde38b1461049757600080fd5b80639c8f9f2314610423578063afcb95d71461043657600080fd5b806381ff7048116100b257806381ff7048146103c25780638da5cb5b146103f257806394a041631461041057600080fd5b8063791781f51461039c57806379ba5097146103ba57600080fd5b806351c6590a11610124578063666cab8d11610109578063666cab8d146103615780636a11ee9014610376578063706bf6451461038957600080fd5b806351c6590a146103025780636511d9191461031557600080fd5b806323f641e81161015557806323f641e8146101d5578063276131de146102da5780633d2d163f146102ef57600080fd5b80630910a51014610171578063181f5a771461018c575b600080fd5b6101796104aa565b6040519081526020015b60405180910390f35b6101c86040518060400160405280601a81526020017f4c69717569646974794d616e6167657220312e332e302d64657600000000000081525081565b6040516101839190612b1d565b61028b6101e3366004612b54565b6040805160808101825260008082526020820181905291810182905260608101919091525067ffffffffffffffff166000908152600860209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff161515606082015290565b60408051825173ffffffffffffffffffffffffffffffffffffffff9081168252602080850151821690830152838301511691810191909152606091820151151591810191909152608001610183565b6102ed6102e8366004612b6f565b610565565b005b6102ed6102fd366004612b81565b6108a4565b6102ed610310366004612bab565b6108c3565b61033c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610183565b610369610a78565b6040516101839190612c15565b6102ed610384366004612e4b565b610ae7565b6102ed610397366004612f18565b6112ff565b600a5473ffffffffffffffffffffffffffffffffffffffff1661033c565b6102ed61134e565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610183565b60005473ffffffffffffffffffffffffffffffffffffffff1661033c565b6102ed61041e366004612f35565b61144b565b6102ed610431366004612bab565b611493565b600254600454604080516001815260208101939093526801000000000000000090910467ffffffffffffffff1690820152606001610183565b6102ed61047d366004612ff6565b61168f565b61048a611d09565b60405161018391906130db565b6102ed6104a5366004612f18565b611e3e565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190613170565b905090565b61056d611e52565b61057d6080820160608301612b54565b67ffffffffffffffff166000036105c0576040517ff89d762900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105cf6020830183612f18565b73ffffffffffffffffffffffffffffffffffffffff161480610616575060006105fe6040830160208401612f18565b73ffffffffffffffffffffffffffffffffffffffff16145b806106465750600061062e6060830160408401612f18565b73ffffffffffffffffffffffffffffffffffffffff16145b1561067d576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008816106926080850160608601612b54565b67ffffffffffffffff16815260208101919091526040016000206002015473ffffffffffffffffffffffffffffffffffffffff160361071e5760096106dd6080830160608401612b54565b8154600181018355600092835260209092206004830401805460039093166008026101000a67ffffffffffffffff8181021990941692909316929092021790555b6040805160808101909152806107376020840184612f18565b73ffffffffffffffffffffffffffffffffffffffff1681526020018260200160208101906107659190612f18565b73ffffffffffffffffffffffffffffffffffffffff1681526020016107906060840160408501612f18565b73ffffffffffffffffffffffffffffffffffffffff1681526020016107bb60a0840160808501613197565b15159052600860006107d36080850160608601612b54565b67ffffffffffffffff16815260208082019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559385015160018301805491831691909516179093559083015160029091018054606090940151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909416919092161791909117905550565b6108ac611e52565b6108bf828267ffffffffffffffff611ed5565b5050565b61090573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846122fa565b600a546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c391906131b4565b50600a546040517feb521a4c0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063eb521a4c90602401600060405180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b50506040518392503391507fc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb31208890600090a350565b60606007805480602002602001604051908101604052809291908181526020018280548015610add57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610ab2575b5050505050905090565b855185518560ff16601f831115610b5f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610bc9576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610b56565b818314610c57576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610b56565b610c62816003613200565b8311610cca576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610b56565b610cd2611e52565b60065460005b81811015610dce576005600060068381548110610cf757610cf761321d565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905560078054600592919084908110610d6757610d6761321d565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055610dc78161324c565b9050610cd8565b50895160005b818110156111a75760008c8281518110610df057610df061321d565b6020026020010151905060006002811115610e0d57610e0d613284565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610e4c57610e4c613284565b14610eb3576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610b56565b73ffffffffffffffffffffffffffffffffffffffff8116610f00576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610fb057610fb0613284565b021790555090505060008c8381518110610fcc57610fcc61321d565b6020026020010151905060006002811115610fe957610fe9613284565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff16600281111561102857611028613284565b1461108f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610b56565b73ffffffffffffffffffffffffffffffffffffffff81166110dc576040517fd6c62c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561118c5761118c613284565b02179055509050505050806111a09061324c565b9050610dd4565b508a516111bb9060069060208e01906129f1565b5089516111cf9060079060208d01906129f1565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c1617179055600480546112559146913091906000906112279063ffffffff166132b3565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e6123dc565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f6040516112e9999897969594939291906132d6565b60405180910390a1505050505050505050505050565b611307611e52565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146113cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610b56565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611453611e52565b60005b8181101561148e5761147e8383838181106114735761147361321d565b905060a00201610565565b6114878161324c565b9050611456565b505050565b61149b611e52565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561152d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115519190613170565b905081811015611597576040517fa17e11d50000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610b56565b600a546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690630a861f2a90602401600060405180830381600087803b15801561160357600080fd5b505af1158015611617573d6000803e3d6000fd5b5061165e92505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690503384612487565b604051829033907fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf984017171990600090a35050565b60045460208901359067ffffffffffffffff6801000000000000000090910481169082161161171257600480546040517f6e376b6600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff80851693820193909352680100000000000000009091049091166024820152604401610b56565b61171d8888836124dd565b600480547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416021790556040805160608101825260025480825260035460ff808216602085015261010090910416928201929092528a359182146117cf5780516040517f93df584c000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610b56565b467f000000000000000000000000000000000000000000000000000000000000000014611850576040517f0f01ce850000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152466024820152604401610b56565b6040805183815267ffffffffffffffff851660208201527fe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2910160405180910390a160208101516118a290600161336c565b60ff1687146118dd576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868514611916576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561195957611959613284565b600281111561196a5761196a613284565b905250905060028160200151600281111561198757611987613284565b1480156119ce57506007816000015160ff16815481106119a9576119a961321d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b611a04576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000611a12866020613200565b611a1d896020613200565b611a298c610144613385565b611a339190613385565b611a3d9190613385565b9050368114611a81576040517f8e1192e100000000000000000000000000000000000000000000000000000000815260048101829052366024820152604401610b56565b5060008a8a604051611a94929190613398565b604051908190038120611aab918e906020016133a8565b604051602081830303815290604052805190602001209050611acb612a7b565b8860005b81811015611cf85760006001858a8460208110611aee57611aee61321d565b611afb91901a601b61336c565b8f8f86818110611b0d57611b0d61321d565b905060200201358e8e87818110611b2657611b2661321d565b9050602002013560405160008152602001604052604051611b63949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611b85573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff8082168652939750919550929392840191610100909104166002811115611c0857611c08613284565b6002811115611c1957611c19613284565b9052509050600181602001516002811115611c3657611c36613284565b14611c6d576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f8110611c8457611c8461321d565b602002015115611cc0576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f8110611cdb57611cdb61321d565b9115156020909202015250611cf190508161324c565b9050611acf565b505050505050505050505050505050565b60608060005b600954811015611e3857600060098281548110611d2e57611d2e61321d565b60009182526020808320600483040154600390921660089081026101000a90920467ffffffffffffffff16808452918152604092839020835160808082018652825473ffffffffffffffffffffffffffffffffffffffff9081168352600184015481168386019081526002909401548082168489019081527401000000000000000000000000000000000000000090910460ff1615156060808601918252895160a081018b5286518516815296518416978701979097529051909116968401969096529282018490529351151591810191909152855191935090859085908110611e1a57611e1a61321d565b6020026020010181905250505080611e319061324c565b9050611d0f565b50919050565b611e46611e52565b611e4f816125e1565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610b56565b565b6000611edf6104aa565b905082811015611f25576040517fa17e11d50000000000000000000000000000000000000000000000000000000081526004810184905260248101829052604401610b56565b67ffffffffffffffff84166000908152600860209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301548116938201939093526002909101549182169281019290925274010000000000000000000000000000000000000000900460ff16151560608201819052611fea576040517fc9ff038f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86166004820152602401610b56565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16632e4b1fc96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205f9190613170565b600a546040517f0a861f2a0000000000000000000000000000000000000000000000000000000081526004810188905291925073ffffffffffffffffffffffffffffffffffffffff1690630a861f2a90602401600060405180830381600087803b1580156120cc57600080fd5b505af11580156120e0573d6000803e3d6000fd5b5050505060208201516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a491906131b4565b506020820151604080840151845191517f79a35b4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529182166024820152918116604483015260648201889052909116906379a35b4b9083906084016000604051808303818588803b15801561225357600080fd5b505af1158015612267573d6000803e3d6000fd5b505084516040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018a905267ffffffffffffffff808c1695507f000000000000000000000000000000000000000000000000000000000000000081169450891692507fc3699d6ab2762f468855d25ae224adfffe5b2bc4d57ca590cdfdbbbeefbee22f910160405180910390a4505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526123d69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526126d6565b50505050565b6000808a8a8a8a8a8a8a8a8a604051602001612400999897969594939291906133bc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261148e9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612354565b60006124eb83850185613543565b80515190915060005b8181101561255957612549836000015182815181106125155761251561321d565b602002602001015160200151846000015183815181106125375761253761321d565b60200260200101516000015186611ed5565b6125528161324c565b90506124f4565b5060208201515160005b818110156125d8576125c8846020015182815181106125845761258461321d565b602002602001015160200151856020015183815181106125a6576125a661321d565b602002602001015160000151866020015184815181106123d6576123d661321d565b6125d18161324c565b9050612563565b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603612660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610b56565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612738826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127e29092919063ffffffff16565b80519091501561148e578080602001905181019061275691906131b4565b61148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b56565b60606127f184846000856127f9565b949350505050565b60608247101561288b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b56565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128b49190613656565b60006040518083038185875af1925050503d80600081146128f1576040519150601f19603f3d011682016040523d82523d6000602084013e6128f6565b606091505b509150915061290787838387612912565b979650505050505050565b606083156129a85782516000036129a15773ffffffffffffffffffffffffffffffffffffffff85163b6129a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b56565b50816127f1565b6127f183838151156129bd5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b569190612b1d565b828054828255906000526020600020908101928215612a6b579160200282015b82811115612a6b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612a11565b50612a77929150612a9a565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b80821115612a775760008155600101612a9b565b60005b83811015612aca578181015183820152602001612ab2565b50506000910152565b60008151808452612aeb816020860160208601612aaf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612b306020830184612ad3565b9392505050565b803567ffffffffffffffff81168114612b4f57600080fd5b919050565b600060208284031215612b6657600080fd5b612b3082612b37565b600060a08284031215611e3857600080fd5b60008060408385031215612b9457600080fd5b612b9d83612b37565b946020939093013593505050565b600060208284031215612bbd57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612c0a57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612bd8565b509495945050505050565b602081526000612b306020830184612bc4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612c7a57612c7a612c28565b60405290565b6040805190810167ffffffffffffffff81118282101715612c7a57612c7a612c28565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612cea57612cea612c28565b604052919050565b600067ffffffffffffffff821115612d0c57612d0c612c28565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff81168114611e4f57600080fd5b600082601f830112612d4957600080fd5b81356020612d5e612d5983612cf2565b612ca3565b82815260059290921b84018101918181019086841115612d7d57600080fd5b8286015b84811015612da1578035612d9481612d16565b8352918301918301612d81565b509695505050505050565b803560ff81168114612b4f57600080fd5b600082601f830112612dce57600080fd5b813567ffffffffffffffff811115612de857612de8612c28565b612e1960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ca3565b818152846020838601011115612e2e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c08789031215612e6457600080fd5b863567ffffffffffffffff80821115612e7c57600080fd5b612e888a838b01612d38565b97506020890135915080821115612e9e57600080fd5b612eaa8a838b01612d38565b9650612eb860408a01612dac565b95506060890135915080821115612ece57600080fd5b612eda8a838b01612dbd565b9450612ee860808a01612b37565b935060a0890135915080821115612efe57600080fd5b50612f0b89828a01612dbd565b9150509295509295509295565b600060208284031215612f2a57600080fd5b8135612b3081612d16565b60008060208385031215612f4857600080fd5b823567ffffffffffffffff80821115612f6057600080fd5b818501915085601f830112612f7457600080fd5b813581811115612f8357600080fd5b86602060a083028501011115612f9857600080fd5b60209290920196919550909350505050565b60008083601f840112612fbc57600080fd5b50813567ffffffffffffffff811115612fd457600080fd5b6020830191508360208260051b8501011115612fef57600080fd5b9250929050565b60008060008060008060008060e0898b03121561301257600080fd5b606089018a81111561302357600080fd5b8998503567ffffffffffffffff8082111561303d57600080fd5b818b0191508b601f83011261305157600080fd5b81358181111561306057600080fd5b8c602082850101111561307257600080fd5b6020830199508098505060808b013591508082111561309057600080fd5b61309c8c838d01612faa565b909750955060a08b01359150808211156130b557600080fd5b506130c28b828c01612faa565b999c989b50969995989497949560c00135949350505050565b602080825282518282018190526000919060409081850190868401855b82811015613163578151805173ffffffffffffffffffffffffffffffffffffffff90811686528782015181168887015286820151168686015260608082015167ffffffffffffffff169086015260809081015115159085015260a090930192908501906001016130f8565b5091979650505050505050565b60006020828403121561318257600080fd5b5051919050565b8015158114611e4f57600080fd5b6000602082840312156131a957600080fd5b8135612b3081613189565b6000602082840312156131c657600080fd5b8151612b3081613189565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417613217576132176131d1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361327d5761327d6131d1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff8083168181036132cc576132cc6131d1565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526133068184018a612bc4565b9050828103608084015261331a8189612bc4565b905060ff871660a084015282810360c08401526133378187612ad3565b905067ffffffffffffffff851660e084015282810361010084015261335c8185612ad3565b9c9b505050505050505050505050565b60ff8181168382160190811115613217576132176131d1565b80820180821115613217576132176131d1565b8183823760009101908152919050565b828152606082602083013760800192915050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b1660408501528160608501526134038285018b612bc4565b91508382036080850152613417828a612bc4565b915060ff881660a085015283820360c08501526134348288612ad3565b90861660e0850152838103610100850152905061335c8185612ad3565b600082601f83011261346257600080fd5b81356020613472612d5983612cf2565b82815260059290921b8401810191818101908684111561349157600080fd5b8286015b84811015612da157803567ffffffffffffffff808211156134b65760008081fd5b81890191506060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156134ef5760008081fd5b6134f7612c57565b878401358152604061350a818601612b37565b828a01529184013591838311156135215760008081fd5b61352f8d8a85880101612dbd565b908201528652505050918301918301613495565b6000602080838503121561355657600080fd5b823567ffffffffffffffff8082111561356e57600080fd5b8185019150604080838803121561358457600080fd5b61358c612c80565b83358381111561359b57600080fd5b8401601f810189136135ac57600080fd5b80356135ba612d5982612cf2565b81815260069190911b8201870190878101908b8311156135d957600080fd5b928801925b828410156136205785848d0312156135f65760008081fd5b6135fe612c80565b8435815261360d8a8601612b37565b818b0152825292850192908801906135de565b84525050508385013591508282111561363857600080fd5b61364488838601613451565b85820152809550505050505092915050565b60008251613668818460208701612aaf565b919091019291505056fea164736f6c6343000813000a",
}

var LiquidityManagerABI = LiquidityManagerMetaData.ABI

var LiquidityManagerBin = LiquidityManagerMetaData.Bin

func DeployLiquidityManager(auth *bind.TransactOpts, backend bind.ContractBackend, token common.Address, localChainSelector uint64, localLiquidityContainer common.Address) (common.Address, *types.Transaction, *LiquidityManager, error) {
	parsed, err := LiquidityManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidityManagerBin), backend, token, localChainSelector, localLiquidityContainer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidityManager{address: address, abi: *parsed, LiquidityManagerCaller: LiquidityManagerCaller{contract: contract}, LiquidityManagerTransactor: LiquidityManagerTransactor{contract: contract}, LiquidityManagerFilterer: LiquidityManagerFilterer{contract: contract}}, nil
}

type LiquidityManager struct {
	address common.Address
	abi     abi.ABI
	LiquidityManagerCaller
	LiquidityManagerTransactor
	LiquidityManagerFilterer
}

type LiquidityManagerCaller struct {
	contract *bind.BoundContract
}

type LiquidityManagerTransactor struct {
	contract *bind.BoundContract
}

type LiquidityManagerFilterer struct {
	contract *bind.BoundContract
}

type LiquidityManagerSession struct {
	Contract     *LiquidityManager
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type LiquidityManagerCallerSession struct {
	Contract *LiquidityManagerCaller
	CallOpts bind.CallOpts
}

type LiquidityManagerTransactorSession struct {
	Contract     *LiquidityManagerTransactor
	TransactOpts bind.TransactOpts
}

type LiquidityManagerRaw struct {
	Contract *LiquidityManager
}

type LiquidityManagerCallerRaw struct {
	Contract *LiquidityManagerCaller
}

type LiquidityManagerTransactorRaw struct {
	Contract *LiquidityManagerTransactor
}

func NewLiquidityManager(address common.Address, backend bind.ContractBackend) (*LiquidityManager, error) {
	abi, err := abi.JSON(strings.NewReader(LiquidityManagerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindLiquidityManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidityManager{address: address, abi: abi, LiquidityManagerCaller: LiquidityManagerCaller{contract: contract}, LiquidityManagerTransactor: LiquidityManagerTransactor{contract: contract}, LiquidityManagerFilterer: LiquidityManagerFilterer{contract: contract}}, nil
}

func NewLiquidityManagerCaller(address common.Address, caller bind.ContractCaller) (*LiquidityManagerCaller, error) {
	contract, err := bindLiquidityManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerCaller{contract: contract}, nil
}

func NewLiquidityManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidityManagerTransactor, error) {
	contract, err := bindLiquidityManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerTransactor{contract: contract}, nil
}

func NewLiquidityManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidityManagerFilterer, error) {
	contract, err := bindLiquidityManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerFilterer{contract: contract}, nil
}

func bindLiquidityManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LiquidityManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_LiquidityManager *LiquidityManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidityManager.Contract.LiquidityManagerCaller.contract.Call(opts, result, method, params...)
}

func (_LiquidityManager *LiquidityManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidityManager.Contract.LiquidityManagerTransactor.contract.Transfer(opts)
}

func (_LiquidityManager *LiquidityManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidityManager.Contract.LiquidityManagerTransactor.contract.Transact(opts, method, params...)
}

func (_LiquidityManager *LiquidityManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidityManager.Contract.contract.Call(opts, result, method, params...)
}

func (_LiquidityManager *LiquidityManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidityManager.Contract.contract.Transfer(opts)
}

func (_LiquidityManager *LiquidityManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidityManager.Contract.contract.Transact(opts, method, params...)
}

func (_LiquidityManager *LiquidityManagerCaller) GetAllCrossChainLiquidityMangers(opts *bind.CallOpts) ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "getAllCrossChainLiquidityMangers")

	if err != nil {
		return *new([]ILiquidityManagerCrossChainLiquidityManagerArgs), err
	}

	out0 := *abi.ConvertType(out[0], new([]ILiquidityManagerCrossChainLiquidityManagerArgs)).(*[]ILiquidityManagerCrossChainLiquidityManagerArgs)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) GetAllCrossChainLiquidityMangers() ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	return _LiquidityManager.Contract.GetAllCrossChainLiquidityMangers(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) GetAllCrossChainLiquidityMangers() ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error) {
	return _LiquidityManager.Contract.GetAllCrossChainLiquidityMangers(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) GetCrossChainLiquidityManager(opts *bind.CallOpts, chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "getCrossChainLiquidityManager", chainSelector)

	if err != nil {
		return *new(LiquidityManagerCrossChainLiquidityManager), err
	}

	out0 := *abi.ConvertType(out[0], new(LiquidityManagerCrossChainLiquidityManager)).(*LiquidityManagerCrossChainLiquidityManager)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) GetCrossChainLiquidityManager(chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	return _LiquidityManager.Contract.GetCrossChainLiquidityManager(&_LiquidityManager.CallOpts, chainSelector)
}

func (_LiquidityManager *LiquidityManagerCallerSession) GetCrossChainLiquidityManager(chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error) {
	return _LiquidityManager.Contract.GetCrossChainLiquidityManager(&_LiquidityManager.CallOpts, chainSelector)
}

func (_LiquidityManager *LiquidityManagerCaller) GetLiquidity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "getLiquidity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) GetLiquidity() (*big.Int, error) {
	return _LiquidityManager.Contract.GetLiquidity(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) GetLiquidity() (*big.Int, error) {
	return _LiquidityManager.Contract.GetLiquidity(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "getLocalLiquidityContainer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _LiquidityManager.Contract.GetLocalLiquidityContainer(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) GetLocalLiquidityContainer() (common.Address, error) {
	return _LiquidityManager.Contract.GetLocalLiquidityContainer(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) GetTransmitters() ([]common.Address, error) {
	return _LiquidityManager.Contract.GetTransmitters(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) GetTransmitters() ([]common.Address, error) {
	return _LiquidityManager.Contract.GetTransmitters(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) ILocalToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "i_localToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) ILocalToken() (common.Address, error) {
	return _LiquidityManager.Contract.ILocalToken(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) ILocalToken() (common.Address, error) {
	return _LiquidityManager.Contract.ILocalToken(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_LiquidityManager *LiquidityManagerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _LiquidityManager.Contract.LatestConfigDetails(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _LiquidityManager.Contract.LatestConfigDetails(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SequenceNumber = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

func (_LiquidityManager *LiquidityManagerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _LiquidityManager.Contract.LatestConfigDigestAndEpoch(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _LiquidityManager.Contract.LatestConfigDigestAndEpoch(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) Owner() (common.Address, error) {
	return _LiquidityManager.Contract.Owner(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) Owner() (common.Address, error) {
	return _LiquidityManager.Contract.Owner(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidityManager.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_LiquidityManager *LiquidityManagerSession) TypeAndVersion() (string, error) {
	return _LiquidityManager.Contract.TypeAndVersion(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerCallerSession) TypeAndVersion() (string, error) {
	return _LiquidityManager.Contract.TypeAndVersion(&_LiquidityManager.CallOpts)
}

func (_LiquidityManager *LiquidityManagerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "acceptOwnership")
}

func (_LiquidityManager *LiquidityManagerSession) AcceptOwnership() (*types.Transaction, error) {
	return _LiquidityManager.Contract.AcceptOwnership(&_LiquidityManager.TransactOpts)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _LiquidityManager.Contract.AcceptOwnership(&_LiquidityManager.TransactOpts)
}

func (_LiquidityManager *LiquidityManagerTransactor) AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "addLiquidity", amount)
}

func (_LiquidityManager *LiquidityManagerSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.AddLiquidity(&_LiquidityManager.TransactOpts, amount)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) AddLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.AddLiquidity(&_LiquidityManager.TransactOpts, amount)
}

func (_LiquidityManager *LiquidityManagerTransactor) RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "rebalanceLiquidity", chainSelector, amount)
}

func (_LiquidityManager *LiquidityManagerSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.RebalanceLiquidity(&_LiquidityManager.TransactOpts, chainSelector, amount)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) RebalanceLiquidity(chainSelector uint64, amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.RebalanceLiquidity(&_LiquidityManager.TransactOpts, chainSelector, amount)
}

func (_LiquidityManager *LiquidityManagerTransactor) RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "removeLiquidity", amount)
}

func (_LiquidityManager *LiquidityManagerSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.RemoveLiquidity(&_LiquidityManager.TransactOpts, amount)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) RemoveLiquidity(amount *big.Int) (*types.Transaction, error) {
	return _LiquidityManager.Contract.RemoveLiquidity(&_LiquidityManager.TransactOpts, amount)
}

func (_LiquidityManager *LiquidityManagerTransactor) SetCrossChainLiquidityManager(opts *bind.TransactOpts, crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "setCrossChainLiquidityManager", crossChainLiqManager)
}

func (_LiquidityManager *LiquidityManagerSession) SetCrossChainLiquidityManager(crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetCrossChainLiquidityManager(&_LiquidityManager.TransactOpts, crossChainLiqManager)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) SetCrossChainLiquidityManager(crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetCrossChainLiquidityManager(&_LiquidityManager.TransactOpts, crossChainLiqManager)
}

func (_LiquidityManager *LiquidityManagerTransactor) SetCrossChainLiquidityManager0(opts *bind.TransactOpts, crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "setCrossChainLiquidityManager0", crossChainLiquidityManagers)
}

func (_LiquidityManager *LiquidityManagerSession) SetCrossChainLiquidityManager0(crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetCrossChainLiquidityManager0(&_LiquidityManager.TransactOpts, crossChainLiquidityManagers)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) SetCrossChainLiquidityManager0(crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetCrossChainLiquidityManager0(&_LiquidityManager.TransactOpts, crossChainLiquidityManagers)
}

func (_LiquidityManager *LiquidityManagerTransactor) SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "setLocalLiquidityContainer", localLiquidityContainer)
}

func (_LiquidityManager *LiquidityManagerSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetLocalLiquidityContainer(&_LiquidityManager.TransactOpts, localLiquidityContainer)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) SetLocalLiquidityContainer(localLiquidityContainer common.Address) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetLocalLiquidityContainer(&_LiquidityManager.TransactOpts, localLiquidityContainer)
}

func (_LiquidityManager *LiquidityManagerTransactor) SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "setOCR3Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_LiquidityManager *LiquidityManagerSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetOCR3Config(&_LiquidityManager.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) SetOCR3Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _LiquidityManager.Contract.SetOCR3Config(&_LiquidityManager.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_LiquidityManager *LiquidityManagerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "transferOwnership", to)
}

func (_LiquidityManager *LiquidityManagerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _LiquidityManager.Contract.TransferOwnership(&_LiquidityManager.TransactOpts, to)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _LiquidityManager.Contract.TransferOwnership(&_LiquidityManager.TransactOpts, to)
}

func (_LiquidityManager *LiquidityManagerTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _LiquidityManager.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_LiquidityManager *LiquidityManagerSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _LiquidityManager.Contract.Transmit(&_LiquidityManager.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_LiquidityManager *LiquidityManagerTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _LiquidityManager.Contract.Transmit(&_LiquidityManager.TransactOpts, reportContext, report, rs, ss, rawVs)
}

type LiquidityManagerConfigSetIterator struct {
	Event *LiquidityManagerConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerConfigSetIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterConfigSet(opts *bind.FilterOpts) (*LiquidityManagerConfigSetIterator, error) {

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerConfigSetIterator{contract: _LiquidityManager.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *LiquidityManagerConfigSet) (event.Subscription, error) {

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerConfigSet)
				if err := _LiquidityManager.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseConfigSet(log types.Log) (*LiquidityManagerConfigSet, error) {
	event := new(LiquidityManagerConfigSet)
	if err := _LiquidityManager.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerLiquidityAddedIterator struct {
	Event *LiquidityManagerLiquidityAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerLiquidityAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerLiquidityAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerLiquidityAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerLiquidityAddedIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerLiquidityAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerLiquidityAdded struct {
	Provider common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*LiquidityManagerLiquidityAddedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerLiquidityAddedIterator{contract: _LiquidityManager.contract, event: "LiquidityAdded", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "LiquidityAdded", providerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerLiquidityAdded)
				if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseLiquidityAdded(log types.Log) (*LiquidityManagerLiquidityAdded, error) {
	event := new(LiquidityManagerLiquidityAdded)
	if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerLiquidityRemovedIterator struct {
	Event *LiquidityManagerLiquidityRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerLiquidityRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerLiquidityRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerLiquidityRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerLiquidityRemovedIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerLiquidityRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerLiquidityRemoved struct {
	Remover common.Address
	Amount  *big.Int
	Raw     types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*LiquidityManagerLiquidityRemovedIterator, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerLiquidityRemovedIterator{contract: _LiquidityManager.contract, event: "LiquidityRemoved", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error) {

	var removerRule []interface{}
	for _, removerItem := range remover {
		removerRule = append(removerRule, removerItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "LiquidityRemoved", removerRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerLiquidityRemoved)
				if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseLiquidityRemoved(log types.Log) (*LiquidityManagerLiquidityRemoved, error) {
	event := new(LiquidityManagerLiquidityRemoved)
	if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerLiquidityTransferredIterator struct {
	Event *LiquidityManagerLiquidityTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerLiquidityTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerLiquidityTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerLiquidityTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerLiquidityTransferredIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerLiquidityTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerLiquidityTransferred struct {
	OcrSeqNum         uint64
	FromChainSelector uint64
	ToChainSelector   uint64
	To                common.Address
	Amount            *big.Int
	Raw               types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*LiquidityManagerLiquidityTransferredIterator, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerLiquidityTransferredIterator{contract: _LiquidityManager.contract, event: "LiquidityTransferred", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error) {

	var ocrSeqNumRule []interface{}
	for _, ocrSeqNumItem := range ocrSeqNum {
		ocrSeqNumRule = append(ocrSeqNumRule, ocrSeqNumItem)
	}
	var fromChainSelectorRule []interface{}
	for _, fromChainSelectorItem := range fromChainSelector {
		fromChainSelectorRule = append(fromChainSelectorRule, fromChainSelectorItem)
	}
	var toChainSelectorRule []interface{}
	for _, toChainSelectorItem := range toChainSelector {
		toChainSelectorRule = append(toChainSelectorRule, toChainSelectorItem)
	}

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "LiquidityTransferred", ocrSeqNumRule, fromChainSelectorRule, toChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerLiquidityTransferred)
				if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseLiquidityTransferred(log types.Log) (*LiquidityManagerLiquidityTransferred, error) {
	event := new(LiquidityManagerLiquidityTransferred)
	if err := _LiquidityManager.contract.UnpackLog(event, "LiquidityTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerOwnershipTransferRequestedIterator struct {
	Event *LiquidityManagerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidityManagerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerOwnershipTransferRequestedIterator{contract: _LiquidityManager.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *LiquidityManagerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerOwnershipTransferRequested)
				if err := _LiquidityManager.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseOwnershipTransferRequested(log types.Log) (*LiquidityManagerOwnershipTransferRequested, error) {
	event := new(LiquidityManagerOwnershipTransferRequested)
	if err := _LiquidityManager.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerOwnershipTransferredIterator struct {
	Event *LiquidityManagerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidityManagerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerOwnershipTransferredIterator{contract: _LiquidityManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LiquidityManagerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerOwnershipTransferred)
				if err := _LiquidityManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseOwnershipTransferred(log types.Log) (*LiquidityManagerOwnershipTransferred, error) {
	event := new(LiquidityManagerOwnershipTransferred)
	if err := _LiquidityManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LiquidityManagerTransmittedIterator struct {
	Event *LiquidityManagerTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *LiquidityManagerTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidityManagerTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(LiquidityManagerTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *LiquidityManagerTransmittedIterator) Error() error {
	return it.fail
}

func (it *LiquidityManagerTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type LiquidityManagerTransmitted struct {
	ConfigDigest   [32]byte
	SequenceNumber uint64
	Raw            types.Log
}

func (_LiquidityManager *LiquidityManagerFilterer) FilterTransmitted(opts *bind.FilterOpts) (*LiquidityManagerTransmittedIterator, error) {

	logs, sub, err := _LiquidityManager.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &LiquidityManagerTransmittedIterator{contract: _LiquidityManager.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_LiquidityManager *LiquidityManagerFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *LiquidityManagerTransmitted) (event.Subscription, error) {

	logs, sub, err := _LiquidityManager.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(LiquidityManagerTransmitted)
				if err := _LiquidityManager.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_LiquidityManager *LiquidityManagerFilterer) ParseTransmitted(log types.Log) (*LiquidityManagerTransmitted, error) {
	event := new(LiquidityManagerTransmitted)
	if err := _LiquidityManager.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs       bool
	ConfigDigest   [32]byte
	SequenceNumber uint64
}

func (_LiquidityManager *LiquidityManager) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _LiquidityManager.abi.Events["ConfigSet"].ID:
		return _LiquidityManager.ParseConfigSet(log)
	case _LiquidityManager.abi.Events["LiquidityAdded"].ID:
		return _LiquidityManager.ParseLiquidityAdded(log)
	case _LiquidityManager.abi.Events["LiquidityRemoved"].ID:
		return _LiquidityManager.ParseLiquidityRemoved(log)
	case _LiquidityManager.abi.Events["LiquidityTransferred"].ID:
		return _LiquidityManager.ParseLiquidityTransferred(log)
	case _LiquidityManager.abi.Events["OwnershipTransferRequested"].ID:
		return _LiquidityManager.ParseOwnershipTransferRequested(log)
	case _LiquidityManager.abi.Events["OwnershipTransferred"].ID:
		return _LiquidityManager.ParseOwnershipTransferred(log)
	case _LiquidityManager.abi.Events["Transmitted"].ID:
		return _LiquidityManager.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (LiquidityManagerConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (LiquidityManagerLiquidityAdded) Topic() common.Hash {
	return common.HexToHash("0xc17cea59c2955cb181b03393209566960365771dbba9dc3d510180e7cb312088")
}

func (LiquidityManagerLiquidityRemoved) Topic() common.Hash {
	return common.HexToHash("0xc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719")
}

func (LiquidityManagerLiquidityTransferred) Topic() common.Hash {
	return common.HexToHash("0xc3699d6ab2762f468855d25ae224adfffe5b2bc4d57ca590cdfdbbbeefbee22f")
}

func (LiquidityManagerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (LiquidityManagerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (LiquidityManagerTransmitted) Topic() common.Hash {
	return common.HexToHash("0xe893c2681d327421d89e1cb54fbe64645b4dcea668d6826130b62cf4c6eefea2")
}

func (_LiquidityManager *LiquidityManager) Address() common.Address {
	return _LiquidityManager.address
}

type LiquidityManagerInterface interface {
	GetAllCrossChainLiquidityMangers(opts *bind.CallOpts) ([]ILiquidityManagerCrossChainLiquidityManagerArgs, error)

	GetCrossChainLiquidityManager(opts *bind.CallOpts, chainSelector uint64) (LiquidityManagerCrossChainLiquidityManager, error)

	GetLiquidity(opts *bind.CallOpts) (*big.Int, error)

	GetLocalLiquidityContainer(opts *bind.CallOpts) (common.Address, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	ILocalToken(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	RebalanceLiquidity(opts *bind.TransactOpts, chainSelector uint64, amount *big.Int) (*types.Transaction, error)

	RemoveLiquidity(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	SetCrossChainLiquidityManager(opts *bind.TransactOpts, crossChainLiqManager ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error)

	SetCrossChainLiquidityManager0(opts *bind.TransactOpts, crossChainLiquidityManagers []ILiquidityManagerCrossChainLiquidityManagerArgs) (*types.Transaction, error)

	SetLocalLiquidityContainer(opts *bind.TransactOpts, localLiquidityContainer common.Address) (*types.Transaction, error)

	SetOCR3Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*LiquidityManagerConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *LiquidityManagerConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*LiquidityManagerConfigSet, error)

	FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address, amount []*big.Int) (*LiquidityManagerLiquidityAddedIterator, error)

	WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityAdded, provider []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityAdded(log types.Log) (*LiquidityManagerLiquidityAdded, error)

	FilterLiquidityRemoved(opts *bind.FilterOpts, remover []common.Address, amount []*big.Int) (*LiquidityManagerLiquidityRemovedIterator, error)

	WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityRemoved, remover []common.Address, amount []*big.Int) (event.Subscription, error)

	ParseLiquidityRemoved(log types.Log) (*LiquidityManagerLiquidityRemoved, error)

	FilterLiquidityTransferred(opts *bind.FilterOpts, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (*LiquidityManagerLiquidityTransferredIterator, error)

	WatchLiquidityTransferred(opts *bind.WatchOpts, sink chan<- *LiquidityManagerLiquidityTransferred, ocrSeqNum []uint64, fromChainSelector []uint64, toChainSelector []uint64) (event.Subscription, error)

	ParseLiquidityTransferred(log types.Log) (*LiquidityManagerLiquidityTransferred, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidityManagerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *LiquidityManagerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*LiquidityManagerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidityManagerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LiquidityManagerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*LiquidityManagerOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*LiquidityManagerTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *LiquidityManagerTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*LiquidityManagerTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
