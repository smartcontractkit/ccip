// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_optimism_l2_output_oracle

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	optimism_l2_output_oracle "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/liquiditymanager/generated/optimism_l2_output_oracle"
)

// OptimismL2OutputOracleInterface is an autogenerated mock type for the OptimismL2OutputOracleInterface type
type OptimismL2OutputOracleInterface struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *OptimismL2OutputOracleInterface) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// GetL2Output provides a mock function with given fields: opts, _l2OutputIndex
func (_m *OptimismL2OutputOracleInterface) GetL2Output(opts *bind.CallOpts, _l2OutputIndex *big.Int) (optimism_l2_output_oracle.TypesOutputProposal, error) {
	ret := _m.Called(opts, _l2OutputIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetL2Output")
	}

	var r0 optimism_l2_output_oracle.TypesOutputProposal
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (optimism_l2_output_oracle.TypesOutputProposal, error)); ok {
		return rf(opts, _l2OutputIndex)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) optimism_l2_output_oracle.TypesOutputProposal); ok {
		r0 = rf(opts, _l2OutputIndex)
	} else {
		r0 = ret.Get(0).(optimism_l2_output_oracle.TypesOutputProposal)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, _l2OutputIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetL2OutputIndexAfter provides a mock function with given fields: opts, _l2BlockNumber
func (_m *OptimismL2OutputOracleInterface) GetL2OutputIndexAfter(opts *bind.CallOpts, _l2BlockNumber *big.Int) (*big.Int, error) {
	ret := _m.Called(opts, _l2BlockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetL2OutputIndexAfter")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (*big.Int, error)); ok {
		return rf(opts, _l2BlockNumber)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) *big.Int); ok {
		r0 = rf(opts, _l2BlockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, _l2BlockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOptimismL2OutputOracleInterface creates a new instance of OptimismL2OutputOracleInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOptimismL2OutputOracleInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OptimismL2OutputOracleInterface {
	mock := &OptimismL2OutputOracleInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
